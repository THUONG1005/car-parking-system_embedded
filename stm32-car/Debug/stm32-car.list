
stm32-car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000667c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d4  080069d4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080069d4  080069d4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069d4  080069d4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069d4  080069d4  000169d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080069dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  2000005c  08006a38  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08006a38  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001215c  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ae  00000000  00000000  00032224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  000348d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e70  00000000  00000000  00035b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d6d  00000000  00000000  00036988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015019  00000000  00000000  000396f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f539  00000000  00000000  0004e70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053f0  00000000  00000000  000ddc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e3038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006770 	.word	0x08006770

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08006770 	.word	0x08006770

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD1602_SendByte>:

static uint8_t 				_bl_status;
static I2C_HandleTypeDef*	_i2c_port;

static HAL_StatusTypeDef LCD1602_SendByte(uint8_t mode, uint8_t data)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	460a      	mov	r2, r1
 8000166:	71fb      	strb	r3, [r7, #7]
 8000168:	4613      	mov	r3, r2
 800016a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 800016c:	2300      	movs	r3, #0
 800016e:	73fb      	strb	r3, [r7, #15]
	
	uint8_t data_arr[4] = 
	{
		(data & 0xF0) | (_bl_status << LCD_BL) | (1 << LCD_EN) | (0 << LCD_RW) | (mode << LCD_RS),
 8000170:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000174:	f023 030f 	bic.w	r3, r3, #15
 8000178:	b25a      	sxtb	r2, r3
 800017a:	4b2a      	ldr	r3, [pc, #168]	; (8000224 <LCD1602_SendByte+0xc8>)
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	00db      	lsls	r3, r3, #3
 8000180:	b25b      	sxtb	r3, r3
 8000182:	4313      	orrs	r3, r2
 8000184:	b25b      	sxtb	r3, r3
 8000186:	b2da      	uxtb	r2, r3
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	4313      	orrs	r3, r2
 800018c:	b2db      	uxtb	r3, r3
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	b2db      	uxtb	r3, r3
	uint8_t data_arr[4] = 
 8000194:	723b      	strb	r3, [r7, #8]
		(data & 0xF0) | (_bl_status << LCD_BL) | (0 << LCD_EN) | (0 << LCD_RW) | (mode << LCD_RS),
 8000196:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800019a:	f023 030f 	bic.w	r3, r3, #15
 800019e:	b25a      	sxtb	r2, r3
 80001a0:	4b20      	ldr	r3, [pc, #128]	; (8000224 <LCD1602_SendByte+0xc8>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	00db      	lsls	r3, r3, #3
 80001a6:	b25b      	sxtb	r3, r3
 80001a8:	4313      	orrs	r3, r2
 80001aa:	b25a      	sxtb	r2, r3
 80001ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b0:	4313      	orrs	r3, r2
 80001b2:	b25b      	sxtb	r3, r3
 80001b4:	b2db      	uxtb	r3, r3
	uint8_t data_arr[4] = 
 80001b6:	727b      	strb	r3, [r7, #9]
		(data << 4)   | (_bl_status << LCD_BL) | (1 << LCD_EN) | (0 << LCD_RW) | (mode << LCD_RS),
 80001b8:	79bb      	ldrb	r3, [r7, #6]
 80001ba:	011b      	lsls	r3, r3, #4
 80001bc:	b25a      	sxtb	r2, r3
 80001be:	4b19      	ldr	r3, [pc, #100]	; (8000224 <LCD1602_SendByte+0xc8>)
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	00db      	lsls	r3, r3, #3
 80001c4:	b25b      	sxtb	r3, r3
 80001c6:	4313      	orrs	r3, r2
 80001c8:	b25b      	sxtb	r3, r3
 80001ca:	b2da      	uxtb	r2, r3
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	4313      	orrs	r3, r2
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	f043 0304 	orr.w	r3, r3, #4
 80001d6:	b2db      	uxtb	r3, r3
	uint8_t data_arr[4] = 
 80001d8:	72bb      	strb	r3, [r7, #10]
		(data << 4)   | (_bl_status << LCD_BL) | (0 << LCD_EN) | (0 << LCD_RW) | (mode << LCD_RS)
 80001da:	79bb      	ldrb	r3, [r7, #6]
 80001dc:	011b      	lsls	r3, r3, #4
 80001de:	b25a      	sxtb	r2, r3
 80001e0:	4b10      	ldr	r3, [pc, #64]	; (8000224 <LCD1602_SendByte+0xc8>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	b25b      	sxtb	r3, r3
 80001e8:	4313      	orrs	r3, r2
 80001ea:	b25a      	sxtb	r2, r3
 80001ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f0:	4313      	orrs	r3, r2
 80001f2:	b25b      	sxtb	r3, r3
 80001f4:	b2db      	uxtb	r3, r3
	uint8_t data_arr[4] = 
 80001f6:	72fb      	strb	r3, [r7, #11]
	};

	status = HAL_I2C_Master_Transmit(_i2c_port, PCF8574_ADDRESS, data_arr, 4, 1000);
 80001f8:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <LCD1602_SendByte+0xcc>)
 80001fa:	6818      	ldr	r0, [r3, #0]
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2304      	movs	r3, #4
 8000208:	214e      	movs	r1, #78	; 0x4e
 800020a:	f002 fbb9 	bl	8002980 <HAL_I2C_Master_Transmit>
 800020e:	4603      	mov	r3, r0
 8000210:	73fb      	strb	r3, [r7, #15]

	/* Wait to send */
	HAL_Delay(1);
 8000212:	2001      	movs	r0, #1
 8000214:	f001 fce8 	bl	8001be8 <HAL_Delay>
	
	return status;
 8000218:	7bfb      	ldrb	r3, [r7, #15]
}
 800021a:	4618      	mov	r0, r3
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000078 	.word	0x20000078
 8000228:	2000007c 	.word	0x2000007c

0800022c <LCD1602_Init>:

/********************************************************************************/

void LCD1602_Init(I2C_HandleTypeDef *hi2c)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
	/* Set I2C port */
	_i2c_port = hi2c;
 8000234:	4a10      	ldr	r2, [pc, #64]	; (8000278 <LCD1602_Init+0x4c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
	
	/* Wait power on */
	HAL_Delay(20);
 800023a:	2014      	movs	r0, #20
 800023c:	f001 fcd4 	bl	8001be8 <HAL_Delay>
	
	/* Initialize LCD 4 bits mode */
	LCD1602_SendByte(COMMAND, 0x33);
 8000240:	2133      	movs	r1, #51	; 0x33
 8000242:	2000      	movs	r0, #0
 8000244:	f7ff ff8a 	bl	800015c <LCD1602_SendByte>
	LCD1602_SendByte(COMMAND, 0x32);
 8000248:	2132      	movs	r1, #50	; 0x32
 800024a:	2000      	movs	r0, #0
 800024c:	f7ff ff86 	bl	800015c <LCD1602_SendByte>
	LCD1602_SendByte(COMMAND, 0x28);
 8000250:	2128      	movs	r1, #40	; 0x28
 8000252:	2000      	movs	r0, #0
 8000254:	f7ff ff82 	bl	800015c <LCD1602_SendByte>
	/* Set mode */
	LCD1602_SendByte(COMMAND, AUTO_INCREASE_CURSOR);
 8000258:	2106      	movs	r1, #6
 800025a:	2000      	movs	r0, #0
 800025c:	f7ff ff7e 	bl	800015c <LCD1602_SendByte>
	LCD1602_SendByte(COMMAND, DISPLAY_ON_CURSOR_OFF);
 8000260:	210c      	movs	r1, #12
 8000262:	2000      	movs	r0, #0
 8000264:	f7ff ff7a 	bl	800015c <LCD1602_SendByte>
	LCD1602_SendByte(COMMAND, CLEAR_DISPLAY);
 8000268:	2101      	movs	r1, #1
 800026a:	2000      	movs	r0, #0
 800026c:	f7ff ff76 	bl	800015c <LCD1602_SendByte>
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	2000007c 	.word	0x2000007c

0800027c <LCD1602_SetFunction>:

void LCD1602_SetFunction(LCD1602_Command_t cmd)
{	
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
	if (cmd == BACKLIGHT_ON)
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	2bfe      	cmp	r3, #254	; 0xfe
 800028a:	d107      	bne.n	800029c <LCD1602_SetFunction+0x20>
	{
		_bl_status = 1;
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <LCD1602_SetFunction+0x48>)
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
		LCD1602_SendByte(COMMAND, 0x06);	/* Dummy byte */
 8000292:	2106      	movs	r1, #6
 8000294:	2000      	movs	r0, #0
 8000296:	f7ff ff61 	bl	800015c <LCD1602_SendByte>
	}
	else
	{
		LCD1602_SendByte(COMMAND, cmd);
	}
}
 800029a:	e00f      	b.n	80002bc <LCD1602_SetFunction+0x40>
	else if (cmd == BACKLIGHT_OFF)
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	2bff      	cmp	r3, #255	; 0xff
 80002a0:	d107      	bne.n	80002b2 <LCD1602_SetFunction+0x36>
		_bl_status = 0;
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <LCD1602_SetFunction+0x48>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]
		LCD1602_SendByte(COMMAND, 0x06);	/* Dummy byte */
 80002a8:	2106      	movs	r1, #6
 80002aa:	2000      	movs	r0, #0
 80002ac:	f7ff ff56 	bl	800015c <LCD1602_SendByte>
}
 80002b0:	e004      	b.n	80002bc <LCD1602_SetFunction+0x40>
		LCD1602_SendByte(COMMAND, cmd);
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4619      	mov	r1, r3
 80002b6:	2000      	movs	r0, #0
 80002b8:	f7ff ff50 	bl	800015c <LCD1602_SendByte>
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000078 	.word	0x20000078

080002c8 <LCD1602_SetCursor>:

void LCD1602_SetCursor(uint8_t col, uint8_t row)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	460a      	mov	r2, r1
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	4613      	mov	r3, r2
 80002d6:	71bb      	strb	r3, [r7, #6]
//	uint8_t cmd = ( (row == 0) ? 0x80 : 0xC0 ) | col;
//	LCD1602_SendByte(COMMAND, cmd);
	{
	uint8_t cmd = 0x80;
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	73fb      	strb	r3, [r7, #15]
	
	switch (row)
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d816      	bhi.n	8000310 <LCD1602_SetCursor+0x48>
 80002e2:	a201      	add	r2, pc, #4	; (adr r2, 80002e8 <LCD1602_SetCursor+0x20>)
 80002e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e8:	080002f9 	.word	0x080002f9
 80002ec:	080002ff 	.word	0x080002ff
 80002f0:	08000305 	.word	0x08000305
 80002f4:	0800030b 	.word	0x0800030b
	{
		case 0:
			cmd = 0x80;
 80002f8:	2380      	movs	r3, #128	; 0x80
 80002fa:	73fb      	strb	r3, [r7, #15]
			break;
 80002fc:	e008      	b.n	8000310 <LCD1602_SetCursor+0x48>
		case 1:
			cmd = 0xC0;
 80002fe:	23c0      	movs	r3, #192	; 0xc0
 8000300:	73fb      	strb	r3, [r7, #15]
			break;
 8000302:	e005      	b.n	8000310 <LCD1602_SetCursor+0x48>
		case 2:
			cmd = 0x94;
 8000304:	2394      	movs	r3, #148	; 0x94
 8000306:	73fb      	strb	r3, [r7, #15]
			break;
 8000308:	e002      	b.n	8000310 <LCD1602_SetCursor+0x48>
		case 3:
			cmd = 0xD4;
 800030a:	23d4      	movs	r3, #212	; 0xd4
 800030c:	73fb      	strb	r3, [r7, #15]
			break;
 800030e:	bf00      	nop
	}
	
	LCD1602_SendByte(0, cmd | col);
 8000310:	7bfa      	ldrb	r2, [r7, #15]
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	4313      	orrs	r3, r2
 8000316:	b2db      	uxtb	r3, r3
 8000318:	4619      	mov	r1, r3
 800031a:	2000      	movs	r0, #0
 800031c:	f7ff ff1e 	bl	800015c <LCD1602_SendByte>
}

}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <LCD1602_SendString>:
{
	return LCD1602_SendByte(DATA, ch);
}

HAL_StatusTypeDef LCD1602_SendString(char *str)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	while (*str != '\0')
 8000330:	e00c      	b.n	800034c <LCD1602_SendString+0x24>
	{
		if ( LCD1602_SendByte(DATA, *str++) != HAL_OK )
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	1c5a      	adds	r2, r3, #1
 8000336:	607a      	str	r2, [r7, #4]
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	4619      	mov	r1, r3
 800033c:	2001      	movs	r0, #1
 800033e:	f7ff ff0d 	bl	800015c <LCD1602_SendByte>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <LCD1602_SendString+0x24>
		{
			return HAL_ERROR;
 8000348:	2301      	movs	r3, #1
 800034a:	e004      	b.n	8000356 <LCD1602_SendString+0x2e>
	while (*str != '\0')
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d1ee      	bne.n	8000332 <LCD1602_SendString+0xa>
		}
	}
	
	return HAL_OK;
 8000354:	2300      	movs	r3, #0
}
 8000356:	4618      	mov	r0, r3
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000364:	f001 fbde 	bl	8001b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000368:	f000 f86c 	bl	8000444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036c:	f000 fa7c 	bl	8000868 <MX_GPIO_Init>
  MX_DMA_Init();
 8000370:	f000 fa5c 	bl	800082c <MX_DMA_Init>
  MX_I2C1_Init();
 8000374:	f000 f8a2 	bl	80004bc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000378:	f000 f8ce 	bl	8000518 <MX_I2C2_Init>
  MX_SPI1_Init();
 800037c:	f000 f8fa 	bl	8000574 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000380:	f000 f92e 	bl	80005e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000384:	f000 f9da 	bl	800073c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000388:	f000 fa26 	bl	80007d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

MFRC522_Init();
 800038c:	f001 f8e3 	bl	8001556 <MFRC522_Init>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000390:	2100      	movs	r1, #0
 8000392:	4823      	ldr	r0, [pc, #140]	; (8000420 <main+0xc0>)
 8000394:	f003 fe30 	bl	8003ff8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000398:	2104      	movs	r1, #4
 800039a:	4821      	ldr	r0, [pc, #132]	; (8000420 <main+0xc0>)
 800039c:	f003 fe2c 	bl	8003ff8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80003a0:	4820      	ldr	r0, [pc, #128]	; (8000424 <main+0xc4>)
 80003a2:	f003 fd7f 	bl	8003ea4 <HAL_TIM_Base_Start_IT>
	LCD1602_Init(&hi2c1);
 80003a6:	4820      	ldr	r0, [pc, #128]	; (8000428 <main+0xc8>)
 80003a8:	f7ff ff40 	bl	800022c <LCD1602_Init>
	LCD1602_SetFunction(BACKLIGHT_ON);
 80003ac:	20fe      	movs	r0, #254	; 0xfe
 80003ae:	f7ff ff65 	bl	800027c <LCD1602_SetFunction>
	
	
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_data, RX_SIZE);
 80003b2:	2218      	movs	r2, #24
 80003b4:	491d      	ldr	r1, [pc, #116]	; (800042c <main+0xcc>)
 80003b6:	481e      	ldr	r0, [pc, #120]	; (8000430 <main+0xd0>)
 80003b8:	f004 fd8d 	bl	8004ed6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80003bc:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <main+0xd4>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <main+0xd4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f022 0204 	bic.w	r2, r2, #4
 80003ca:	601a      	str	r2, [r3, #0]
	
	HAL_UART_Receive_DMA(&huart2,receive_data,24);
 80003cc:	2218      	movs	r2, #24
 80003ce:	4917      	ldr	r1, [pc, #92]	; (800042c <main+0xcc>)
 80003d0:	4817      	ldr	r0, [pc, #92]	; (8000430 <main+0xd0>)
 80003d2:	f004 fd5b 	bl	8004e8c <HAL_UART_Receive_DMA>
	
	LCD1602_SetCursor(0, 0);
 80003d6:	2100      	movs	r1, #0
 80003d8:	2000      	movs	r0, #0
 80003da:	f7ff ff75 	bl	80002c8 <LCD1602_SetCursor>
	LCD1602_SendString(" CHECK CARD ID");
 80003de:	4816      	ldr	r0, [pc, #88]	; (8000438 <main+0xd8>)
 80003e0:	f7ff ffa2 	bl	8000328 <LCD1602_SendString>
	
	HAL_Delay(500);
 80003e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003e8:	f001 fbfe 	bl	8001be8 <HAL_Delay>
	uwTick = 0;
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <main+0xdc>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//		Get_Time();
//		Display_Time();
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == 0){
 80003f2:	2101      	movs	r1, #1
 80003f4:	4812      	ldr	r0, [pc, #72]	; (8000440 <main+0xe0>)
 80003f6:	f002 f94f 	bl	8002698 <HAL_GPIO_ReadPin>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d103      	bne.n	8000408 <main+0xa8>
			Set_Barrier();
 8000400:	f000 fb76 	bl	8000af0 <Set_Barrier>
			Check_CardID_IN();
 8000404:	f000 fa80 	bl	8000908 <Check_CardID_IN>
			
		}
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == 1){
 8000408:	2101      	movs	r1, #1
 800040a:	480d      	ldr	r0, [pc, #52]	; (8000440 <main+0xe0>)
 800040c:	f002 f944 	bl	8002698 <HAL_GPIO_ReadPin>
 8000410:	4603      	mov	r3, r0
 8000412:	2b01      	cmp	r3, #1
 8000414:	d1ed      	bne.n	80003f2 <main+0x92>
			Set_Barrier();
 8000416:	f000 fb6b 	bl	8000af0 <Set_Barrier>
			Check_CardID_OUT();
 800041a:	f000 fae1 	bl	80009e0 <Check_CardID_OUT>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == 0){
 800041e:	e7e8      	b.n	80003f2 <main+0x92>
 8000420:	200001d4 	.word	0x200001d4
 8000424:	2000021c 	.word	0x2000021c
 8000428:	200000d4 	.word	0x200000d4
 800042c:	200000b8 	.word	0x200000b8
 8000430:	20000264 	.word	0x20000264
 8000434:	200002ac 	.word	0x200002ac
 8000438:	08006788 	.word	0x08006788
 800043c:	200002f4 	.word	0x200002f4
 8000440:	40010800 	.word	0x40010800

08000444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b090      	sub	sp, #64	; 0x40
 8000448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044a:	f107 0318 	add.w	r3, r7, #24
 800044e:	2228      	movs	r2, #40	; 0x28
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f005 fce6 	bl	8005e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000466:	2302      	movs	r3, #2
 8000468:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046a:	2301      	movs	r3, #1
 800046c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800046e:	2310      	movs	r3, #16
 8000470:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000472:	2300      	movs	r3, #0
 8000474:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000476:	f107 0318 	add.w	r3, r7, #24
 800047a:	4618      	mov	r0, r3
 800047c:	f002 fdd8 	bl	8003030 <HAL_RCC_OscConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000486:	f000 fe0b 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048a:	230f      	movs	r3, #15
 800048c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800048e:	2300      	movs	r3, #0
 8000490:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f003 f846 	bl	8003534 <HAL_RCC_ClockConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004ae:	f000 fdf7 	bl	80010a0 <Error_Handler>
  }
}
 80004b2:	bf00      	nop
 80004b4:	3740      	adds	r7, #64	; 0x40
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <MX_I2C1_Init+0x50>)
 80004c2:	4a13      	ldr	r2, [pc, #76]	; (8000510 <MX_I2C1_Init+0x54>)
 80004c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_I2C1_Init+0x50>)
 80004c8:	4a12      	ldr	r2, [pc, #72]	; (8000514 <MX_I2C1_Init+0x58>)
 80004ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_I2C1_Init+0x50>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_I2C1_Init+0x50>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_I2C1_Init+0x50>)
 80004da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <MX_I2C1_Init+0x50>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_I2C1_Init+0x50>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <MX_I2C1_Init+0x50>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_I2C1_Init+0x50>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <MX_I2C1_Init+0x50>)
 80004fa:	f002 f8fd 	bl	80026f8 <HAL_I2C_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000504:	f000 fdcc 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200000d4 	.word	0x200000d4
 8000510:	40005400 	.word	0x40005400
 8000514:	000186a0 	.word	0x000186a0

08000518 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_I2C2_Init+0x50>)
 800051e:	4a13      	ldr	r2, [pc, #76]	; (800056c <MX_I2C2_Init+0x54>)
 8000520:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_I2C2_Init+0x50>)
 8000524:	4a12      	ldr	r2, [pc, #72]	; (8000570 <MX_I2C2_Init+0x58>)
 8000526:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_I2C2_Init+0x50>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_I2C2_Init+0x50>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_I2C2_Init+0x50>)
 8000536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800053a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <MX_I2C2_Init+0x50>)
 800053e:	2200      	movs	r2, #0
 8000540:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_I2C2_Init+0x50>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <MX_I2C2_Init+0x50>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_I2C2_Init+0x50>)
 8000550:	2200      	movs	r2, #0
 8000552:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_I2C2_Init+0x50>)
 8000556:	f002 f8cf 	bl	80026f8 <HAL_I2C_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000560:	f000 fd9e 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000128 	.word	0x20000128
 800056c:	40005800 	.word	0x40005800
 8000570:	000186a0 	.word	0x000186a0

08000574 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_SPI1_Init+0x64>)
 800057a:	4a18      	ldr	r2, [pc, #96]	; (80005dc <MX_SPI1_Init+0x68>)
 800057c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800057e:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_SPI1_Init+0x64>)
 8000580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000584:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_SPI1_Init+0x64>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <MX_SPI1_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <MX_SPI1_Init+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_SPI1_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <MX_SPI1_Init+0x64>)
 80005a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <MX_SPI1_Init+0x64>)
 80005a8:	2218      	movs	r2, #24
 80005aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <MX_SPI1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <MX_SPI1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <MX_SPI1_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <MX_SPI1_Init+0x64>)
 80005c0:	220a      	movs	r2, #10
 80005c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_SPI1_Init+0x64>)
 80005c6:	f003 f943 	bl	8003850 <HAL_SPI_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005d0:	f000 fd66 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000017c 	.word	0x2000017c
 80005dc:	40013000 	.word	0x40013000

080005e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	; 0x58
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]
 800060e:	615a      	str	r2, [r3, #20]
 8000610:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2220      	movs	r2, #32
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f005 fc03 	bl	8005e24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800061e:	4b45      	ldr	r3, [pc, #276]	; (8000734 <MX_TIM1_Init+0x154>)
 8000620:	4a45      	ldr	r2, [pc, #276]	; (8000738 <MX_TIM1_Init+0x158>)
 8000622:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720;
 8000624:	4b43      	ldr	r3, [pc, #268]	; (8000734 <MX_TIM1_Init+0x154>)
 8000626:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800062a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062c:	4b41      	ldr	r3, [pc, #260]	; (8000734 <MX_TIM1_Init+0x154>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000632:	4b40      	ldr	r3, [pc, #256]	; (8000734 <MX_TIM1_Init+0x154>)
 8000634:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000638:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063a:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <MX_TIM1_Init+0x154>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000640:	4b3c      	ldr	r3, [pc, #240]	; (8000734 <MX_TIM1_Init+0x154>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000646:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <MX_TIM1_Init+0x154>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800064c:	4839      	ldr	r0, [pc, #228]	; (8000734 <MX_TIM1_Init+0x154>)
 800064e:	f003 fbd9 	bl	8003e04 <HAL_TIM_Base_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000658:	f000 fd22 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000662:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000666:	4619      	mov	r1, r3
 8000668:	4832      	ldr	r0, [pc, #200]	; (8000734 <MX_TIM1_Init+0x154>)
 800066a:	f003 ff31 	bl	80044d0 <HAL_TIM_ConfigClockSource>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000674:	f000 fd14 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000678:	482e      	ldr	r0, [pc, #184]	; (8000734 <MX_TIM1_Init+0x154>)
 800067a:	f003 fc65 	bl	8003f48 <HAL_TIM_PWM_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000684:	f000 fd0c 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000688:	2300      	movs	r3, #0
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000690:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000694:	4619      	mov	r1, r3
 8000696:	4827      	ldr	r0, [pc, #156]	; (8000734 <MX_TIM1_Init+0x154>)
 8000698:	f004 fab2 	bl	8004c00 <HAL_TIMEx_MasterConfigSynchronization>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80006a2:	f000 fcfd 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a6:	2360      	movs	r3, #96	; 0x60
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006b2:	2300      	movs	r3, #0
 80006b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ba:	2300      	movs	r3, #0
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006be:	2300      	movs	r3, #0
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c6:	2200      	movs	r2, #0
 80006c8:	4619      	mov	r1, r3
 80006ca:	481a      	ldr	r0, [pc, #104]	; (8000734 <MX_TIM1_Init+0x154>)
 80006cc:	f003 fe3e 	bl	800434c <HAL_TIM_PWM_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80006d6:	f000 fce3 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006de:	2204      	movs	r2, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4814      	ldr	r0, [pc, #80]	; (8000734 <MX_TIM1_Init+0x154>)
 80006e4:	f003 fe32 	bl	800434c <HAL_TIM_PWM_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80006ee:	f000 fcd7 	bl	80010a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	4619      	mov	r1, r3
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <MX_TIM1_Init+0x154>)
 8000716:	f004 fad1 	bl	8004cbc <HAL_TIMEx_ConfigBreakDeadTime>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000720:	f000 fcbe 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000724:	4803      	ldr	r0, [pc, #12]	; (8000734 <MX_TIM1_Init+0x154>)
 8000726:	f001 f89b 	bl	8001860 <HAL_TIM_MspPostInit>

}
 800072a:	bf00      	nop
 800072c:	3758      	adds	r7, #88	; 0x58
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200001d4 	.word	0x200001d4
 8000738:	40012c00 	.word	0x40012c00

0800073c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	463b      	mov	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_TIM2_Init+0x98>)
 800075a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800075e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_TIM2_Init+0x98>)
 8000762:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000766:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_TIM2_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_TIM2_Init+0x98>)
 8000770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000774:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_TIM2_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_TIM2_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000782:	4814      	ldr	r0, [pc, #80]	; (80007d4 <MX_TIM2_Init+0x98>)
 8000784:	f003 fb3e 	bl	8003e04 <HAL_TIM_Base_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800078e:	f000 fc87 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000796:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	4619      	mov	r1, r3
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_TIM2_Init+0x98>)
 80007a0:	f003 fe96 	bl	80044d0 <HAL_TIM_ConfigClockSource>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007aa:	f000 fc79 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_TIM2_Init+0x98>)
 80007bc:	f004 fa20 	bl	8004c00 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007c6:	f000 fc6b 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000021c 	.word	0x2000021c

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_USART2_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 8000810:	f004 fab7 	bl	8004d82 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 fc41 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000264 	.word	0x20000264
 8000828:	40004400 	.word	0x40004400

0800082c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_DMA_Init+0x38>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <MX_DMA_Init+0x38>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_DMA_Init+0x38>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2010      	movs	r0, #16
 8000850:	f001 fac5 	bl	8001dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000854:	2010      	movs	r0, #16
 8000856:	f001 fade 	bl	8001e16 <HAL_NVIC_EnableIRQ>

}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_GPIO_Init+0x98>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a1f      	ldr	r2, [pc, #124]	; (8000900 <MX_GPIO_Init+0x98>)
 8000882:	f043 0320 	orr.w	r3, r3, #32
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_GPIO_Init+0x98>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0320 	and.w	r3, r3, #32
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_GPIO_Init+0x98>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <MX_GPIO_Init+0x98>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_GPIO_Init+0x98>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_GPIO_Init+0x98>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a13      	ldr	r2, [pc, #76]	; (8000900 <MX_GPIO_Init+0x98>)
 80008b2:	f043 0308 	orr.w	r3, r3, #8
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_GPIO_Init+0x98>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008c4:	2303      	movs	r3, #3
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	4619      	mov	r1, r3
 80008d6:	480b      	ldr	r0, [pc, #44]	; (8000904 <MX_GPIO_Init+0x9c>)
 80008d8:	f001 fd5a 	bl	8002390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80008dc:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 80008e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	4619      	mov	r1, r3
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_GPIO_Init+0x9c>)
 80008f2:	f001 fd4d 	bl	8002390 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3720      	adds	r7, #32
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000
 8000904:	40010800 	.word	0x40010800

08000908 <Check_CardID_IN>:

/* USER CODE BEGIN 4 */

void Check_CardID_IN(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
	LCD1602_SetCursor(0, 1);
 800090e:	2101      	movs	r1, #1
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fcd9 	bl	80002c8 <LCD1602_SetCursor>
	LCD1602_SendString("CAR IN");
 8000916:	482b      	ldr	r0, [pc, #172]	; (80009c4 <Check_CardID_IN+0xbc>)
 8000918:	f7ff fd06 	bl	8000328 <LCD1602_SendString>
	if (MFRC522_Check(CardID) == MI_OK)
 800091c:	482a      	ldr	r0, [pc, #168]	; (80009c8 <Check_CardID_IN+0xc0>)
 800091e:	f000 fc4f 	bl	80011c0 <MFRC522_Check>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d148      	bne.n	80009ba <Check_CardID_IN+0xb2>
		{
			strcpy(Send_UART, "IN:");
 8000928:	4b28      	ldr	r3, [pc, #160]	; (80009cc <Check_CardID_IN+0xc4>)
 800092a:	4a29      	ldr	r2, [pc, #164]	; (80009d0 <Check_CardID_IN+0xc8>)
 800092c:	601a      	str	r2, [r3, #0]
			for(uint8_t i = 0; i<4; i++){
 800092e:	2300      	movs	r3, #0
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	e00f      	b.n	8000954 <Check_CardID_IN+0x4c>
				sprintf(Send_UART + strlen(Send_UART),"%02x", CardID[i]);
 8000934:	4825      	ldr	r0, [pc, #148]	; (80009cc <Check_CardID_IN+0xc4>)
 8000936:	f7ff fc09 	bl	800014c <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	4a23      	ldr	r2, [pc, #140]	; (80009cc <Check_CardID_IN+0xc4>)
 800093e:	1898      	adds	r0, r3, r2
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <Check_CardID_IN+0xc0>)
 8000944:	5cd3      	ldrb	r3, [r2, r3]
 8000946:	461a      	mov	r2, r3
 8000948:	4922      	ldr	r1, [pc, #136]	; (80009d4 <Check_CardID_IN+0xcc>)
 800094a:	f005 fa4b 	bl	8005de4 <siprintf>
			for(uint8_t i = 0; i<4; i++){
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	3301      	adds	r3, #1
 8000952:	71fb      	strb	r3, [r7, #7]
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	2b03      	cmp	r3, #3
 8000958:	d9ec      	bls.n	8000934 <Check_CardID_IN+0x2c>
			}
			for(int i = 0; i < 14; i++){
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	e019      	b.n	8000994 <Check_CardID_IN+0x8c>
				if(Send_UART[i]>96 && Send_UART[i]<123){
 8000960:	4a1a      	ldr	r2, [pc, #104]	; (80009cc <Check_CardID_IN+0xc4>)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b60      	cmp	r3, #96	; 0x60
 800096a:	d910      	bls.n	800098e <Check_CardID_IN+0x86>
 800096c:	4a17      	ldr	r2, [pc, #92]	; (80009cc <Check_CardID_IN+0xc4>)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	4413      	add	r3, r2
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b7a      	cmp	r3, #122	; 0x7a
 8000976:	d80a      	bhi.n	800098e <Check_CardID_IN+0x86>
					Send_UART[i]-=32;
 8000978:	4a14      	ldr	r2, [pc, #80]	; (80009cc <Check_CardID_IN+0xc4>)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	3b20      	subs	r3, #32
 8000982:	b2d9      	uxtb	r1, r3
 8000984:	4a11      	ldr	r2, [pc, #68]	; (80009cc <Check_CardID_IN+0xc4>)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	4413      	add	r3, r2
 800098a:	460a      	mov	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 14; i++){
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	2b0d      	cmp	r3, #13
 8000998:	dde2      	ble.n	8000960 <Check_CardID_IN+0x58>
				}
			}
			HAL_UART_Transmit_IT(&huart2,Send_UART,12);
 800099a:	220c      	movs	r2, #12
 800099c:	490b      	ldr	r1, [pc, #44]	; (80009cc <Check_CardID_IN+0xc4>)
 800099e:	480e      	ldr	r0, [pc, #56]	; (80009d8 <Check_CardID_IN+0xd0>)
 80009a0:	f004 fa3f 	bl	8004e22 <HAL_UART_Transmit_IT>
			receive_data[0] = 0x00;
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <Check_CardID_IN+0xd4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
			Check_Car_In();
 80009aa:	f000 fa41 	bl	8000e30 <Check_Car_In>
			RESET_CardID();
 80009ae:	f000 f887 	bl	8000ac0 <RESET_CardID>
			HAL_Delay(2000);
 80009b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009b6:	f001 f917 	bl	8001be8 <HAL_Delay>
		}			
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	08006798 	.word	0x08006798
 80009c8:	20000080 	.word	0x20000080
 80009cc:	20000088 	.word	0x20000088
 80009d0:	003a4e49 	.word	0x003a4e49
 80009d4:	080067a0 	.word	0x080067a0
 80009d8:	20000264 	.word	0x20000264
 80009dc:	200000b8 	.word	0x200000b8

080009e0 <Check_CardID_OUT>:

void Check_CardID_OUT(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
	LCD1602_SetCursor(0, 1);
 80009e6:	2101      	movs	r1, #1
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff fc6d 	bl	80002c8 <LCD1602_SetCursor>
	LCD1602_SendString("     CAR OUT    ");
 80009ee:	482d      	ldr	r0, [pc, #180]	; (8000aa4 <Check_CardID_OUT+0xc4>)
 80009f0:	f7ff fc9a 	bl	8000328 <LCD1602_SendString>
	if (MFRC522_Check(CardID) == MI_OK)
 80009f4:	482c      	ldr	r0, [pc, #176]	; (8000aa8 <Check_CardID_OUT+0xc8>)
 80009f6:	f000 fbe3 	bl	80011c0 <MFRC522_Check>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d14c      	bne.n	8000a9a <Check_CardID_OUT+0xba>
		{
			strcpy(Send_UART, "OUT:");
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <Check_CardID_OUT+0xcc>)
 8000a02:	4a2b      	ldr	r2, [pc, #172]	; (8000ab0 <Check_CardID_OUT+0xd0>)
 8000a04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a08:	6018      	str	r0, [r3, #0]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	7019      	strb	r1, [r3, #0]
			for(uint8_t i = 0; i<4; i++){
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	e00f      	b.n	8000a34 <Check_CardID_OUT+0x54>
				sprintf(Send_UART + strlen(Send_UART),"%02x", CardID[i]);
 8000a14:	4825      	ldr	r0, [pc, #148]	; (8000aac <Check_CardID_OUT+0xcc>)
 8000a16:	f7ff fb99 	bl	800014c <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a23      	ldr	r2, [pc, #140]	; (8000aac <Check_CardID_OUT+0xcc>)
 8000a1e:	1898      	adds	r0, r3, r2
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <Check_CardID_OUT+0xc8>)
 8000a24:	5cd3      	ldrb	r3, [r2, r3]
 8000a26:	461a      	mov	r2, r3
 8000a28:	4922      	ldr	r1, [pc, #136]	; (8000ab4 <Check_CardID_OUT+0xd4>)
 8000a2a:	f005 f9db 	bl	8005de4 <siprintf>
			for(uint8_t i = 0; i<4; i++){
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	3301      	adds	r3, #1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d9ec      	bls.n	8000a14 <Check_CardID_OUT+0x34>
			}
			for(int i = 0; i < 14; i++){
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	e019      	b.n	8000a74 <Check_CardID_OUT+0x94>
				if(Send_UART[i]>96 && Send_UART[i]<123){
 8000a40:	4a1a      	ldr	r2, [pc, #104]	; (8000aac <Check_CardID_OUT+0xcc>)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b60      	cmp	r3, #96	; 0x60
 8000a4a:	d910      	bls.n	8000a6e <Check_CardID_OUT+0x8e>
 8000a4c:	4a17      	ldr	r2, [pc, #92]	; (8000aac <Check_CardID_OUT+0xcc>)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b7a      	cmp	r3, #122	; 0x7a
 8000a56:	d80a      	bhi.n	8000a6e <Check_CardID_OUT+0x8e>
					Send_UART[i]-=32;
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <Check_CardID_OUT+0xcc>)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	3b20      	subs	r3, #32
 8000a62:	b2d9      	uxtb	r1, r3
 8000a64:	4a11      	ldr	r2, [pc, #68]	; (8000aac <Check_CardID_OUT+0xcc>)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	4413      	add	r3, r2
 8000a6a:	460a      	mov	r2, r1
 8000a6c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 14; i++){
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2b0d      	cmp	r3, #13
 8000a78:	dde2      	ble.n	8000a40 <Check_CardID_OUT+0x60>
				}
			}
			HAL_UART_Transmit_IT(&huart2,Send_UART,11);
 8000a7a:	220b      	movs	r2, #11
 8000a7c:	490b      	ldr	r1, [pc, #44]	; (8000aac <Check_CardID_OUT+0xcc>)
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <Check_CardID_OUT+0xd8>)
 8000a80:	f004 f9cf 	bl	8004e22 <HAL_UART_Transmit_IT>
			receive_data[0] = 0x00;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <Check_CardID_OUT+0xdc>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
			Cal_money();
 8000a8a:	f000 f857 	bl	8000b3c <Cal_money>
			RESET_CardID();
 8000a8e:	f000 f817 	bl	8000ac0 <RESET_CardID>
			HAL_Delay(2000);
 8000a92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a96:	f001 f8a7 	bl	8001be8 <HAL_Delay>
		}
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	080067a8 	.word	0x080067a8
 8000aa8:	20000080 	.word	0x20000080
 8000aac:	20000088 	.word	0x20000088
 8000ab0:	080067bc 	.word	0x080067bc
 8000ab4:	080067a0 	.word	0x080067a0
 8000ab8:	20000264 	.word	0x20000264
 8000abc:	200000b8 	.word	0x200000b8

08000ac0 <RESET_CardID>:
//	LCD1602_SetCursor(0,1);
//	LCD1602_SendString(buffer2+1);
}

void RESET_CardID(void)   // RESET cac phan tu trong mang CardID
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 5; i++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	71fb      	strb	r3, [r7, #7]
 8000aca:	e006      	b.n	8000ada <RESET_CardID+0x1a>
	{
		CardID[i] = 0x00;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	4a07      	ldr	r2, [pc, #28]	; (8000aec <RESET_CardID+0x2c>)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 5; i++)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d9f5      	bls.n	8000acc <RESET_CardID+0xc>
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	20000080 	.word	0x20000080

08000af0 <Set_Barrier>:

void Set_Barrier()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1){
 8000af4:	2101      	movs	r1, #1
 8000af6:	480f      	ldr	r0, [pc, #60]	; (8000b34 <Set_Barrier+0x44>)
 8000af8:	f001 fdce 	bl	8002698 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d107      	bne.n	8000b12 <Set_Barrier+0x22>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <Set_Barrier+0x48>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2264      	movs	r2, #100	; 0x64
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,200);
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <Set_Barrier+0x48>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	22c8      	movs	r2, #200	; 0xc8
 8000b10:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0){
 8000b12:	2101      	movs	r1, #1
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <Set_Barrier+0x44>)
 8000b16:	f001 fdbf 	bl	8002698 <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d107      	bne.n	8000b30 <Set_Barrier+0x40>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,200);
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <Set_Barrier+0x48>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	22c8      	movs	r2, #200	; 0xc8
 8000b26:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <Set_Barrier+0x48>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2264      	movs	r2, #100	; 0x64
 8000b2e:	639a      	str	r2, [r3, #56]	; 0x38
	}
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40010800 	.word	0x40010800
 8000b38:	200001d4 	.word	0x200001d4

08000b3c <Cal_money>:

void Cal_money(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af02      	add	r7, sp, #8
	LCD1602_SetFunction(CLEAR_DISPLAY);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f7ff fb9a 	bl	800027c <LCD1602_SetFunction>
	LCD1602_SetCursor(0,0);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff fbbc 	bl	80002c8 <LCD1602_SetCursor>
	LCD1602_SendString(" WAITTING....");
 8000b50:	48a4      	ldr	r0, [pc, #656]	; (8000de4 <Cal_money+0x2a8>)
 8000b52:	f7ff fbe9 	bl	8000328 <LCD1602_SendString>
	uint16_t delayTime = 10;
 8000b56:	230a      	movs	r3, #10
 8000b58:	81fb      	strh	r3, [r7, #14]
	while(receive_data[0] == 0)
 8000b5a:	e00a      	b.n	8000b72 <Cal_money+0x36>
	{
		HAL_Delay(10);
 8000b5c:	200a      	movs	r0, #10
 8000b5e:	f001 f843 	bl	8001be8 <HAL_Delay>
		delayTime+=10;
 8000b62:	89fb      	ldrh	r3, [r7, #14]
 8000b64:	330a      	adds	r3, #10
 8000b66:	81fb      	strh	r3, [r7, #14]
		if(delayTime>7000){
 8000b68:	89fb      	ldrh	r3, [r7, #14]
 8000b6a:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d804      	bhi.n	8000b7c <Cal_money+0x40>
	while(receive_data[0] == 0)
 8000b72:	4b9d      	ldr	r3, [pc, #628]	; (8000de8 <Cal_money+0x2ac>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0f0      	beq.n	8000b5c <Cal_money+0x20>
 8000b7a:	e000      	b.n	8000b7e <Cal_money+0x42>
			break;
 8000b7c:	bf00      	nop
		}
	}
	if(receive_data[0] =='M'){
 8000b7e:	4b9a      	ldr	r3, [pc, #616]	; (8000de8 <Cal_money+0x2ac>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b4d      	cmp	r3, #77	; 0x4d
 8000b84:	f040 809a 	bne.w	8000cbc <Cal_money+0x180>
		uint32_t money = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
		uint8_t i = 10, Time_IN[3] = {0};
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	4b96      	ldr	r3, [pc, #600]	; (8000dec <Cal_money+0x2b0>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	80bb      	strh	r3, [r7, #4]
 8000b96:	2300      	movs	r3, #0
 8000b98:	71bb      	strb	r3, [r7, #6]
		strncpy(buffer4, (char*)receive_data+1, 2 );
 8000b9a:	4b95      	ldr	r3, [pc, #596]	; (8000df0 <Cal_money+0x2b4>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4894      	ldr	r0, [pc, #592]	; (8000df4 <Cal_money+0x2b8>)
 8000ba2:	f005 f947 	bl	8005e34 <strncpy>
		Time_IN[0] = (uint8_t)atoi(buffer4);
 8000ba6:	4893      	ldr	r0, [pc, #588]	; (8000df4 <Cal_money+0x2b8>)
 8000ba8:	f005 f890 	bl	8005ccc <atoi>
 8000bac:	4603      	mov	r3, r0
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	713b      	strb	r3, [r7, #4]
		strncpy(buffer4, (char*)receive_data+4, 2 );
 8000bb2:	4b91      	ldr	r3, [pc, #580]	; (8000df8 <Cal_money+0x2bc>)
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	488e      	ldr	r0, [pc, #568]	; (8000df4 <Cal_money+0x2b8>)
 8000bba:	f005 f93b 	bl	8005e34 <strncpy>
		Time_IN[1] = (uint8_t)atoi(buffer4);
 8000bbe:	488d      	ldr	r0, [pc, #564]	; (8000df4 <Cal_money+0x2b8>)
 8000bc0:	f005 f884 	bl	8005ccc <atoi>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	717b      	strb	r3, [r7, #5]
		strncpy(buffer4, (char*)receive_data+7, 2 );
 8000bca:	4b8c      	ldr	r3, [pc, #560]	; (8000dfc <Cal_money+0x2c0>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4888      	ldr	r0, [pc, #544]	; (8000df4 <Cal_money+0x2b8>)
 8000bd2:	f005 f92f 	bl	8005e34 <strncpy>
		Time_IN[2] = (uint8_t)atoi(buffer4);
 8000bd6:	4887      	ldr	r0, [pc, #540]	; (8000df4 <Cal_money+0x2b8>)
 8000bd8:	f005 f878 	bl	8005ccc <atoi>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	71bb      	strb	r3, [r7, #6]
	
		while(receive_data[i]!='E'){
 8000be2:	e00e      	b.n	8000c02 <Cal_money+0xc6>
			money = money*10 + (receive_data[i]-48);
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4619      	mov	r1, r3
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4a7d      	ldr	r2, [pc, #500]	; (8000de8 <Cal_money+0x2ac>)
 8000bf4:	5cd3      	ldrb	r3, [r2, r3]
 8000bf6:	440b      	add	r3, r1
 8000bf8:	3b30      	subs	r3, #48	; 0x30
 8000bfa:	60bb      	str	r3, [r7, #8]
			i++;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	71fb      	strb	r3, [r7, #7]
		while(receive_data[i]!='E'){
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	4a78      	ldr	r2, [pc, #480]	; (8000de8 <Cal_money+0x2ac>)
 8000c06:	5cd3      	ldrb	r3, [r2, r3]
 8000c08:	2b45      	cmp	r3, #69	; 0x45
 8000c0a:	d1eb      	bne.n	8000be4 <Cal_money+0xa8>
	
		}
		memset(buffer1,0x00,16);
 8000c0c:	2210      	movs	r2, #16
 8000c0e:	2100      	movs	r1, #0
 8000c10:	487b      	ldr	r0, [pc, #492]	; (8000e00 <Cal_money+0x2c4>)
 8000c12:	f005 f907 	bl	8005e24 <memset>
		LCD1602_SetFunction(CLEAR_DISPLAY);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff fb30 	bl	800027c <LCD1602_SetFunction>
		sprintf(buffer1 ,"  IN:%02d:%02d:%02d", Time_IN[0], Time_IN[1], Time_IN[2]);
 8000c1c:	793b      	ldrb	r3, [r7, #4]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	797b      	ldrb	r3, [r7, #5]
 8000c22:	4619      	mov	r1, r3
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	4976      	ldr	r1, [pc, #472]	; (8000e04 <Cal_money+0x2c8>)
 8000c2c:	4874      	ldr	r0, [pc, #464]	; (8000e00 <Cal_money+0x2c4>)
 8000c2e:	f005 f8d9 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,0);
 8000c32:	2100      	movs	r1, #0
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff fb47 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);
 8000c3a:	4871      	ldr	r0, [pc, #452]	; (8000e00 <Cal_money+0x2c4>)
 8000c3c:	f7ff fb74 	bl	8000328 <LCD1602_SendString>
		memset(buffer1,0x00,16);
 8000c40:	2210      	movs	r2, #16
 8000c42:	2100      	movs	r1, #0
 8000c44:	486e      	ldr	r0, [pc, #440]	; (8000e00 <Cal_money+0x2c4>)
 8000c46:	f005 f8ed 	bl	8005e24 <memset>
		sprintf(buffer1 ,"TOTAL: %ld", money);
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	496e      	ldr	r1, [pc, #440]	; (8000e08 <Cal_money+0x2cc>)
 8000c4e:	486c      	ldr	r0, [pc, #432]	; (8000e00 <Cal_money+0x2c4>)
 8000c50:	f005 f8c8 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,1);
 8000c54:	2101      	movs	r1, #1
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fb36 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);	
 8000c5c:	4868      	ldr	r0, [pc, #416]	; (8000e00 <Cal_money+0x2c4>)
 8000c5e:	f7ff fb63 	bl	8000328 <LCD1602_SendString>
		while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == 1){
 8000c62:	e002      	b.n	8000c6a <Cal_money+0x12e>
			HAL_Delay(20);
 8000c64:	2014      	movs	r0, #20
 8000c66:	f000 ffbf 	bl	8001be8 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == 1){
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4867      	ldr	r0, [pc, #412]	; (8000e0c <Cal_money+0x2d0>)
 8000c6e:	f001 fd13 	bl	8002698 <HAL_GPIO_ReadPin>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d0f5      	beq.n	8000c64 <Cal_money+0x128>
		}
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8000c78:	4b65      	ldr	r3, [pc, #404]	; (8000e10 <Cal_money+0x2d4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2264      	movs	r2, #100	; 0x64
 8000c7e:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(5000); // thoi gian xe ra ngoai
 8000c80:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c84:	f000 ffb0 	bl	8001be8 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10) == 0||HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11) == 0){
 8000c88:	e002      	b.n	8000c90 <Cal_money+0x154>
			HAL_Delay(100);
 8000c8a:	2064      	movs	r0, #100	; 0x64
 8000c8c:	f000 ffac 	bl	8001be8 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10) == 0||HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11) == 0){
 8000c90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c94:	485d      	ldr	r0, [pc, #372]	; (8000e0c <Cal_money+0x2d0>)
 8000c96:	f001 fcff 	bl	8002698 <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f4      	beq.n	8000c8a <Cal_money+0x14e>
 8000ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca4:	4859      	ldr	r0, [pc, #356]	; (8000e0c <Cal_money+0x2d0>)
 8000ca6:	f001 fcf7 	bl	8002698 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d0ec      	beq.n	8000c8a <Cal_money+0x14e>
		}
		memset(receive_data,0x00,24);
 8000cb0:	2218      	movs	r2, #24
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	484c      	ldr	r0, [pc, #304]	; (8000de8 <Cal_money+0x2ac>)
 8000cb6:	f005 f8b5 	bl	8005e24 <memset>
 8000cba:	e082      	b.n	8000dc2 <Cal_money+0x286>
	} else if (receive_data[0] =='N') {
 8000cbc:	4b4a      	ldr	r3, [pc, #296]	; (8000de8 <Cal_money+0x2ac>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b4e      	cmp	r3, #78	; 0x4e
 8000cc2:	d114      	bne.n	8000cee <Cal_money+0x1b2>
		sprintf(buffer1 ," NOT FOUND CARD");
 8000cc4:	4953      	ldr	r1, [pc, #332]	; (8000e14 <Cal_money+0x2d8>)
 8000cc6:	484e      	ldr	r0, [pc, #312]	; (8000e00 <Cal_money+0x2c4>)
 8000cc8:	f005 f88c 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,0);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff fafa 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);	
 8000cd4:	484a      	ldr	r0, [pc, #296]	; (8000e00 <Cal_money+0x2c4>)
 8000cd6:	f7ff fb27 	bl	8000328 <LCD1602_SendString>
		HAL_Delay(3000);
 8000cda:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cde:	f000 ff83 	bl	8001be8 <HAL_Delay>
		memset(receive_data,0x00,24);
 8000ce2:	2218      	movs	r2, #24
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4840      	ldr	r0, [pc, #256]	; (8000de8 <Cal_money+0x2ac>)
 8000ce8:	f005 f89c 	bl	8005e24 <memset>
 8000cec:	e069      	b.n	8000dc2 <Cal_money+0x286>
	} else if (receive_data[0] =='F') {
 8000cee:	4b3e      	ldr	r3, [pc, #248]	; (8000de8 <Cal_money+0x2ac>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b46      	cmp	r3, #70	; 0x46
 8000cf4:	d114      	bne.n	8000d20 <Cal_money+0x1e4>
		sprintf(buffer1 ,"FORBIDDEN!");
 8000cf6:	4948      	ldr	r1, [pc, #288]	; (8000e18 <Cal_money+0x2dc>)
 8000cf8:	4841      	ldr	r0, [pc, #260]	; (8000e00 <Cal_money+0x2c4>)
 8000cfa:	f005 f873 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,0);
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fae1 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);	
 8000d06:	483e      	ldr	r0, [pc, #248]	; (8000e00 <Cal_money+0x2c4>)
 8000d08:	f7ff fb0e 	bl	8000328 <LCD1602_SendString>
		HAL_Delay(3000);
 8000d0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d10:	f000 ff6a 	bl	8001be8 <HAL_Delay>
		memset(receive_data,0x00,24);
 8000d14:	2218      	movs	r2, #24
 8000d16:	2100      	movs	r1, #0
 8000d18:	4833      	ldr	r0, [pc, #204]	; (8000de8 <Cal_money+0x2ac>)
 8000d1a:	f005 f883 	bl	8005e24 <memset>
 8000d1e:	e050      	b.n	8000dc2 <Cal_money+0x286>
	}  else if (receive_data[0] =='C') {
 8000d20:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <Cal_money+0x2ac>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b43      	cmp	r3, #67	; 0x43
 8000d26:	d114      	bne.n	8000d52 <Cal_money+0x216>
		sprintf(buffer1 ,"CONFLICT");
 8000d28:	493c      	ldr	r1, [pc, #240]	; (8000e1c <Cal_money+0x2e0>)
 8000d2a:	4835      	ldr	r0, [pc, #212]	; (8000e00 <Cal_money+0x2c4>)
 8000d2c:	f005 f85a 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,0);
 8000d30:	2100      	movs	r1, #0
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff fac8 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);	
 8000d38:	4831      	ldr	r0, [pc, #196]	; (8000e00 <Cal_money+0x2c4>)
 8000d3a:	f7ff faf5 	bl	8000328 <LCD1602_SendString>
		HAL_Delay(3000);
 8000d3e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d42:	f000 ff51 	bl	8001be8 <HAL_Delay>
		memset(receive_data,0x00,24);
 8000d46:	2218      	movs	r2, #24
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4827      	ldr	r0, [pc, #156]	; (8000de8 <Cal_money+0x2ac>)
 8000d4c:	f005 f86a 	bl	8005e24 <memset>
 8000d50:	e037      	b.n	8000dc2 <Cal_money+0x286>
	}  else if (receive_data[0] =='U') {
 8000d52:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <Cal_money+0x2ac>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b55      	cmp	r3, #85	; 0x55
 8000d58:	d114      	bne.n	8000d84 <Cal_money+0x248>
		sprintf(buffer1 ,"UNAUTHORIZED");
 8000d5a:	4931      	ldr	r1, [pc, #196]	; (8000e20 <Cal_money+0x2e4>)
 8000d5c:	4828      	ldr	r0, [pc, #160]	; (8000e00 <Cal_money+0x2c4>)
 8000d5e:	f005 f841 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,0);
 8000d62:	2100      	movs	r1, #0
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff faaf 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);	
 8000d6a:	4825      	ldr	r0, [pc, #148]	; (8000e00 <Cal_money+0x2c4>)
 8000d6c:	f7ff fadc 	bl	8000328 <LCD1602_SendString>
		HAL_Delay(3000);
 8000d70:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d74:	f000 ff38 	bl	8001be8 <HAL_Delay>
		memset(receive_data,0x00,24);
 8000d78:	2218      	movs	r2, #24
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	481a      	ldr	r0, [pc, #104]	; (8000de8 <Cal_money+0x2ac>)
 8000d7e:	f005 f851 	bl	8005e24 <memset>
 8000d82:	e01e      	b.n	8000dc2 <Cal_money+0x286>
	} else {
		sprintf(buffer1 ,"TIME OUT");
 8000d84:	4927      	ldr	r1, [pc, #156]	; (8000e24 <Cal_money+0x2e8>)
 8000d86:	481e      	ldr	r0, [pc, #120]	; (8000e00 <Cal_money+0x2c4>)
 8000d88:	f005 f82c 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,0);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fa9a 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);
 8000d94:	481a      	ldr	r0, [pc, #104]	; (8000e00 <Cal_money+0x2c4>)
 8000d96:	f7ff fac7 	bl	8000328 <LCD1602_SendString>
		sprintf(buffer1 ,"PLEASE RECHECK");
 8000d9a:	4923      	ldr	r1, [pc, #140]	; (8000e28 <Cal_money+0x2ec>)
 8000d9c:	4818      	ldr	r0, [pc, #96]	; (8000e00 <Cal_money+0x2c4>)
 8000d9e:	f005 f821 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,1);
 8000da2:	2101      	movs	r1, #1
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff fa8f 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);
 8000daa:	4815      	ldr	r0, [pc, #84]	; (8000e00 <Cal_money+0x2c4>)
 8000dac:	f7ff fabc 	bl	8000328 <LCD1602_SendString>
		HAL_Delay(3000);
 8000db0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000db4:	f000 ff18 	bl	8001be8 <HAL_Delay>
		memset(receive_data,0x00,24);
 8000db8:	2218      	movs	r2, #24
 8000dba:	2100      	movs	r1, #0
 8000dbc:	480a      	ldr	r0, [pc, #40]	; (8000de8 <Cal_money+0x2ac>)
 8000dbe:	f005 f831 	bl	8005e24 <memset>
	}
	receive_data[0] = 0x00;
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <Cal_money+0x2ac>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
	LCD1602_SetFunction(CLEAR_DISPLAY);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff fa57 	bl	800027c <LCD1602_SetFunction>
	LCD1602_SetCursor(0, 0);
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff fa79 	bl	80002c8 <LCD1602_SetCursor>
	LCD1602_SendString(" CHECK CARD ID");
 8000dd6:	4815      	ldr	r0, [pc, #84]	; (8000e2c <Cal_money+0x2f0>)
 8000dd8:	f7ff faa6 	bl	8000328 <LCD1602_SendString>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	080067dc 	.word	0x080067dc
 8000de8:	200000b8 	.word	0x200000b8
 8000dec:	08006860 	.word	0x08006860
 8000df0:	200000b9 	.word	0x200000b9
 8000df4:	200000b4 	.word	0x200000b4
 8000df8:	200000bc 	.word	0x200000bc
 8000dfc:	200000bf 	.word	0x200000bf
 8000e00:	200000a4 	.word	0x200000a4
 8000e04:	080067ec 	.word	0x080067ec
 8000e08:	08006800 	.word	0x08006800
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	200001d4 	.word	0x200001d4
 8000e14:	0800680c 	.word	0x0800680c
 8000e18:	0800681c 	.word	0x0800681c
 8000e1c:	08006828 	.word	0x08006828
 8000e20:	08006834 	.word	0x08006834
 8000e24:	08006844 	.word	0x08006844
 8000e28:	08006850 	.word	0x08006850
 8000e2c:	08006788 	.word	0x08006788

08000e30 <Check_Car_In>:

void Check_Car_In(void){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	LCD1602_SetFunction(CLEAR_DISPLAY);
 8000e36:	2001      	movs	r0, #1
 8000e38:	f7ff fa20 	bl	800027c <LCD1602_SetFunction>
	LCD1602_SetCursor(0,0);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fa42 	bl	80002c8 <LCD1602_SetCursor>
	LCD1602_SendString(" WAITTING....");
 8000e44:	487c      	ldr	r0, [pc, #496]	; (8001038 <Check_Car_In+0x208>)
 8000e46:	f7ff fa6f 	bl	8000328 <LCD1602_SendString>
	
	uint16_t delayTime = 10;
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	80fb      	strh	r3, [r7, #6]
	while(receive_data[0] == 0)
 8000e4e:	e00a      	b.n	8000e66 <Check_Car_In+0x36>
	{
		HAL_Delay(10);
 8000e50:	200a      	movs	r0, #10
 8000e52:	f000 fec9 	bl	8001be8 <HAL_Delay>
		delayTime+=10;
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	330a      	adds	r3, #10
 8000e5a:	80fb      	strh	r3, [r7, #6]
		if(delayTime>7000){
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d804      	bhi.n	8000e70 <Check_Car_In+0x40>
	while(receive_data[0] == 0)
 8000e66:	4b75      	ldr	r3, [pc, #468]	; (800103c <Check_Car_In+0x20c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f0      	beq.n	8000e50 <Check_Car_In+0x20>
 8000e6e:	e000      	b.n	8000e72 <Check_Car_In+0x42>
			break;
 8000e70:	bf00      	nop
		}
	}
	if(receive_data[0] =='L'){
 8000e72:	4b72      	ldr	r3, [pc, #456]	; (800103c <Check_Car_In+0x20c>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b4c      	cmp	r3, #76	; 0x4c
 8000e78:	d149      	bne.n	8000f0e <Check_Car_In+0xde>
		char location[5] = {0};
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	713b      	strb	r3, [r7, #4]
		for(uint8_t i = 9; i < 14; i++){
 8000e82:	2309      	movs	r3, #9
 8000e84:	717b      	strb	r3, [r7, #5]
 8000e86:	e00b      	b.n	8000ea0 <Check_Car_In+0x70>
			location[i-9] = receive_data[i];
 8000e88:	797a      	ldrb	r2, [r7, #5]
 8000e8a:	797b      	ldrb	r3, [r7, #5]
 8000e8c:	3b09      	subs	r3, #9
 8000e8e:	496b      	ldr	r1, [pc, #428]	; (800103c <Check_Car_In+0x20c>)
 8000e90:	5c8a      	ldrb	r2, [r1, r2]
 8000e92:	3308      	adds	r3, #8
 8000e94:	443b      	add	r3, r7
 8000e96:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 9; i < 14; i++){
 8000e9a:	797b      	ldrb	r3, [r7, #5]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	717b      	strb	r3, [r7, #5]
 8000ea0:	797b      	ldrb	r3, [r7, #5]
 8000ea2:	2b0d      	cmp	r3, #13
 8000ea4:	d9f0      	bls.n	8000e88 <Check_Car_In+0x58>
		}
		LCD1602_SetFunction(CLEAR_DISPLAY);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff f9e8 	bl	800027c <LCD1602_SetFunction>
		LCD1602_SetCursor(2,0);
 8000eac:	2100      	movs	r1, #0
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f7ff fa0a 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString("LOCATION CAR");
 8000eb4:	4862      	ldr	r0, [pc, #392]	; (8001040 <Check_Car_In+0x210>)
 8000eb6:	f7ff fa37 	bl	8000328 <LCD1602_SendString>
		LCD1602_SetCursor(6,1);
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2006      	movs	r0, #6
 8000ebe:	f7ff fa03 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(location);
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fa2f 	bl	8000328 <LCD1602_SendString>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000eca:	4b5e      	ldr	r3, [pc, #376]	; (8001044 <Check_Car_In+0x214>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2264      	movs	r2, #100	; 0x64
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(5000);  // thoi gian xe di qua barrier
 8000ed2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ed6:	f000 fe87 	bl	8001be8 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0||HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11) == 0){
 8000eda:	e002      	b.n	8000ee2 <Check_Car_In+0xb2>
			HAL_Delay(100);
 8000edc:	2064      	movs	r0, #100	; 0x64
 8000ede:	f000 fe83 	bl	8001be8 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0||HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11) == 0){
 8000ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee6:	4858      	ldr	r0, [pc, #352]	; (8001048 <Check_Car_In+0x218>)
 8000ee8:	f001 fbd6 	bl	8002698 <HAL_GPIO_ReadPin>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f4      	beq.n	8000edc <Check_Car_In+0xac>
 8000ef2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef6:	4854      	ldr	r0, [pc, #336]	; (8001048 <Check_Car_In+0x218>)
 8000ef8:	f001 fbce 	bl	8002698 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0ec      	beq.n	8000edc <Check_Car_In+0xac>
		}
		memset(receive_data,0x00,24);
 8000f02:	2218      	movs	r2, #24
 8000f04:	2100      	movs	r1, #0
 8000f06:	484d      	ldr	r0, [pc, #308]	; (800103c <Check_Car_In+0x20c>)
 8000f08:	f004 ff8c 	bl	8005e24 <memset>
 8000f0c:	e082      	b.n	8001014 <Check_Car_In+0x1e4>
	} else if (receive_data[0] =='N') {
 8000f0e:	4b4b      	ldr	r3, [pc, #300]	; (800103c <Check_Car_In+0x20c>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b4e      	cmp	r3, #78	; 0x4e
 8000f14:	d114      	bne.n	8000f40 <Check_Car_In+0x110>
		sprintf(buffer1 ," NOT FOUND CARD");
 8000f16:	494d      	ldr	r1, [pc, #308]	; (800104c <Check_Car_In+0x21c>)
 8000f18:	484d      	ldr	r0, [pc, #308]	; (8001050 <Check_Car_In+0x220>)
 8000f1a:	f004 ff63 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,0);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff f9d1 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);	
 8000f26:	484a      	ldr	r0, [pc, #296]	; (8001050 <Check_Car_In+0x220>)
 8000f28:	f7ff f9fe 	bl	8000328 <LCD1602_SendString>
		HAL_Delay(3000);
 8000f2c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f30:	f000 fe5a 	bl	8001be8 <HAL_Delay>
		memset(receive_data,0x00,24);
 8000f34:	2218      	movs	r2, #24
 8000f36:	2100      	movs	r1, #0
 8000f38:	4840      	ldr	r0, [pc, #256]	; (800103c <Check_Car_In+0x20c>)
 8000f3a:	f004 ff73 	bl	8005e24 <memset>
 8000f3e:	e069      	b.n	8001014 <Check_Car_In+0x1e4>
	} else if (receive_data[0] =='F') {
 8000f40:	4b3e      	ldr	r3, [pc, #248]	; (800103c <Check_Car_In+0x20c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b46      	cmp	r3, #70	; 0x46
 8000f46:	d114      	bne.n	8000f72 <Check_Car_In+0x142>
		sprintf(buffer1 ,"FORBIDDEN!");
 8000f48:	4942      	ldr	r1, [pc, #264]	; (8001054 <Check_Car_In+0x224>)
 8000f4a:	4841      	ldr	r0, [pc, #260]	; (8001050 <Check_Car_In+0x220>)
 8000f4c:	f004 ff4a 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,0);
 8000f50:	2100      	movs	r1, #0
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff f9b8 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);	
 8000f58:	483d      	ldr	r0, [pc, #244]	; (8001050 <Check_Car_In+0x220>)
 8000f5a:	f7ff f9e5 	bl	8000328 <LCD1602_SendString>
		HAL_Delay(3000);
 8000f5e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f62:	f000 fe41 	bl	8001be8 <HAL_Delay>
		memset(receive_data,0x00,24);
 8000f66:	2218      	movs	r2, #24
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4834      	ldr	r0, [pc, #208]	; (800103c <Check_Car_In+0x20c>)
 8000f6c:	f004 ff5a 	bl	8005e24 <memset>
 8000f70:	e050      	b.n	8001014 <Check_Car_In+0x1e4>
	}  else if (receive_data[0] =='C') {
 8000f72:	4b32      	ldr	r3, [pc, #200]	; (800103c <Check_Car_In+0x20c>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b43      	cmp	r3, #67	; 0x43
 8000f78:	d114      	bne.n	8000fa4 <Check_Car_In+0x174>
		sprintf(buffer1 ,"CONFLICT");
 8000f7a:	4937      	ldr	r1, [pc, #220]	; (8001058 <Check_Car_In+0x228>)
 8000f7c:	4834      	ldr	r0, [pc, #208]	; (8001050 <Check_Car_In+0x220>)
 8000f7e:	f004 ff31 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,0);
 8000f82:	2100      	movs	r1, #0
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff f99f 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);	
 8000f8a:	4831      	ldr	r0, [pc, #196]	; (8001050 <Check_Car_In+0x220>)
 8000f8c:	f7ff f9cc 	bl	8000328 <LCD1602_SendString>
		HAL_Delay(3000);
 8000f90:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f94:	f000 fe28 	bl	8001be8 <HAL_Delay>
		memset(receive_data,0x00,24);
 8000f98:	2218      	movs	r2, #24
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4827      	ldr	r0, [pc, #156]	; (800103c <Check_Car_In+0x20c>)
 8000f9e:	f004 ff41 	bl	8005e24 <memset>
 8000fa2:	e037      	b.n	8001014 <Check_Car_In+0x1e4>
	}  else if (receive_data[0] =='U') {
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <Check_Car_In+0x20c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b55      	cmp	r3, #85	; 0x55
 8000faa:	d114      	bne.n	8000fd6 <Check_Car_In+0x1a6>
		sprintf(buffer1 ,"UNAUTHORIZED");
 8000fac:	492b      	ldr	r1, [pc, #172]	; (800105c <Check_Car_In+0x22c>)
 8000fae:	4828      	ldr	r0, [pc, #160]	; (8001050 <Check_Car_In+0x220>)
 8000fb0:	f004 ff18 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,0);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff f986 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);	
 8000fbc:	4824      	ldr	r0, [pc, #144]	; (8001050 <Check_Car_In+0x220>)
 8000fbe:	f7ff f9b3 	bl	8000328 <LCD1602_SendString>
		HAL_Delay(3000);
 8000fc2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fc6:	f000 fe0f 	bl	8001be8 <HAL_Delay>
		memset(receive_data,0x00,24);
 8000fca:	2218      	movs	r2, #24
 8000fcc:	2100      	movs	r1, #0
 8000fce:	481b      	ldr	r0, [pc, #108]	; (800103c <Check_Car_In+0x20c>)
 8000fd0:	f004 ff28 	bl	8005e24 <memset>
 8000fd4:	e01e      	b.n	8001014 <Check_Car_In+0x1e4>
	} else {
		sprintf(buffer1 ,"TIME OUT");
 8000fd6:	4922      	ldr	r1, [pc, #136]	; (8001060 <Check_Car_In+0x230>)
 8000fd8:	481d      	ldr	r0, [pc, #116]	; (8001050 <Check_Car_In+0x220>)
 8000fda:	f004 ff03 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,0);
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff f971 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);
 8000fe6:	481a      	ldr	r0, [pc, #104]	; (8001050 <Check_Car_In+0x220>)
 8000fe8:	f7ff f99e 	bl	8000328 <LCD1602_SendString>
		sprintf(buffer1 ,"PLEASE RECHECK");
 8000fec:	491d      	ldr	r1, [pc, #116]	; (8001064 <Check_Car_In+0x234>)
 8000fee:	4818      	ldr	r0, [pc, #96]	; (8001050 <Check_Car_In+0x220>)
 8000ff0:	f004 fef8 	bl	8005de4 <siprintf>
		LCD1602_SetCursor(0,1);
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff f966 	bl	80002c8 <LCD1602_SetCursor>
		LCD1602_SendString(buffer1);
 8000ffc:	4814      	ldr	r0, [pc, #80]	; (8001050 <Check_Car_In+0x220>)
 8000ffe:	f7ff f993 	bl	8000328 <LCD1602_SendString>
		HAL_Delay(3000);
 8001002:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001006:	f000 fdef 	bl	8001be8 <HAL_Delay>
		memset(receive_data,0x00,24);
 800100a:	2218      	movs	r2, #24
 800100c:	2100      	movs	r1, #0
 800100e:	480b      	ldr	r0, [pc, #44]	; (800103c <Check_Car_In+0x20c>)
 8001010:	f004 ff08 	bl	8005e24 <memset>
	}
	receive_data[0] = 0x00;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <Check_Car_In+0x20c>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
	LCD1602_SetFunction(CLEAR_DISPLAY);
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff f92e 	bl	800027c <LCD1602_SetFunction>
	LCD1602_SetCursor(0, 0);
 8001020:	2100      	movs	r1, #0
 8001022:	2000      	movs	r0, #0
 8001024:	f7ff f950 	bl	80002c8 <LCD1602_SetCursor>
	LCD1602_SendString(" CHECK CARD ID");
 8001028:	480f      	ldr	r0, [pc, #60]	; (8001068 <Check_Car_In+0x238>)
 800102a:	f7ff f97d 	bl	8000328 <LCD1602_SendString>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	080067dc 	.word	0x080067dc
 800103c:	200000b8 	.word	0x200000b8
 8001040:	08006864 	.word	0x08006864
 8001044:	200001d4 	.word	0x200001d4
 8001048:	40010800 	.word	0x40010800
 800104c:	0800680c 	.word	0x0800680c
 8001050:	200000a4 	.word	0x200000a4
 8001054:	0800681c 	.word	0x0800681c
 8001058:	08006828 	.word	0x08006828
 800105c:	08006834 	.word	0x08006834
 8001060:	08006844 	.word	0x08006844
 8001064:	08006850 	.word	0x08006850
 8001068:	08006788 	.word	0x08006788

0800106c <HAL_UARTEx_RxEventCallback>:
//	
//}


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_data, RX_SIZE);
 8001078:	2218      	movs	r2, #24
 800107a:	4906      	ldr	r1, [pc, #24]	; (8001094 <HAL_UARTEx_RxEventCallback+0x28>)
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <HAL_UARTEx_RxEventCallback+0x2c>)
 800107e:	f003 ff2a 	bl	8004ed6 <HAL_UARTEx_ReceiveToIdle_DMA>
    size = Size;
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_UARTEx_RxEventCallback+0x30>)
 8001088:	701a      	strb	r2, [r3, #0]
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200000b8 	.word	0x200000b8
 8001098:	20000264 	.word	0x20000264
 800109c:	200000d0 	.word	0x200000d0

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 80010ba:	f107 0208 	add.w	r2, r7, #8
 80010be:	f107 010c 	add.w	r1, r7, #12
 80010c2:	230a      	movs	r3, #10
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <SPI1SendByte+0x2c>)
 80010ca:	f002 fc45 	bl	8003958 <HAL_SPI_TransmitReceive>
	return readValue[0];
 80010ce:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000017c 	.word	0x2000017c

080010dc <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	460a      	mov	r2, r1
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	4613      	mov	r3, r2
 80010ea:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 80010ec:	2200      	movs	r2, #0
 80010ee:	2110      	movs	r1, #16
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <SPI1_WriteReg+0x3c>)
 80010f2:	f001 fae8 	bl	80026c6 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ffd7 	bl	80010ac <SPI1SendByte>
	SPI1SendByte(value);
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ffd3 	bl	80010ac <SPI1SendByte>
	cs_set();
 8001106:	2201      	movs	r2, #1
 8001108:	2110      	movs	r1, #16
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <SPI1_WriteReg+0x3c>)
 800110c:	f001 fadb 	bl	80026c6 <HAL_GPIO_WritePin>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40010800 	.word	0x40010800

0800111c <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8001126:	2200      	movs	r2, #0
 8001128:	2110      	movs	r1, #16
 800112a:	480b      	ldr	r0, [pc, #44]	; (8001158 <SPI1_ReadReg+0x3c>)
 800112c:	f001 facb 	bl	80026c6 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ffba 	bl	80010ac <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff ffb7 	bl	80010ac <SPI1SendByte>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8001142:	2201      	movs	r2, #1
 8001144:	2110      	movs	r1, #16
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <SPI1_ReadReg+0x3c>)
 8001148:	f001 fabd 	bl	80026c6 <HAL_GPIO_WritePin>
	return val;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40010800 	.word	0x40010800

0800115c <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	460a      	mov	r2, r1
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001176:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8001178:	79ba      	ldrb	r2, [r7, #6]
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffac 	bl	80010dc <SPI1_WriteReg>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	b25b      	sxtb	r3, r3
 800119c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ffb5 	bl	800111c <SPI1_ReadReg>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
	return val;	
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	2026      	movs	r0, #38	; 0x26
 80011cc:	f000 f849 	bl	8001262 <MFRC522_Request>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d104      	bne.n	80011e4 <MFRC522_Check+0x24>
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f935 	bl	800144a <MFRC522_Anticoll>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation 
 80011e4:	f000 f9f8 	bl	80015d8 <MFRC522_Halt>
	return status;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	460a      	mov	r2, r1
 80011fc:	71fb      	strb	r3, [r7, #7]
 80011fe:	4613      	mov	r3, r2
 8001200:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ffc1 	bl	800118c <MFRC522_ReadRegister>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	79bb      	ldrb	r3, [r7, #6]
 8001210:	4313      	orrs	r3, r2
 8001212:	b2da      	uxtb	r2, r3
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff9f 	bl	800115c <MFRC522_WriteRegister>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	460a      	mov	r2, r1
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	4613      	mov	r3, r2
 8001234:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ffa7 	bl	800118c <MFRC522_ReadRegister>
 800123e:	4603      	mov	r3, r0
 8001240:	b25a      	sxtb	r2, r3
 8001242:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001246:	43db      	mvns	r3, r3
 8001248:	b25b      	sxtb	r3, r3
 800124a:	4013      	ands	r3, r2
 800124c:	b25b      	sxtb	r3, r3
 800124e:	b2da      	uxtb	r2, r3
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff81 	bl	800115c <MFRC522_WriteRegister>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af02      	add	r7, sp, #8
 8001268:	4603      	mov	r3, r0
 800126a:	6039      	str	r1, [r7, #0]
 800126c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 800126e:	2107      	movs	r1, #7
 8001270:	200d      	movs	r0, #13
 8001272:	f7ff ff73 	bl	800115c <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	79fa      	ldrb	r2, [r7, #7]
 800127a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2201      	movs	r2, #1
 8001286:	6839      	ldr	r1, [r7, #0]
 8001288:	200c      	movs	r0, #12
 800128a:	f000 f80f 	bl	80012ac <MFRC522_ToCard>
 800128e:	4603      	mov	r3, r0
 8001290:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <MFRC522_Request+0x3c>
 8001298:	89bb      	ldrh	r3, [r7, #12]
 800129a:	2b10      	cmp	r3, #16
 800129c:	d001      	beq.n	80012a2 <MFRC522_Request+0x40>
 800129e:	2302      	movs	r3, #2
 80012a0:	73fb      	strb	r3, [r7, #15]
	return status;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	4613      	mov	r3, r2
 80012bc:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 80012be:	2302      	movs	r3, #2
 80012c0:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80012c2:	2300      	movs	r3, #0
 80012c4:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80012c6:	2300      	movs	r3, #0
 80012c8:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	d006      	beq.n	80012de <MFRC522_ToCard+0x32>
 80012d0:	2b0e      	cmp	r3, #14
 80012d2:	d109      	bne.n	80012e8 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80012d4:	2312      	movs	r3, #18
 80012d6:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80012d8:	2310      	movs	r3, #16
 80012da:	757b      	strb	r3, [r7, #21]
			break;
 80012dc:	e005      	b.n	80012ea <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80012de:	2377      	movs	r3, #119	; 0x77
 80012e0:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80012e2:	2330      	movs	r3, #48	; 0x30
 80012e4:	757b      	strb	r3, [r7, #21]
			break;
 80012e6:	e000      	b.n	80012ea <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 80012e8:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80012ea:	7dbb      	ldrb	r3, [r7, #22]
 80012ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4619      	mov	r1, r3
 80012f4:	2002      	movs	r0, #2
 80012f6:	f7ff ff31 	bl	800115c <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	2004      	movs	r0, #4
 80012fe:	f7ff ff92 	bl	8001226 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	200a      	movs	r0, #10
 8001306:	f7ff ff74 	bl	80011f2 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800130a:	2100      	movs	r1, #0
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff ff25 	bl	800115c <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001312:	2300      	movs	r3, #0
 8001314:	827b      	strh	r3, [r7, #18]
 8001316:	e00a      	b.n	800132e <MFRC522_ToCard+0x82>
 8001318:	8a7b      	ldrh	r3, [r7, #18]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	2009      	movs	r0, #9
 8001324:	f7ff ff1a 	bl	800115c <MFRC522_WriteRegister>
 8001328:	8a7b      	ldrh	r3, [r7, #18]
 800132a:	3301      	adds	r3, #1
 800132c:	827b      	strh	r3, [r7, #18]
 800132e:	7bbb      	ldrb	r3, [r7, #14]
 8001330:	b29b      	uxth	r3, r3
 8001332:	8a7a      	ldrh	r2, [r7, #18]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3ef      	bcc.n	8001318 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	4619      	mov	r1, r3
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff ff0d 	bl	800115c <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	2b0c      	cmp	r3, #12
 8001346:	d103      	bne.n	8001350 <MFRC522_ToCard+0xa4>
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	200d      	movs	r0, #13
 800134c:	f7ff ff51 	bl	80011f2 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001350:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001354:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001356:	2004      	movs	r0, #4
 8001358:	f7ff ff18 	bl	800118c <MFRC522_ReadRegister>
 800135c:	4603      	mov	r3, r0
 800135e:	753b      	strb	r3, [r7, #20]
		i--;
 8001360:	8a7b      	ldrh	r3, [r7, #18]
 8001362:	3b01      	subs	r3, #1
 8001364:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001366:	8a7b      	ldrh	r3, [r7, #18]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00a      	beq.n	8001382 <MFRC522_ToCard+0xd6>
 800136c:	7d3b      	ldrb	r3, [r7, #20]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d105      	bne.n	8001382 <MFRC522_ToCard+0xd6>
 8001376:	7d3a      	ldrb	r2, [r7, #20]
 8001378:	7d7b      	ldrb	r3, [r7, #21]
 800137a:	4013      	ands	r3, r2
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0e9      	beq.n	8001356 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	200d      	movs	r0, #13
 8001386:	f7ff ff4e 	bl	8001226 <MFRC522_ClearBitMask>

	if (i != 0)  {
 800138a:	8a7b      	ldrh	r3, [r7, #18]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d057      	beq.n	8001440 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001390:	2006      	movs	r0, #6
 8001392:	f7ff fefb 	bl	800118c <MFRC522_ReadRegister>
 8001396:	4603      	mov	r3, r0
 8001398:	f003 031b 	and.w	r3, r3, #27
 800139c:	2b00      	cmp	r3, #0
 800139e:	d14d      	bne.n	800143c <MFRC522_ToCard+0x190>
			status = MI_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 80013a4:	7d3a      	ldrb	r2, [r7, #20]
 80013a6:	7dbb      	ldrb	r3, [r7, #22]
 80013a8:	4013      	ands	r3, r2
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MFRC522_ToCard+0x10c>
 80013b4:	2301      	movs	r3, #1
 80013b6:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b0c      	cmp	r3, #12
 80013bc:	d140      	bne.n	8001440 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80013be:	200a      	movs	r0, #10
 80013c0:	f7ff fee4 	bl	800118c <MFRC522_ReadRegister>
 80013c4:	4603      	mov	r3, r0
 80013c6:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80013c8:	200c      	movs	r0, #12
 80013ca:	f7ff fedf 	bl	800118c <MFRC522_ReadRegister>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 80013d6:	7c7b      	ldrb	r3, [r7, #17]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00b      	beq.n	80013f4 <MFRC522_ToCard+0x148>
 80013dc:	7d3b      	ldrb	r3, [r7, #20]
 80013de:	3b01      	subs	r3, #1
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	7c7b      	ldrb	r3, [r7, #17]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	801a      	strh	r2, [r3, #0]
 80013f2:	e005      	b.n	8001400 <MFRC522_ToCard+0x154>
 80013f4:	7d3b      	ldrb	r3, [r7, #20]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fe:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8001400:	7d3b      	ldrb	r3, [r7, #20]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <MFRC522_ToCard+0x15e>
 8001406:	2301      	movs	r3, #1
 8001408:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 800140a:	7d3b      	ldrb	r3, [r7, #20]
 800140c:	2b10      	cmp	r3, #16
 800140e:	d901      	bls.n	8001414 <MFRC522_ToCard+0x168>
 8001410:	2310      	movs	r3, #16
 8001412:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8001414:	2300      	movs	r3, #0
 8001416:	827b      	strh	r3, [r7, #18]
 8001418:	e00a      	b.n	8001430 <MFRC522_ToCard+0x184>
 800141a:	8a7b      	ldrh	r3, [r7, #18]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	18d4      	adds	r4, r2, r3
 8001420:	2009      	movs	r0, #9
 8001422:	f7ff feb3 	bl	800118c <MFRC522_ReadRegister>
 8001426:	4603      	mov	r3, r0
 8001428:	7023      	strb	r3, [r4, #0]
 800142a:	8a7b      	ldrh	r3, [r7, #18]
 800142c:	3301      	adds	r3, #1
 800142e:	827b      	strh	r3, [r7, #18]
 8001430:	7d3b      	ldrb	r3, [r7, #20]
 8001432:	b29b      	uxth	r3, r3
 8001434:	8a7a      	ldrh	r2, [r7, #18]
 8001436:	429a      	cmp	r2, r3
 8001438:	d3ef      	bcc.n	800141a <MFRC522_ToCard+0x16e>
 800143a:	e001      	b.n	8001440 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 800143c:	2302      	movs	r3, #2
 800143e:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8001440:	7dfb      	ldrb	r3, [r7, #23]
}
 8001442:	4618      	mov	r0, r3
 8001444:	371c      	adds	r7, #28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd90      	pop	{r4, r7, pc}

0800144a <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af02      	add	r7, sp, #8
 8001450:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8001456:	2100      	movs	r1, #0
 8001458:	200d      	movs	r0, #13
 800145a:	f7ff fe7f 	bl	800115c <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2293      	movs	r2, #147	; 0x93
 8001462:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3301      	adds	r3, #1
 8001468:	2220      	movs	r2, #32
 800146a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800146c:	f107 030a 	add.w	r3, r7, #10
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2202      	movs	r2, #2
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	200c      	movs	r0, #12
 800147a:	f7ff ff17 	bl	80012ac <MFRC522_ToCard>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d118      	bne.n	80014ba <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8001488:	2300      	movs	r3, #0
 800148a:	73bb      	strb	r3, [r7, #14]
 800148c:	e009      	b.n	80014a2 <MFRC522_Anticoll+0x58>
 800148e:	7bbb      	ldrb	r3, [r7, #14]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	7b7b      	ldrb	r3, [r7, #13]
 8001498:	4053      	eors	r3, r2
 800149a:	737b      	strb	r3, [r7, #13]
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	3301      	adds	r3, #1
 80014a0:	73bb      	strb	r3, [r7, #14]
 80014a2:	7bbb      	ldrb	r3, [r7, #14]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d9f2      	bls.n	800148e <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	7b7a      	ldrb	r2, [r7, #13]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d001      	beq.n	80014ba <MFRC522_Anticoll+0x70>
 80014b6:	2302      	movs	r3, #2
 80014b8:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
} 
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	460b      	mov	r3, r1
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 80014d2:	2104      	movs	r1, #4
 80014d4:	2005      	movs	r0, #5
 80014d6:	f7ff fea6 	bl	8001226 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	200a      	movs	r0, #10
 80014de:	f7ff fe88 	bl	80011f2 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
 80014e6:	e00a      	b.n	80014fe <MFRC522_CalculateCRC+0x3a>
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	2009      	movs	r0, #9
 80014f4:	f7ff fe32 	bl	800115c <MFRC522_WriteRegister>
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	3301      	adds	r3, #1
 80014fc:	75fb      	strb	r3, [r7, #23]
 80014fe:	7dfa      	ldrb	r2, [r7, #23]
 8001500:	7afb      	ldrb	r3, [r7, #11]
 8001502:	429a      	cmp	r2, r3
 8001504:	d3f0      	bcc.n	80014e8 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001506:	2103      	movs	r1, #3
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff fe27 	bl	800115c <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 800150e:	23ff      	movs	r3, #255	; 0xff
 8001510:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001512:	2005      	movs	r0, #5
 8001514:	f7ff fe3a 	bl	800118c <MFRC522_ReadRegister>
 8001518:	4603      	mov	r3, r0
 800151a:	75bb      	strb	r3, [r7, #22]
		i--;
 800151c:	7dfb      	ldrb	r3, [r7, #23]
 800151e:	3b01      	subs	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <MFRC522_CalculateCRC+0x6e>
 8001528:	7dbb      	ldrb	r3, [r7, #22]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0ef      	beq.n	8001512 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001532:	2022      	movs	r0, #34	; 0x22
 8001534:	f7ff fe2a 	bl	800118c <MFRC522_ReadRegister>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	1c5c      	adds	r4, r3, #1
 8001544:	2021      	movs	r0, #33	; 0x21
 8001546:	f7ff fe21 	bl	800118c <MFRC522_ReadRegister>
 800154a:	4603      	mov	r3, r0
 800154c:	7023      	strb	r3, [r4, #0]
}
 800154e:	bf00      	nop
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd90      	pop	{r4, r7, pc}

08001556 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 800155a:	f000 f820 	bl	800159e <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800155e:	218d      	movs	r1, #141	; 0x8d
 8001560:	202a      	movs	r0, #42	; 0x2a
 8001562:	f7ff fdfb 	bl	800115c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001566:	213e      	movs	r1, #62	; 0x3e
 8001568:	202b      	movs	r0, #43	; 0x2b
 800156a:	f7ff fdf7 	bl	800115c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 800156e:	211e      	movs	r1, #30
 8001570:	202d      	movs	r0, #45	; 0x2d
 8001572:	f7ff fdf3 	bl	800115c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001576:	2100      	movs	r1, #0
 8001578:	202c      	movs	r0, #44	; 0x2c
 800157a:	f7ff fdef 	bl	800115c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 800157e:	2170      	movs	r1, #112	; 0x70
 8001580:	2026      	movs	r0, #38	; 0x26
 8001582:	f7ff fdeb 	bl	800115c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001586:	2140      	movs	r1, #64	; 0x40
 8001588:	2015      	movs	r0, #21
 800158a:	f7ff fde7 	bl	800115c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800158e:	213d      	movs	r1, #61	; 0x3d
 8001590:	2011      	movs	r0, #17
 8001592:	f7ff fde3 	bl	800115c <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8001596:	f000 f80a 	bl	80015ae <MFRC522_AntennaOn>
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}

0800159e <MFRC522_Reset>:

void MFRC522_Reset(void) {
 800159e:	b580      	push	{r7, lr}
 80015a0:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 80015a2:	210f      	movs	r1, #15
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff fdd9 	bl	800115c <MFRC522_WriteRegister>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}

080015ae <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80015b4:	2014      	movs	r0, #20
 80015b6:	f7ff fde9 	bl	800118c <MFRC522_ReadRegister>
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d103      	bne.n	80015d0 <MFRC522_AntennaOn+0x22>
 80015c8:	2103      	movs	r1, #3
 80015ca:	2014      	movs	r0, #20
 80015cc:	f7ff fe11 	bl	80011f2 <MFRC522_SetBitMask>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 80015de:	2350      	movs	r3, #80	; 0x50
 80015e0:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80015e6:	463b      	mov	r3, r7
 80015e8:	1c9a      	adds	r2, r3, #2
 80015ea:	463b      	mov	r3, r7
 80015ec:	2102      	movs	r1, #2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff68 	bl	80014c4 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80015f4:	463a      	mov	r2, r7
 80015f6:	4639      	mov	r1, r7
 80015f8:	1dbb      	adds	r3, r7, #6
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	4613      	mov	r3, r2
 80015fe:	2204      	movs	r2, #4
 8001600:	200c      	movs	r0, #12
 8001602:	f7ff fe53 	bl	80012ac <MFRC522_ToCard>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_MspInit+0x5c>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4a14      	ldr	r2, [pc, #80]	; (800166c <HAL_MspInit+0x5c>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6193      	str	r3, [r2, #24]
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_MspInit+0x5c>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_MspInit+0x5c>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_MspInit+0x5c>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_MspInit+0x5c>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_MspInit+0x60>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_MspInit+0x60>)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000

08001674 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0318 	add.w	r3, r7, #24
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a2b      	ldr	r2, [pc, #172]	; (800173c <HAL_I2C_MspInit+0xc8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d124      	bne.n	80016de <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <HAL_I2C_MspInit+0xcc>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	4a29      	ldr	r2, [pc, #164]	; (8001740 <HAL_I2C_MspInit+0xcc>)
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	6193      	str	r3, [r2, #24]
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <HAL_I2C_MspInit+0xcc>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ac:	23c0      	movs	r3, #192	; 0xc0
 80016ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b0:	2312      	movs	r3, #18
 80016b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 0318 	add.w	r3, r7, #24
 80016bc:	4619      	mov	r1, r3
 80016be:	4821      	ldr	r0, [pc, #132]	; (8001744 <HAL_I2C_MspInit+0xd0>)
 80016c0:	f000 fe66 	bl	8002390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <HAL_I2C_MspInit+0xcc>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_I2C_MspInit+0xcc>)
 80016ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ce:	61d3      	str	r3, [r2, #28]
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_I2C_MspInit+0xcc>)
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016dc:	e029      	b.n	8001732 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a19      	ldr	r2, [pc, #100]	; (8001748 <HAL_I2C_MspInit+0xd4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d124      	bne.n	8001732 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_I2C_MspInit+0xcc>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_I2C_MspInit+0xcc>)
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_I2C_MspInit+0xcc>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001700:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001706:	2312      	movs	r3, #18
 8001708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	4619      	mov	r1, r3
 8001714:	480b      	ldr	r0, [pc, #44]	; (8001744 <HAL_I2C_MspInit+0xd0>)
 8001716:	f000 fe3b 	bl	8002390 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_I2C_MspInit+0xcc>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_I2C_MspInit+0xcc>)
 8001720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_I2C_MspInit+0xcc>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40005400 	.word	0x40005400
 8001740:	40021000 	.word	0x40021000
 8001744:	40010c00 	.word	0x40010c00
 8001748:	40005800 	.word	0x40005800

0800174c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <HAL_SPI_MspInit+0x88>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d12f      	bne.n	80017cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_SPI_MspInit+0x8c>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_SPI_MspInit+0x8c>)
 8001772:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_SPI_MspInit+0x8c>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_SPI_MspInit+0x8c>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <HAL_SPI_MspInit+0x8c>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_SPI_MspInit+0x8c>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800179c:	23a0      	movs	r3, #160	; 0xa0
 800179e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4619      	mov	r1, r3
 80017ae:	480b      	ldr	r0, [pc, #44]	; (80017dc <HAL_SPI_MspInit+0x90>)
 80017b0:	f000 fdee 	bl	8002390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017b4:	2340      	movs	r3, #64	; 0x40
 80017b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	4619      	mov	r1, r3
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <HAL_SPI_MspInit+0x90>)
 80017c8:	f000 fde2 	bl	8002390 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017cc:	bf00      	nop
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40013000 	.word	0x40013000
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010800 	.word	0x40010800

080017e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <HAL_TIM_Base_MspInit+0x78>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d114      	bne.n	800181c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_TIM_Base_MspInit+0x7c>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	4a19      	ldr	r2, [pc, #100]	; (800185c <HAL_TIM_Base_MspInit+0x7c>)
 80017f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017fc:	6193      	str	r3, [r2, #24]
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_TIM_Base_MspInit+0x7c>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2018      	movs	r0, #24
 8001810:	f000 fae5 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001814:	2018      	movs	r0, #24
 8001816:	f000 fafe 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800181a:	e018      	b.n	800184e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001824:	d113      	bne.n	800184e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_TIM_Base_MspInit+0x7c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a0c      	ldr	r2, [pc, #48]	; (800185c <HAL_TIM_Base_MspInit+0x7c>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	61d3      	str	r3, [r2, #28]
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_TIM_Base_MspInit+0x7c>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	201c      	movs	r0, #28
 8001844:	f000 facb 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001848:	201c      	movs	r0, #28
 800184a:	f000 fae4 	bl	8001e16 <HAL_NVIC_EnableIRQ>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40012c00 	.word	0x40012c00
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a10      	ldr	r2, [pc, #64]	; (80018bc <HAL_TIM_MspPostInit+0x5c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d118      	bne.n	80018b2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_TIM_MspPostInit+0x60>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_TIM_MspPostInit+0x60>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_TIM_MspPostInit+0x60>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001898:	f44f 7340 	mov.w	r3, #768	; 0x300
 800189c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0310 	add.w	r3, r7, #16
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <HAL_TIM_MspPostInit+0x64>)
 80018ae:	f000 fd6f 	bl	8002390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40012c00 	.word	0x40012c00
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010800 	.word	0x40010800

080018c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a32      	ldr	r2, [pc, #200]	; (80019ac <HAL_UART_MspInit+0xe4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d15d      	bne.n	80019a4 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e8:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <HAL_UART_MspInit+0xe8>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	4a30      	ldr	r2, [pc, #192]	; (80019b0 <HAL_UART_MspInit+0xe8>)
 80018ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f2:	61d3      	str	r3, [r2, #28]
 80018f4:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_UART_MspInit+0xe8>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_UART_MspInit+0xe8>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a2a      	ldr	r2, [pc, #168]	; (80019b0 <HAL_UART_MspInit+0xe8>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <HAL_UART_MspInit+0xe8>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001918:	2304      	movs	r3, #4
 800191a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	4619      	mov	r1, r3
 800192a:	4822      	ldr	r0, [pc, #136]	; (80019b4 <HAL_UART_MspInit+0xec>)
 800192c:	f000 fd30 	bl	8002390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001930:	2308      	movs	r3, #8
 8001932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	4619      	mov	r1, r3
 8001942:	481c      	ldr	r0, [pc, #112]	; (80019b4 <HAL_UART_MspInit+0xec>)
 8001944:	f000 fd24 	bl	8002390 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_UART_MspInit+0xf0>)
 800194a:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <HAL_UART_MspInit+0xf4>)
 800194c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_UART_MspInit+0xf0>)
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_UART_MspInit+0xf0>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_UART_MspInit+0xf0>)
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_UART_MspInit+0xf0>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_UART_MspInit+0xf0>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_UART_MspInit+0xf0>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_UART_MspInit+0xf0>)
 8001974:	2200      	movs	r2, #0
 8001976:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001978:	480f      	ldr	r0, [pc, #60]	; (80019b8 <HAL_UART_MspInit+0xf0>)
 800197a:	f000 fa67 	bl	8001e4c <HAL_DMA_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001984:	f7ff fb8c 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HAL_UART_MspInit+0xf0>)
 800198c:	63da      	str	r2, [r3, #60]	; 0x3c
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_UART_MspInit+0xf0>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2100      	movs	r1, #0
 8001998:	2026      	movs	r0, #38	; 0x26
 800199a:	f000 fa20 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800199e:	2026      	movs	r0, #38	; 0x26
 80019a0:	f000 fa39 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40004400 	.word	0x40004400
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010800 	.word	0x40010800
 80019b8:	200002ac 	.word	0x200002ac
 80019bc:	4002006c 	.word	0x4002006c

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c4:	e7fe      	b.n	80019c4 <NMI_Handler+0x4>

080019c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <MemManage_Handler+0x4>

080019d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <UsageFault_Handler+0x4>

080019de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a06:	f000 f8d3 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <DMA1_Channel6_IRQHandler+0x10>)
 8001a16:	f000 fb87 	bl	8002128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200002ac 	.word	0x200002ac

08001a24 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <TIM1_BRK_IRQHandler+0x10>)
 8001a2a:	f002 fb87 	bl	800413c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200001d4 	.word	0x200001d4

08001a38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM2_IRQHandler+0x10>)
 8001a3e:	f002 fb7d 	bl	800413c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000021c 	.word	0x2000021c

08001a4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <USART2_IRQHandler+0x10>)
 8001a52:	f003 fa9d 	bl	8004f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000264 	.word	0x20000264

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a68:	4a14      	ldr	r2, [pc, #80]	; (8001abc <_sbrk+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <_sbrk+0x60>)
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <_sbrk+0x64>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <_sbrk+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d207      	bcs.n	8001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a90:	f004 f9e4 	bl	8005e5c <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	220c      	movs	r2, #12
 8001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	e009      	b.n	8001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <_sbrk+0x64>)
 8001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20005000 	.word	0x20005000
 8001ac0:	00000400 	.word	0x00000400
 8001ac4:	200002f0 	.word	0x200002f0
 8001ac8:	20000440 	.word	0x20000440

08001acc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad8:	f7ff fff8 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ade:	490c      	ldr	r1, [pc, #48]	; (8001b10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae4:	e002      	b.n	8001aec <LoopCopyDataInit>

08001ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aea:	3304      	adds	r3, #4

08001aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af0:	d3f9      	bcc.n	8001ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001af4:	4c09      	ldr	r4, [pc, #36]	; (8001b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af8:	e001      	b.n	8001afe <LoopFillZerobss>

08001afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001afc:	3204      	adds	r2, #4

08001afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b00:	d3fb      	bcc.n	8001afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b02:	f004 f9b1 	bl	8005e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b06:	f7fe fc2b 	bl	8000360 <main>
  bx lr
 8001b0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b14:	080069dc 	.word	0x080069dc
  ldr r2, =_sbss
 8001b18:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b1c:	20000440 	.word	0x20000440

08001b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC1_2_IRQHandler>
	...

08001b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_Init+0x28>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_Init+0x28>)
 8001b2e:	f043 0310 	orr.w	r3, r3, #16
 8001b32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b34:	2003      	movs	r0, #3
 8001b36:	f000 f947 	bl	8001dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3a:	200f      	movs	r0, #15
 8001b3c:	f000 f808 	bl	8001b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b40:	f7ff fd66 	bl	8001610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40022000 	.word	0x40022000

08001b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x54>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_InitTick+0x58>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f95f 	bl	8001e32 <HAL_SYSTICK_Config>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00e      	b.n	8001b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d80a      	bhi.n	8001b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b84:	2200      	movs	r2, #0
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f000 f927 	bl	8001dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <HAL_InitTick+0x5c>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	20000004 	.word	0x20000004

08001bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_IncTick+0x1c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a03      	ldr	r2, [pc, #12]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	200002f4 	.word	0x200002f4

08001bd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <HAL_GetTick+0x10>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	200002f4 	.word	0x200002f4

08001be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff fff0 	bl	8001bd4 <HAL_GetTick>
 8001bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d005      	beq.n	8001c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_Delay+0x44>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c0e:	bf00      	nop
 8001c10:	f7ff ffe0 	bl	8001bd4 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d8f7      	bhi.n	8001c10 <HAL_Delay+0x28>
  {
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4906      	ldr	r1, [pc, #24]	; (8001cc8 <__NVIC_EnableIRQ+0x34>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	; (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	; (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d94:	d301      	bcc.n	8001d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00f      	b.n	8001dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <SysTick_Config+0x40>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da2:	210f      	movs	r1, #15
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	f7ff ff90 	bl	8001ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <SysTick_Config+0x40>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <SysTick_Config+0x40>)
 8001db4:	2207      	movs	r2, #7
 8001db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	e000e010 	.word	0xe000e010

08001dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff2d 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df0:	f7ff ff42 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	6978      	ldr	r0, [r7, #20]
 8001dfc:	f7ff ff90 	bl	8001d20 <NVIC_EncodePriority>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff5f 	bl	8001ccc <__NVIC_SetPriority>
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff35 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ffa2 	bl	8001d84 <SysTick_Config>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e043      	b.n	8001eea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_DMA_Init+0xa8>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <HAL_DMA_Init+0xac>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	009a      	lsls	r2, r3, #2
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <HAL_DMA_Init+0xb0>)
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e96:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	bffdfff8 	.word	0xbffdfff8
 8001ef8:	cccccccd 	.word	0xcccccccd
 8001efc:	40020000 	.word	0x40020000

08001f00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_DMA_Start_IT+0x20>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e04b      	b.n	8001fb8 <HAL_DMA_Start_IT+0xb8>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d13a      	bne.n	8001faa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f9eb 	bl	8002334 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 020e 	orr.w	r2, r2, #14
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	e00f      	b.n	8001f98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0204 	bic.w	r2, r2, #4
 8001f86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 020a 	orr.w	r2, r2, #10
 8001f96:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e005      	b.n	8001fb6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d008      	beq.n	8001fea <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2204      	movs	r2, #4
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e020      	b.n	800202c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 020e 	bic.w	r2, r2, #14
 8001ff8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
	...

08002038 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d005      	beq.n	800205c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2204      	movs	r2, #4
 8002054:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	e051      	b.n	8002100 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 020e 	bic.w	r2, r2, #14
 800206a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_DMA_Abort_IT+0xd4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d029      	beq.n	80020da <HAL_DMA_Abort_IT+0xa2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a21      	ldr	r2, [pc, #132]	; (8002110 <HAL_DMA_Abort_IT+0xd8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d022      	beq.n	80020d6 <HAL_DMA_Abort_IT+0x9e>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_DMA_Abort_IT+0xdc>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01a      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x98>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_DMA_Abort_IT+0xe0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d012      	beq.n	80020ca <HAL_DMA_Abort_IT+0x92>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1c      	ldr	r2, [pc, #112]	; (800211c <HAL_DMA_Abort_IT+0xe4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00a      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x8c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <HAL_DMA_Abort_IT+0xe8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d102      	bne.n	80020be <HAL_DMA_Abort_IT+0x86>
 80020b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020bc:	e00e      	b.n	80020dc <HAL_DMA_Abort_IT+0xa4>
 80020be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c2:	e00b      	b.n	80020dc <HAL_DMA_Abort_IT+0xa4>
 80020c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020c8:	e008      	b.n	80020dc <HAL_DMA_Abort_IT+0xa4>
 80020ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ce:	e005      	b.n	80020dc <HAL_DMA_Abort_IT+0xa4>
 80020d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d4:	e002      	b.n	80020dc <HAL_DMA_Abort_IT+0xa4>
 80020d6:	2310      	movs	r3, #16
 80020d8:	e000      	b.n	80020dc <HAL_DMA_Abort_IT+0xa4>
 80020da:	2301      	movs	r3, #1
 80020dc:	4a11      	ldr	r2, [pc, #68]	; (8002124 <HAL_DMA_Abort_IT+0xec>)
 80020de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
    } 
  }
  return status;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40020008 	.word	0x40020008
 8002110:	4002001c 	.word	0x4002001c
 8002114:	40020030 	.word	0x40020030
 8002118:	40020044 	.word	0x40020044
 800211c:	40020058 	.word	0x40020058
 8002120:	4002006c 	.word	0x4002006c
 8002124:	40020000 	.word	0x40020000

08002128 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	2204      	movs	r2, #4
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d04f      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc8>
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b00      	cmp	r3, #0
 8002158:	d04a      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0204 	bic.w	r2, r2, #4
 8002176:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a66      	ldr	r2, [pc, #408]	; (8002318 <HAL_DMA_IRQHandler+0x1f0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d029      	beq.n	80021d6 <HAL_DMA_IRQHandler+0xae>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a65      	ldr	r2, [pc, #404]	; (800231c <HAL_DMA_IRQHandler+0x1f4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d022      	beq.n	80021d2 <HAL_DMA_IRQHandler+0xaa>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a63      	ldr	r2, [pc, #396]	; (8002320 <HAL_DMA_IRQHandler+0x1f8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01a      	beq.n	80021cc <HAL_DMA_IRQHandler+0xa4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a62      	ldr	r2, [pc, #392]	; (8002324 <HAL_DMA_IRQHandler+0x1fc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d012      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x9e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a60      	ldr	r2, [pc, #384]	; (8002328 <HAL_DMA_IRQHandler+0x200>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00a      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x98>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a5f      	ldr	r2, [pc, #380]	; (800232c <HAL_DMA_IRQHandler+0x204>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d102      	bne.n	80021ba <HAL_DMA_IRQHandler+0x92>
 80021b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021b8:	e00e      	b.n	80021d8 <HAL_DMA_IRQHandler+0xb0>
 80021ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021be:	e00b      	b.n	80021d8 <HAL_DMA_IRQHandler+0xb0>
 80021c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021c4:	e008      	b.n	80021d8 <HAL_DMA_IRQHandler+0xb0>
 80021c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021ca:	e005      	b.n	80021d8 <HAL_DMA_IRQHandler+0xb0>
 80021cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d0:	e002      	b.n	80021d8 <HAL_DMA_IRQHandler+0xb0>
 80021d2:	2340      	movs	r3, #64	; 0x40
 80021d4:	e000      	b.n	80021d8 <HAL_DMA_IRQHandler+0xb0>
 80021d6:	2304      	movs	r3, #4
 80021d8:	4a55      	ldr	r2, [pc, #340]	; (8002330 <HAL_DMA_IRQHandler+0x208>)
 80021da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8094 	beq.w	800230e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021ee:	e08e      	b.n	800230e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	2202      	movs	r2, #2
 80021f6:	409a      	lsls	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d056      	beq.n	80022ae <HAL_DMA_IRQHandler+0x186>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d051      	beq.n	80022ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 020a 	bic.w	r2, r2, #10
 8002226:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a38      	ldr	r2, [pc, #224]	; (8002318 <HAL_DMA_IRQHandler+0x1f0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d029      	beq.n	800228e <HAL_DMA_IRQHandler+0x166>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a37      	ldr	r2, [pc, #220]	; (800231c <HAL_DMA_IRQHandler+0x1f4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d022      	beq.n	800228a <HAL_DMA_IRQHandler+0x162>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a35      	ldr	r2, [pc, #212]	; (8002320 <HAL_DMA_IRQHandler+0x1f8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01a      	beq.n	8002284 <HAL_DMA_IRQHandler+0x15c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a34      	ldr	r2, [pc, #208]	; (8002324 <HAL_DMA_IRQHandler+0x1fc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d012      	beq.n	800227e <HAL_DMA_IRQHandler+0x156>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a32      	ldr	r2, [pc, #200]	; (8002328 <HAL_DMA_IRQHandler+0x200>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00a      	beq.n	8002278 <HAL_DMA_IRQHandler+0x150>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a31      	ldr	r2, [pc, #196]	; (800232c <HAL_DMA_IRQHandler+0x204>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d102      	bne.n	8002272 <HAL_DMA_IRQHandler+0x14a>
 800226c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002270:	e00e      	b.n	8002290 <HAL_DMA_IRQHandler+0x168>
 8002272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002276:	e00b      	b.n	8002290 <HAL_DMA_IRQHandler+0x168>
 8002278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800227c:	e008      	b.n	8002290 <HAL_DMA_IRQHandler+0x168>
 800227e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002282:	e005      	b.n	8002290 <HAL_DMA_IRQHandler+0x168>
 8002284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002288:	e002      	b.n	8002290 <HAL_DMA_IRQHandler+0x168>
 800228a:	2320      	movs	r3, #32
 800228c:	e000      	b.n	8002290 <HAL_DMA_IRQHandler+0x168>
 800228e:	2302      	movs	r3, #2
 8002290:	4a27      	ldr	r2, [pc, #156]	; (8002330 <HAL_DMA_IRQHandler+0x208>)
 8002292:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d034      	beq.n	800230e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022ac:	e02f      	b.n	800230e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2208      	movs	r2, #8
 80022b4:	409a      	lsls	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d028      	beq.n	8002310 <HAL_DMA_IRQHandler+0x1e8>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d023      	beq.n	8002310 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 020e 	bic.w	r2, r2, #14
 80022d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	2101      	movs	r1, #1
 80022e2:	fa01 f202 	lsl.w	r2, r1, r2
 80022e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	2b00      	cmp	r3, #0
 8002304:	d004      	beq.n	8002310 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	4798      	blx	r3
    }
  }
  return;
 800230e:	bf00      	nop
 8002310:	bf00      	nop
}
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40020008 	.word	0x40020008
 800231c:	4002001c 	.word	0x4002001c
 8002320:	40020030 	.word	0x40020030
 8002324:	40020044 	.word	0x40020044
 8002328:	40020058 	.word	0x40020058
 800232c:	4002006c 	.word	0x4002006c
 8002330:	40020000 	.word	0x40020000

08002334 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f202 	lsl.w	r2, r1, r2
 8002350:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b10      	cmp	r3, #16
 8002360:	d108      	bne.n	8002374 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002372:	e007      	b.n	8002384 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	60da      	str	r2, [r3, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
	...

08002390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002390:	b480      	push	{r7}
 8002392:	b08b      	sub	sp, #44	; 0x2c
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a2:	e169      	b.n	8002678 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023a4:	2201      	movs	r2, #1
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	429a      	cmp	r2, r3
 80023be:	f040 8158 	bne.w	8002672 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4a9a      	ldr	r2, [pc, #616]	; (8002630 <HAL_GPIO_Init+0x2a0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d05e      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023cc:	4a98      	ldr	r2, [pc, #608]	; (8002630 <HAL_GPIO_Init+0x2a0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d875      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 80023d2:	4a98      	ldr	r2, [pc, #608]	; (8002634 <HAL_GPIO_Init+0x2a4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d058      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023d8:	4a96      	ldr	r2, [pc, #600]	; (8002634 <HAL_GPIO_Init+0x2a4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d86f      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 80023de:	4a96      	ldr	r2, [pc, #600]	; (8002638 <HAL_GPIO_Init+0x2a8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d052      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023e4:	4a94      	ldr	r2, [pc, #592]	; (8002638 <HAL_GPIO_Init+0x2a8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d869      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 80023ea:	4a94      	ldr	r2, [pc, #592]	; (800263c <HAL_GPIO_Init+0x2ac>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d04c      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023f0:	4a92      	ldr	r2, [pc, #584]	; (800263c <HAL_GPIO_Init+0x2ac>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d863      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 80023f6:	4a92      	ldr	r2, [pc, #584]	; (8002640 <HAL_GPIO_Init+0x2b0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d046      	beq.n	800248a <HAL_GPIO_Init+0xfa>
 80023fc:	4a90      	ldr	r2, [pc, #576]	; (8002640 <HAL_GPIO_Init+0x2b0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d85d      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 8002402:	2b12      	cmp	r3, #18
 8002404:	d82a      	bhi.n	800245c <HAL_GPIO_Init+0xcc>
 8002406:	2b12      	cmp	r3, #18
 8002408:	d859      	bhi.n	80024be <HAL_GPIO_Init+0x12e>
 800240a:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <HAL_GPIO_Init+0x80>)
 800240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002410:	0800248b 	.word	0x0800248b
 8002414:	08002465 	.word	0x08002465
 8002418:	08002477 	.word	0x08002477
 800241c:	080024b9 	.word	0x080024b9
 8002420:	080024bf 	.word	0x080024bf
 8002424:	080024bf 	.word	0x080024bf
 8002428:	080024bf 	.word	0x080024bf
 800242c:	080024bf 	.word	0x080024bf
 8002430:	080024bf 	.word	0x080024bf
 8002434:	080024bf 	.word	0x080024bf
 8002438:	080024bf 	.word	0x080024bf
 800243c:	080024bf 	.word	0x080024bf
 8002440:	080024bf 	.word	0x080024bf
 8002444:	080024bf 	.word	0x080024bf
 8002448:	080024bf 	.word	0x080024bf
 800244c:	080024bf 	.word	0x080024bf
 8002450:	080024bf 	.word	0x080024bf
 8002454:	0800246d 	.word	0x0800246d
 8002458:	08002481 	.word	0x08002481
 800245c:	4a79      	ldr	r2, [pc, #484]	; (8002644 <HAL_GPIO_Init+0x2b4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002462:	e02c      	b.n	80024be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	623b      	str	r3, [r7, #32]
          break;
 800246a:	e029      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	3304      	adds	r3, #4
 8002472:	623b      	str	r3, [r7, #32]
          break;
 8002474:	e024      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	3308      	adds	r3, #8
 800247c:	623b      	str	r3, [r7, #32]
          break;
 800247e:	e01f      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	330c      	adds	r3, #12
 8002486:	623b      	str	r3, [r7, #32]
          break;
 8002488:	e01a      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002492:	2304      	movs	r3, #4
 8002494:	623b      	str	r3, [r7, #32]
          break;
 8002496:	e013      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024a0:	2308      	movs	r3, #8
 80024a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	611a      	str	r2, [r3, #16]
          break;
 80024aa:	e009      	b.n	80024c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024ac:	2308      	movs	r3, #8
 80024ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	615a      	str	r2, [r3, #20]
          break;
 80024b6:	e003      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024b8:	2300      	movs	r3, #0
 80024ba:	623b      	str	r3, [r7, #32]
          break;
 80024bc:	e000      	b.n	80024c0 <HAL_GPIO_Init+0x130>
          break;
 80024be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2bff      	cmp	r3, #255	; 0xff
 80024c4:	d801      	bhi.n	80024ca <HAL_GPIO_Init+0x13a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	e001      	b.n	80024ce <HAL_GPIO_Init+0x13e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2bff      	cmp	r3, #255	; 0xff
 80024d4:	d802      	bhi.n	80024dc <HAL_GPIO_Init+0x14c>
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	e002      	b.n	80024e2 <HAL_GPIO_Init+0x152>
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	3b08      	subs	r3, #8
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	210f      	movs	r1, #15
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	6a39      	ldr	r1, [r7, #32]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	431a      	orrs	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80b1 	beq.w	8002672 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002510:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4a4c      	ldr	r2, [pc, #304]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6193      	str	r3, [r2, #24]
 800251c:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002528:	4a48      	ldr	r2, [pc, #288]	; (800264c <HAL_GPIO_Init+0x2bc>)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002534:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a40      	ldr	r2, [pc, #256]	; (8002650 <HAL_GPIO_Init+0x2c0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d013      	beq.n	800257c <HAL_GPIO_Init+0x1ec>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a3f      	ldr	r2, [pc, #252]	; (8002654 <HAL_GPIO_Init+0x2c4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d00d      	beq.n	8002578 <HAL_GPIO_Init+0x1e8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a3e      	ldr	r2, [pc, #248]	; (8002658 <HAL_GPIO_Init+0x2c8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d007      	beq.n	8002574 <HAL_GPIO_Init+0x1e4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a3d      	ldr	r2, [pc, #244]	; (800265c <HAL_GPIO_Init+0x2cc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d101      	bne.n	8002570 <HAL_GPIO_Init+0x1e0>
 800256c:	2303      	movs	r3, #3
 800256e:	e006      	b.n	800257e <HAL_GPIO_Init+0x1ee>
 8002570:	2304      	movs	r3, #4
 8002572:	e004      	b.n	800257e <HAL_GPIO_Init+0x1ee>
 8002574:	2302      	movs	r3, #2
 8002576:	e002      	b.n	800257e <HAL_GPIO_Init+0x1ee>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_GPIO_Init+0x1ee>
 800257c:	2300      	movs	r3, #0
 800257e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002580:	f002 0203 	and.w	r2, r2, #3
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	4093      	lsls	r3, r2
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800258e:	492f      	ldr	r1, [pc, #188]	; (800264c <HAL_GPIO_Init+0x2bc>)
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	492c      	ldr	r1, [pc, #176]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]
 80025b4:	e006      	b.n	80025c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	43db      	mvns	r3, r3
 80025be:	4928      	ldr	r1, [pc, #160]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025d0:	4b23      	ldr	r3, [pc, #140]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	4922      	ldr	r1, [pc, #136]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60cb      	str	r3, [r1, #12]
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	491e      	ldr	r1, [pc, #120]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d006      	beq.n	8002606 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	4918      	ldr	r1, [pc, #96]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002606:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	43db      	mvns	r3, r3
 800260e:	4914      	ldr	r1, [pc, #80]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 8002610:	4013      	ands	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d021      	beq.n	8002664 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	490e      	ldr	r1, [pc, #56]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]
 800262c:	e021      	b.n	8002672 <HAL_GPIO_Init+0x2e2>
 800262e:	bf00      	nop
 8002630:	10320000 	.word	0x10320000
 8002634:	10310000 	.word	0x10310000
 8002638:	10220000 	.word	0x10220000
 800263c:	10210000 	.word	0x10210000
 8002640:	10120000 	.word	0x10120000
 8002644:	10110000 	.word	0x10110000
 8002648:	40021000 	.word	0x40021000
 800264c:	40010000 	.word	0x40010000
 8002650:	40010800 	.word	0x40010800
 8002654:	40010c00 	.word	0x40010c00
 8002658:	40011000 	.word	0x40011000
 800265c:	40011400 	.word	0x40011400
 8002660:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	43db      	mvns	r3, r3
 800266c:	4909      	ldr	r1, [pc, #36]	; (8002694 <HAL_GPIO_Init+0x304>)
 800266e:	4013      	ands	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	3301      	adds	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	f47f ae8e 	bne.w	80023a4 <HAL_GPIO_Init+0x14>
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	372c      	adds	r7, #44	; 0x2c
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	40010400 	.word	0x40010400

08002698 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	887b      	ldrh	r3, [r7, #2]
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
 80026b4:	e001      	b.n	80026ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	807b      	strh	r3, [r7, #2]
 80026d2:	4613      	mov	r3, r2
 80026d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d6:	787b      	ldrb	r3, [r7, #1]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026dc:	887a      	ldrh	r2, [r7, #2]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026e2:	e003      	b.n	80026ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026e4:	887b      	ldrh	r3, [r7, #2]
 80026e6:	041a      	lsls	r2, r3, #16
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	611a      	str	r2, [r3, #16]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
	...

080026f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e12b      	b.n	8002962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe ffa8 	bl	8001674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	; 0x24
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800274a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800275a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800275c:	f001 f832 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 8002760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4a81      	ldr	r2, [pc, #516]	; (800296c <HAL_I2C_Init+0x274>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d807      	bhi.n	800277c <HAL_I2C_Init+0x84>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4a80      	ldr	r2, [pc, #512]	; (8002970 <HAL_I2C_Init+0x278>)
 8002770:	4293      	cmp	r3, r2
 8002772:	bf94      	ite	ls
 8002774:	2301      	movls	r3, #1
 8002776:	2300      	movhi	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	e006      	b.n	800278a <HAL_I2C_Init+0x92>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a7d      	ldr	r2, [pc, #500]	; (8002974 <HAL_I2C_Init+0x27c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	bf94      	ite	ls
 8002784:	2301      	movls	r3, #1
 8002786:	2300      	movhi	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e0e7      	b.n	8002962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4a78      	ldr	r2, [pc, #480]	; (8002978 <HAL_I2C_Init+0x280>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	0c9b      	lsrs	r3, r3, #18
 800279c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a6a      	ldr	r2, [pc, #424]	; (800296c <HAL_I2C_Init+0x274>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d802      	bhi.n	80027cc <HAL_I2C_Init+0xd4>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3301      	adds	r3, #1
 80027ca:	e009      	b.n	80027e0 <HAL_I2C_Init+0xe8>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	4a69      	ldr	r2, [pc, #420]	; (800297c <HAL_I2C_Init+0x284>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	3301      	adds	r3, #1
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	430b      	orrs	r3, r1
 80027e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	495c      	ldr	r1, [pc, #368]	; (800296c <HAL_I2C_Init+0x274>)
 80027fc:	428b      	cmp	r3, r1
 80027fe:	d819      	bhi.n	8002834 <HAL_I2C_Init+0x13c>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1e59      	subs	r1, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fbb1 f3f3 	udiv	r3, r1, r3
 800280e:	1c59      	adds	r1, r3, #1
 8002810:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002814:	400b      	ands	r3, r1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_I2C_Init+0x138>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1e59      	subs	r1, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fbb1 f3f3 	udiv	r3, r1, r3
 8002828:	3301      	adds	r3, #1
 800282a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282e:	e051      	b.n	80028d4 <HAL_I2C_Init+0x1dc>
 8002830:	2304      	movs	r3, #4
 8002832:	e04f      	b.n	80028d4 <HAL_I2C_Init+0x1dc>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d111      	bne.n	8002860 <HAL_I2C_Init+0x168>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1e58      	subs	r0, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	440b      	add	r3, r1
 800284a:	fbb0 f3f3 	udiv	r3, r0, r3
 800284e:	3301      	adds	r3, #1
 8002850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e012      	b.n	8002886 <HAL_I2C_Init+0x18e>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e58      	subs	r0, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	0099      	lsls	r1, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	fbb0 f3f3 	udiv	r3, r0, r3
 8002876:	3301      	adds	r3, #1
 8002878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_Init+0x196>
 800288a:	2301      	movs	r3, #1
 800288c:	e022      	b.n	80028d4 <HAL_I2C_Init+0x1dc>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10e      	bne.n	80028b4 <HAL_I2C_Init+0x1bc>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1e58      	subs	r0, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	440b      	add	r3, r1
 80028a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a8:	3301      	adds	r3, #1
 80028aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b2:	e00f      	b.n	80028d4 <HAL_I2C_Init+0x1dc>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	0099      	lsls	r1, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	6809      	ldr	r1, [r1, #0]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69da      	ldr	r2, [r3, #28]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6911      	ldr	r1, [r2, #16]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68d2      	ldr	r2, [r2, #12]
 800290e:	4311      	orrs	r1, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	430b      	orrs	r3, r1
 8002916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	000186a0 	.word	0x000186a0
 8002970:	001e847f 	.word	0x001e847f
 8002974:	003d08ff 	.word	0x003d08ff
 8002978:	431bde83 	.word	0x431bde83
 800297c:	10624dd3 	.word	0x10624dd3

08002980 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	461a      	mov	r2, r3
 800298c:	460b      	mov	r3, r1
 800298e:	817b      	strh	r3, [r7, #10]
 8002990:	4613      	mov	r3, r2
 8002992:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff f91e 	bl	8001bd4 <HAL_GetTick>
 8002998:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	f040 80e0 	bne.w	8002b68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2319      	movs	r3, #25
 80029ae:	2201      	movs	r2, #1
 80029b0:	4970      	ldr	r1, [pc, #448]	; (8002b74 <HAL_I2C_Master_Transmit+0x1f4>)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f964 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	e0d3      	b.n	8002b6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_I2C_Master_Transmit+0x50>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e0cc      	b.n	8002b6a <HAL_I2C_Master_Transmit+0x1ea>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d007      	beq.n	80029f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2221      	movs	r2, #33	; 0x21
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2210      	movs	r2, #16
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	893a      	ldrh	r2, [r7, #8]
 8002a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4a50      	ldr	r2, [pc, #320]	; (8002b78 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a38:	8979      	ldrh	r1, [r7, #10]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	6a3a      	ldr	r2, [r7, #32]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f89c 	bl	8002b7c <I2C_MasterRequestWrite>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e08d      	b.n	8002b6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a64:	e066      	b.n	8002b34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	6a39      	ldr	r1, [r7, #32]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fa22 	bl	8002eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d107      	bne.n	8002a8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e06b      	b.n	8002b6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	781a      	ldrb	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d11b      	bne.n	8002b08 <HAL_I2C_Master_Transmit+0x188>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d017      	beq.n	8002b08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	6a39      	ldr	r1, [r7, #32]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 fa19 	bl	8002f44 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00d      	beq.n	8002b34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d107      	bne.n	8002b30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e01a      	b.n	8002b6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d194      	bne.n	8002a66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	e000      	b.n	8002b6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b68:	2302      	movs	r3, #2
  }
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	00100002 	.word	0x00100002
 8002b78:	ffff0000 	.word	0xffff0000

08002b7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d006      	beq.n	8002ba6 <I2C_MasterRequestWrite+0x2a>
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d003      	beq.n	8002ba6 <I2C_MasterRequestWrite+0x2a>
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ba4:	d108      	bne.n	8002bb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	e00b      	b.n	8002bd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	2b12      	cmp	r3, #18
 8002bbe:	d107      	bne.n	8002bd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f84f 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00d      	beq.n	8002c04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf6:	d103      	bne.n	8002c00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e035      	b.n	8002c70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c0c:	d108      	bne.n	8002c20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c0e:	897b      	ldrh	r3, [r7, #10]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c1c:	611a      	str	r2, [r3, #16]
 8002c1e:	e01b      	b.n	8002c58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c20:	897b      	ldrh	r3, [r7, #10]
 8002c22:	11db      	asrs	r3, r3, #7
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f003 0306 	and.w	r3, r3, #6
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f063 030f 	orn	r3, r3, #15
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	490e      	ldr	r1, [pc, #56]	; (8002c78 <I2C_MasterRequestWrite+0xfc>)
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f898 	bl	8002d74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e010      	b.n	8002c70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c4e:	897b      	ldrh	r3, [r7, #10]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4907      	ldr	r1, [pc, #28]	; (8002c7c <I2C_MasterRequestWrite+0x100>)
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f888 	bl	8002d74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	00010008 	.word	0x00010008
 8002c7c:	00010002 	.word	0x00010002

08002c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c90:	e048      	b.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d044      	beq.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9a:	f7fe ff9b 	bl	8001bd4 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d139      	bne.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d10d      	bne.n	8002cd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	e00c      	b.n	8002cf0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	43da      	mvns	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d116      	bne.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e023      	b.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	0c1b      	lsrs	r3, r3, #16
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10d      	bne.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	43da      	mvns	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	e00c      	b.n	8002d64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	43da      	mvns	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	4013      	ands	r3, r2
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d093      	beq.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d82:	e071      	b.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d123      	bne.n	8002ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f043 0204 	orr.w	r2, r3, #4
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e067      	b.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d041      	beq.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de4:	f7fe fef6 	bl	8001bd4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d302      	bcc.n	8002dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d136      	bne.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d10c      	bne.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	bf14      	ite	ne
 8002e16:	2301      	movne	r3, #1
 8002e18:	2300      	moveq	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	e00b      	b.n	8002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	43da      	mvns	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d016      	beq.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e021      	b.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d10c      	bne.n	8002e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	43da      	mvns	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e00b      	b.n	8002ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	43da      	mvns	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4013      	ands	r3, r2
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bf14      	ite	ne
 8002e9e:	2301      	movne	r3, #1
 8002ea0:	2300      	moveq	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f47f af6d 	bne.w	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ec0:	e034      	b.n	8002f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f886 	bl	8002fd4 <I2C_IsAcknowledgeFailed>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e034      	b.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d028      	beq.n	8002f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7fe fe7b 	bl	8001bd4 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d11d      	bne.n	8002f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	2b80      	cmp	r3, #128	; 0x80
 8002efc:	d016      	beq.n	8002f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e007      	b.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d1c3      	bne.n	8002ec2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f50:	e034      	b.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f83e 	bl	8002fd4 <I2C_IsAcknowledgeFailed>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e034      	b.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d028      	beq.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6a:	f7fe fe33 	bl	8001bd4 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d11d      	bne.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d016      	beq.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f043 0220 	orr.w	r2, r3, #32
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e007      	b.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d1c3      	bne.n	8002f52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fea:	d11b      	bne.n	8003024 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ff4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f043 0204 	orr.w	r2, r3, #4
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e272      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 8087 	beq.w	800315e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003050:	4b92      	ldr	r3, [pc, #584]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b04      	cmp	r3, #4
 800305a:	d00c      	beq.n	8003076 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800305c:	4b8f      	ldr	r3, [pc, #572]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b08      	cmp	r3, #8
 8003066:	d112      	bne.n	800308e <HAL_RCC_OscConfig+0x5e>
 8003068:	4b8c      	ldr	r3, [pc, #560]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003074:	d10b      	bne.n	800308e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003076:	4b89      	ldr	r3, [pc, #548]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d06c      	beq.n	800315c <HAL_RCC_OscConfig+0x12c>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d168      	bne.n	800315c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e24c      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_OscConfig+0x76>
 8003098:	4b80      	ldr	r3, [pc, #512]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a7f      	ldr	r2, [pc, #508]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 800309e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	e02e      	b.n	8003104 <HAL_RCC_OscConfig+0xd4>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x98>
 80030ae:	4b7b      	ldr	r3, [pc, #492]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a7a      	ldr	r2, [pc, #488]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80030b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b78      	ldr	r3, [pc, #480]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a77      	ldr	r2, [pc, #476]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80030c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e01d      	b.n	8003104 <HAL_RCC_OscConfig+0xd4>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0xbc>
 80030d2:	4b72      	ldr	r3, [pc, #456]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a71      	ldr	r2, [pc, #452]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80030d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b6f      	ldr	r3, [pc, #444]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6e      	ldr	r2, [pc, #440]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80030e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e00b      	b.n	8003104 <HAL_RCC_OscConfig+0xd4>
 80030ec:	4b6b      	ldr	r3, [pc, #428]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a6a      	ldr	r2, [pc, #424]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80030f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	4b68      	ldr	r3, [pc, #416]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a67      	ldr	r2, [pc, #412]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80030fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003102:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d013      	beq.n	8003134 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe fd62 	bl	8001bd4 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003114:	f7fe fd5e 	bl	8001bd4 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	; 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e200      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	4b5d      	ldr	r3, [pc, #372]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0xe4>
 8003132:	e014      	b.n	800315e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fe fd4e 	bl	8001bd4 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800313c:	f7fe fd4a 	bl	8001bd4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	; 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e1ec      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314e:	4b53      	ldr	r3, [pc, #332]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x10c>
 800315a:	e000      	b.n	800315e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d063      	beq.n	8003232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800316a:	4b4c      	ldr	r3, [pc, #304]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00b      	beq.n	800318e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003176:	4b49      	ldr	r3, [pc, #292]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b08      	cmp	r3, #8
 8003180:	d11c      	bne.n	80031bc <HAL_RCC_OscConfig+0x18c>
 8003182:	4b46      	ldr	r3, [pc, #280]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d116      	bne.n	80031bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318e:	4b43      	ldr	r3, [pc, #268]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_RCC_OscConfig+0x176>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e1c0      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a6:	4b3d      	ldr	r3, [pc, #244]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4939      	ldr	r1, [pc, #228]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ba:	e03a      	b.n	8003232 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d020      	beq.n	8003206 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c4:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fe fd03 	bl	8001bd4 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d2:	f7fe fcff 	bl	8001bd4 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e1a1      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e4:	4b2d      	ldr	r3, [pc, #180]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f0:	4b2a      	ldr	r3, [pc, #168]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4927      	ldr	r1, [pc, #156]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]
 8003204:	e015      	b.n	8003232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fe fce2 	bl	8001bd4 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003214:	f7fe fcde 	bl	8001bd4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e180      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d03a      	beq.n	80032b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d019      	beq.n	800327a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003246:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <HAL_RCC_OscConfig+0x274>)
 8003248:	2201      	movs	r2, #1
 800324a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324c:	f7fe fcc2 	bl	8001bd4 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003254:	f7fe fcbe 	bl	8001bd4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e160      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <HAL_RCC_OscConfig+0x26c>)
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003272:	2001      	movs	r0, #1
 8003274:	f000 face 	bl	8003814 <RCC_Delay>
 8003278:	e01c      	b.n	80032b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327a:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <HAL_RCC_OscConfig+0x274>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003280:	f7fe fca8 	bl	8001bd4 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003286:	e00f      	b.n	80032a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003288:	f7fe fca4 	bl	8001bd4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d908      	bls.n	80032a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e146      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000
 80032a0:	42420000 	.word	0x42420000
 80032a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a8:	4b92      	ldr	r3, [pc, #584]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e9      	bne.n	8003288 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80a6 	beq.w	800340e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c6:	4b8b      	ldr	r3, [pc, #556]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10d      	bne.n	80032ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d2:	4b88      	ldr	r3, [pc, #544]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	4a87      	ldr	r2, [pc, #540]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032dc:	61d3      	str	r3, [r2, #28]
 80032de:	4b85      	ldr	r3, [pc, #532]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ea:	2301      	movs	r3, #1
 80032ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ee:	4b82      	ldr	r3, [pc, #520]	; (80034f8 <HAL_RCC_OscConfig+0x4c8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d118      	bne.n	800332c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fa:	4b7f      	ldr	r3, [pc, #508]	; (80034f8 <HAL_RCC_OscConfig+0x4c8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a7e      	ldr	r2, [pc, #504]	; (80034f8 <HAL_RCC_OscConfig+0x4c8>)
 8003300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003306:	f7fe fc65 	bl	8001bd4 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330e:	f7fe fc61 	bl	8001bd4 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b64      	cmp	r3, #100	; 0x64
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e103      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003320:	4b75      	ldr	r3, [pc, #468]	; (80034f8 <HAL_RCC_OscConfig+0x4c8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d106      	bne.n	8003342 <HAL_RCC_OscConfig+0x312>
 8003334:	4b6f      	ldr	r3, [pc, #444]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4a6e      	ldr	r2, [pc, #440]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6213      	str	r3, [r2, #32]
 8003340:	e02d      	b.n	800339e <HAL_RCC_OscConfig+0x36e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0x334>
 800334a:	4b6a      	ldr	r3, [pc, #424]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	4a69      	ldr	r2, [pc, #420]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	6213      	str	r3, [r2, #32]
 8003356:	4b67      	ldr	r3, [pc, #412]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	4a66      	ldr	r2, [pc, #408]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	f023 0304 	bic.w	r3, r3, #4
 8003360:	6213      	str	r3, [r2, #32]
 8003362:	e01c      	b.n	800339e <HAL_RCC_OscConfig+0x36e>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b05      	cmp	r3, #5
 800336a:	d10c      	bne.n	8003386 <HAL_RCC_OscConfig+0x356>
 800336c:	4b61      	ldr	r3, [pc, #388]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	4a60      	ldr	r2, [pc, #384]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 8003372:	f043 0304 	orr.w	r3, r3, #4
 8003376:	6213      	str	r3, [r2, #32]
 8003378:	4b5e      	ldr	r3, [pc, #376]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4a5d      	ldr	r2, [pc, #372]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6213      	str	r3, [r2, #32]
 8003384:	e00b      	b.n	800339e <HAL_RCC_OscConfig+0x36e>
 8003386:	4b5b      	ldr	r3, [pc, #364]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	4a5a      	ldr	r2, [pc, #360]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	f023 0301 	bic.w	r3, r3, #1
 8003390:	6213      	str	r3, [r2, #32]
 8003392:	4b58      	ldr	r3, [pc, #352]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4a57      	ldr	r2, [pc, #348]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	f023 0304 	bic.w	r3, r3, #4
 800339c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d015      	beq.n	80033d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a6:	f7fe fc15 	bl	8001bd4 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fe fc11 	bl	8001bd4 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e0b1      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c4:	4b4b      	ldr	r3, [pc, #300]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0ee      	beq.n	80033ae <HAL_RCC_OscConfig+0x37e>
 80033d0:	e014      	b.n	80033fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d2:	f7fe fbff 	bl	8001bd4 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fe fbfb 	bl	8001bd4 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e09b      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f0:	4b40      	ldr	r3, [pc, #256]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ee      	bne.n	80033da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d105      	bne.n	800340e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003402:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	4a3b      	ldr	r2, [pc, #236]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 8003408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800340c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8087 	beq.w	8003526 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	2b08      	cmp	r3, #8
 8003422:	d061      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d146      	bne.n	80034ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342c:	4b33      	ldr	r3, [pc, #204]	; (80034fc <HAL_RCC_OscConfig+0x4cc>)
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003432:	f7fe fbcf 	bl	8001bd4 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343a:	f7fe fbcb 	bl	8001bd4 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e06d      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344c:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f0      	bne.n	800343a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003460:	d108      	bne.n	8003474 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003462:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	4921      	ldr	r1, [pc, #132]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003474:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a19      	ldr	r1, [r3, #32]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	430b      	orrs	r3, r1
 8003486:	491b      	ldr	r1, [pc, #108]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 8003488:	4313      	orrs	r3, r2
 800348a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800348c:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_RCC_OscConfig+0x4cc>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003492:	f7fe fb9f 	bl	8001bd4 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349a:	f7fe fb9b 	bl	8001bd4 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e03d      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x46a>
 80034b8:	e035      	b.n	8003526 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <HAL_RCC_OscConfig+0x4cc>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe fb88 	bl	8001bd4 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe fb84 	bl	8001bd4 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e026      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x498>
 80034e6:	e01e      	b.n	8003526 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d107      	bne.n	8003500 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e019      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40007000 	.word	0x40007000
 80034fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_OscConfig+0x500>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	429a      	cmp	r2, r3
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d001      	beq.n	8003526 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000

08003534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0d0      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003548:	4b6a      	ldr	r3, [pc, #424]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d910      	bls.n	8003578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b67      	ldr	r3, [pc, #412]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 0207 	bic.w	r2, r3, #7
 800355e:	4965      	ldr	r1, [pc, #404]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	4b63      	ldr	r3, [pc, #396]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0b8      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d020      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003590:	4b59      	ldr	r3, [pc, #356]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4a58      	ldr	r2, [pc, #352]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800359a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a8:	4b53      	ldr	r3, [pc, #332]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a52      	ldr	r2, [pc, #328]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b4:	4b50      	ldr	r3, [pc, #320]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	494d      	ldr	r1, [pc, #308]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d040      	beq.n	8003654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b47      	ldr	r3, [pc, #284]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d115      	bne.n	8003612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e07f      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d107      	bne.n	8003602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f2:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e073      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003602:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e06b      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003612:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4936      	ldr	r1, [pc, #216]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003624:	f7fe fad6 	bl	8001bd4 <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	e00a      	b.n	8003642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362c:	f7fe fad2 	bl	8001bd4 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e053      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 020c 	and.w	r2, r3, #12
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	429a      	cmp	r2, r3
 8003652:	d1eb      	bne.n	800362c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003654:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d210      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0207 	bic.w	r2, r3, #7
 800366a:	4922      	ldr	r1, [pc, #136]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e032      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003690:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4916      	ldr	r1, [pc, #88]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	490e      	ldr	r1, [pc, #56]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036c2:	f000 f821 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 80036c6:	4602      	mov	r2, r0
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	490a      	ldr	r1, [pc, #40]	; (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	5ccb      	ldrb	r3, [r1, r3]
 80036d6:	fa22 f303 	lsr.w	r3, r2, r3
 80036da:	4a09      	ldr	r2, [pc, #36]	; (8003700 <HAL_RCC_ClockConfig+0x1cc>)
 80036dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1d0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe fa34 	bl	8001b50 <HAL_InitTick>

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40022000 	.word	0x40022000
 80036f8:	40021000 	.word	0x40021000
 80036fc:	08006874 	.word	0x08006874
 8003700:	20000000 	.word	0x20000000
 8003704:	20000004 	.word	0x20000004

08003708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	2300      	movs	r3, #0
 800371c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003722:	4b1e      	ldr	r3, [pc, #120]	; (800379c <HAL_RCC_GetSysClockFreq+0x94>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	2b04      	cmp	r3, #4
 8003730:	d002      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0x30>
 8003732:	2b08      	cmp	r3, #8
 8003734:	d003      	beq.n	800373e <HAL_RCC_GetSysClockFreq+0x36>
 8003736:	e027      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800373a:	613b      	str	r3, [r7, #16]
      break;
 800373c:	e027      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	0c9b      	lsrs	r3, r3, #18
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003748:	5cd3      	ldrb	r3, [r2, r3]
 800374a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d010      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003756:	4b11      	ldr	r3, [pc, #68]	; (800379c <HAL_RCC_GetSysClockFreq+0x94>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	0c5b      	lsrs	r3, r3, #17
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	4a11      	ldr	r2, [pc, #68]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a0d      	ldr	r2, [pc, #52]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800376a:	fb03 f202 	mul.w	r2, r3, r2
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e004      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a0c      	ldr	r2, [pc, #48]	; (80037ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800377c:	fb02 f303 	mul.w	r3, r2, r3
 8003780:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	613b      	str	r3, [r7, #16]
      break;
 8003786:	e002      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800378a:	613b      	str	r3, [r7, #16]
      break;
 800378c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378e:	693b      	ldr	r3, [r7, #16]
}
 8003790:	4618      	mov	r0, r3
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
 80037a0:	007a1200 	.word	0x007a1200
 80037a4:	0800688c 	.word	0x0800688c
 80037a8:	0800689c 	.word	0x0800689c
 80037ac:	003d0900 	.word	0x003d0900

080037b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b4:	4b02      	ldr	r3, [pc, #8]	; (80037c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	20000000 	.word	0x20000000

080037c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037c8:	f7ff fff2 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	4903      	ldr	r1, [pc, #12]	; (80037e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037da:	5ccb      	ldrb	r3, [r1, r3]
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	08006884 	.word	0x08006884

080037ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037f0:	f7ff ffde 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	0adb      	lsrs	r3, r3, #11
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4903      	ldr	r1, [pc, #12]	; (8003810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	08006884 	.word	0x08006884

08003814 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <RCC_Delay+0x34>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0a      	ldr	r2, [pc, #40]	; (800384c <RCC_Delay+0x38>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	0a5b      	lsrs	r3, r3, #9
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003830:	bf00      	nop
  }
  while (Delay --);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1e5a      	subs	r2, r3, #1
 8003836:	60fa      	str	r2, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1f9      	bne.n	8003830 <RCC_Delay+0x1c>
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	20000000 	.word	0x20000000
 800384c:	10624dd3 	.word	0x10624dd3

08003850 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e076      	b.n	8003950 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	d108      	bne.n	800387c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003872:	d009      	beq.n	8003888 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	61da      	str	r2, [r3, #28]
 800387a:	e005      	b.n	8003888 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd ff52 	bl	800174c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	ea42 0103 	orr.w	r1, r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	0c1a      	lsrs	r2, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f002 0204 	and.w	r2, r2, #4
 800392e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800393e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08c      	sub	sp, #48	; 0x30
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003966:	2301      	movs	r3, #1
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_SPI_TransmitReceive+0x26>
 800397a:	2302      	movs	r3, #2
 800397c:	e198      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x358>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003986:	f7fe f925 	bl	8001bd4 <HAL_GetTick>
 800398a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800399c:	887b      	ldrh	r3, [r7, #2]
 800399e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d00f      	beq.n	80039c8 <HAL_SPI_TransmitReceive+0x70>
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ae:	d107      	bne.n	80039c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d103      	bne.n	80039c0 <HAL_SPI_TransmitReceive+0x68>
 80039b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d003      	beq.n	80039c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
 80039c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039c6:	e16d      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_SPI_TransmitReceive+0x82>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_SPI_TransmitReceive+0x82>
 80039d4:	887b      	ldrh	r3, [r7, #2]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d103      	bne.n	80039e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039e0:	e160      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d003      	beq.n	80039f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2205      	movs	r2, #5
 80039f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	887a      	ldrh	r2, [r7, #2]
 8003a06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	887a      	ldrh	r2, [r7, #2]
 8003a0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	887a      	ldrh	r2, [r7, #2]
 8003a1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	d007      	beq.n	8003a4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a52:	d17c      	bne.n	8003b4e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_SPI_TransmitReceive+0x10a>
 8003a5c:	8b7b      	ldrh	r3, [r7, #26]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d16a      	bne.n	8003b38 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	881a      	ldrh	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	1c9a      	adds	r2, r3, #2
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a86:	e057      	b.n	8003b38 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d11b      	bne.n	8003ace <HAL_SPI_TransmitReceive+0x176>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d016      	beq.n	8003ace <HAL_SPI_TransmitReceive+0x176>
 8003aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d113      	bne.n	8003ace <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	881a      	ldrh	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	1c9a      	adds	r2, r3, #2
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d119      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x1b8>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d014      	beq.n	8003b10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	b292      	uxth	r2, r2
 8003af2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b10:	f7fe f860 	bl	8001bd4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d80b      	bhi.n	8003b38 <HAL_SPI_TransmitReceive+0x1e0>
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d007      	beq.n	8003b38 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003b36:	e0b5      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1a2      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x130>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d19d      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x130>
 8003b4c:	e080      	b.n	8003c50 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_SPI_TransmitReceive+0x204>
 8003b56:	8b7b      	ldrh	r3, [r7, #26]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d16f      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	330c      	adds	r3, #12
 8003b66:	7812      	ldrb	r2, [r2, #0]
 8003b68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b82:	e05b      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d11c      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x274>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d017      	beq.n	8003bcc <HAL_SPI_TransmitReceive+0x274>
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d114      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	7812      	ldrb	r2, [r2, #0]
 8003bae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d119      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x2b6>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d014      	beq.n	8003c0e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c0e:	f7fd ffe1 	bl	8001bd4 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d803      	bhi.n	8003c26 <HAL_SPI_TransmitReceive+0x2ce>
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d102      	bne.n	8003c2c <HAL_SPI_TransmitReceive+0x2d4>
 8003c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003c3a:	e033      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d19e      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x22c>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d199      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f8b7 	bl	8003dc8 <SPI_EndRxTxTransaction>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d006      	beq.n	8003c6e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c6c:	e01a      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9a:	e003      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3730      	adds	r7, #48	; 0x30
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cc8:	f7fd ff84 	bl	8001bd4 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cd8:	f7fd ff7c 	bl	8001bd4 <HAL_GetTick>
 8003cdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cde:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	015b      	lsls	r3, r3, #5
 8003ce4:	0d1b      	lsrs	r3, r3, #20
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cee:	e054      	b.n	8003d9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf6:	d050      	beq.n	8003d9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cf8:	f7fd ff6c 	bl	8001bd4 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d902      	bls.n	8003d0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d13d      	bne.n	8003d8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d26:	d111      	bne.n	8003d4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d30:	d004      	beq.n	8003d3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3a:	d107      	bne.n	8003d4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d54:	d10f      	bne.n	8003d76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e017      	b.n	8003dba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4013      	ands	r3, r2
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	bf0c      	ite	eq
 8003daa:	2301      	moveq	r3, #1
 8003dac:	2300      	movne	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d19b      	bne.n	8003cf0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000000 	.word	0x20000000

08003dc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2180      	movs	r1, #128	; 0x80
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7ff ff6a 	bl	8003cb8 <SPI_WaitFlagStateUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	f043 0220 	orr.w	r2, r3, #32
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e000      	b.n	8003dfc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e041      	b.n	8003e9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fd fcd8 	bl	80017e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f000 fc38 	bl	80046b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d001      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e03a      	b.n	8003f32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a18      	ldr	r2, [pc, #96]	; (8003f3c <HAL_TIM_Base_Start_IT+0x98>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x58>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d009      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x58>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <HAL_TIM_Base_Start_IT+0x9c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x58>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d111      	bne.n	8003f20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b06      	cmp	r3, #6
 8003f0c:	d010      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0201 	orr.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	e007      	b.n	8003f30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800

08003f48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e041      	b.n	8003fde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f839 	bl	8003fe6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3304      	adds	r3, #4
 8003f84:	4619      	mov	r1, r3
 8003f86:	4610      	mov	r0, r2
 8003f88:	f000 fb96 	bl	80046b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <HAL_TIM_PWM_Start+0x24>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	bf14      	ite	ne
 8004014:	2301      	movne	r3, #1
 8004016:	2300      	moveq	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	e022      	b.n	8004062 <HAL_TIM_PWM_Start+0x6a>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b04      	cmp	r3, #4
 8004020:	d109      	bne.n	8004036 <HAL_TIM_PWM_Start+0x3e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b01      	cmp	r3, #1
 800402c:	bf14      	ite	ne
 800402e:	2301      	movne	r3, #1
 8004030:	2300      	moveq	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	e015      	b.n	8004062 <HAL_TIM_PWM_Start+0x6a>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b08      	cmp	r3, #8
 800403a:	d109      	bne.n	8004050 <HAL_TIM_PWM_Start+0x58>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	bf14      	ite	ne
 8004048:	2301      	movne	r3, #1
 800404a:	2300      	moveq	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e008      	b.n	8004062 <HAL_TIM_PWM_Start+0x6a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	bf14      	ite	ne
 800405c:	2301      	movne	r3, #1
 800405e:	2300      	moveq	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e05e      	b.n	8004128 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d104      	bne.n	800407a <HAL_TIM_PWM_Start+0x82>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004078:	e013      	b.n	80040a2 <HAL_TIM_PWM_Start+0xaa>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b04      	cmp	r3, #4
 800407e:	d104      	bne.n	800408a <HAL_TIM_PWM_Start+0x92>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004088:	e00b      	b.n	80040a2 <HAL_TIM_PWM_Start+0xaa>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d104      	bne.n	800409a <HAL_TIM_PWM_Start+0xa2>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004098:	e003      	b.n	80040a2 <HAL_TIM_PWM_Start+0xaa>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2201      	movs	r2, #1
 80040a8:	6839      	ldr	r1, [r7, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fd84 	bl	8004bb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1e      	ldr	r2, [pc, #120]	; (8004130 <HAL_TIM_PWM_Start+0x138>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d107      	bne.n	80040ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_TIM_PWM_Start+0x138>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_TIM_PWM_Start+0xfa>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040dc:	d009      	beq.n	80040f2 <HAL_TIM_PWM_Start+0xfa>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a14      	ldr	r2, [pc, #80]	; (8004134 <HAL_TIM_PWM_Start+0x13c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_TIM_PWM_Start+0xfa>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a12      	ldr	r2, [pc, #72]	; (8004138 <HAL_TIM_PWM_Start+0x140>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d111      	bne.n	8004116 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b06      	cmp	r3, #6
 8004102:	d010      	beq.n	8004126 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004114:	e007      	b.n	8004126 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800

0800413c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b02      	cmp	r3, #2
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0202 	mvn.w	r2, #2
 8004168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fa7f 	bl	8004682 <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fa72 	bl	8004670 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fa81 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d122      	bne.n	80041ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d11b      	bne.n	80041ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0204 	mvn.w	r2, #4
 80041bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fa55 	bl	8004682 <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fa48 	bl	8004670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fa57 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d122      	bne.n	8004240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d11b      	bne.n	8004240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0208 	mvn.w	r2, #8
 8004210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2204      	movs	r2, #4
 8004216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa2b 	bl	8004682 <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa1e 	bl	8004670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fa2d 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b10      	cmp	r3, #16
 800424c:	d122      	bne.n	8004294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b10      	cmp	r3, #16
 800425a:	d11b      	bne.n	8004294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0210 	mvn.w	r2, #16
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2208      	movs	r2, #8
 800426a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa01 	bl	8004682 <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f9f4 	bl	8004670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fa03 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d10e      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d107      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0201 	mvn.w	r2, #1
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f9cf 	bl	800465e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b80      	cmp	r3, #128	; 0x80
 80042cc:	d10e      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d8:	2b80      	cmp	r3, #128	; 0x80
 80042da:	d107      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fd42 	bl	8004d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d10e      	bne.n	8004318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d107      	bne.n	8004318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f9c7 	bl	80046a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b20      	cmp	r3, #32
 8004324:	d10e      	bne.n	8004344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b20      	cmp	r3, #32
 8004332:	d107      	bne.n	8004344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0220 	mvn.w	r2, #32
 800433c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fd0d 	bl	8004d5e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004366:	2302      	movs	r3, #2
 8004368:	e0ae      	b.n	80044c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b0c      	cmp	r3, #12
 8004376:	f200 809f 	bhi.w	80044b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800437a:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004380:	080043b5 	.word	0x080043b5
 8004384:	080044b9 	.word	0x080044b9
 8004388:	080044b9 	.word	0x080044b9
 800438c:	080044b9 	.word	0x080044b9
 8004390:	080043f5 	.word	0x080043f5
 8004394:	080044b9 	.word	0x080044b9
 8004398:	080044b9 	.word	0x080044b9
 800439c:	080044b9 	.word	0x080044b9
 80043a0:	08004437 	.word	0x08004437
 80043a4:	080044b9 	.word	0x080044b9
 80043a8:	080044b9 	.word	0x080044b9
 80043ac:	080044b9 	.word	0x080044b9
 80043b0:	08004477 	.word	0x08004477
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 f9de 	bl	800477c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0208 	orr.w	r2, r2, #8
 80043ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0204 	bic.w	r2, r2, #4
 80043de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6999      	ldr	r1, [r3, #24]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	619a      	str	r2, [r3, #24]
      break;
 80043f2:	e064      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fa24 	bl	8004848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800440e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6999      	ldr	r1, [r3, #24]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	021a      	lsls	r2, r3, #8
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	619a      	str	r2, [r3, #24]
      break;
 8004434:	e043      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fa6d 	bl	800491c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0208 	orr.w	r2, r2, #8
 8004450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0204 	bic.w	r2, r2, #4
 8004460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69d9      	ldr	r1, [r3, #28]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	61da      	str	r2, [r3, #28]
      break;
 8004474:	e023      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fab7 	bl	80049f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69d9      	ldr	r1, [r3, #28]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	021a      	lsls	r2, r3, #8
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	61da      	str	r2, [r3, #28]
      break;
 80044b6:	e002      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75fb      	strb	r3, [r7, #23]
      break;
 80044bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_TIM_ConfigClockSource+0x1c>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e0b4      	b.n	8004656 <HAL_TIM_ConfigClockSource+0x186>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800450a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004512:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004524:	d03e      	beq.n	80045a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800452a:	f200 8087 	bhi.w	800463c <HAL_TIM_ConfigClockSource+0x16c>
 800452e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004532:	f000 8086 	beq.w	8004642 <HAL_TIM_ConfigClockSource+0x172>
 8004536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453a:	d87f      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 800453c:	2b70      	cmp	r3, #112	; 0x70
 800453e:	d01a      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0xa6>
 8004540:	2b70      	cmp	r3, #112	; 0x70
 8004542:	d87b      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 8004544:	2b60      	cmp	r3, #96	; 0x60
 8004546:	d050      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x11a>
 8004548:	2b60      	cmp	r3, #96	; 0x60
 800454a:	d877      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 800454c:	2b50      	cmp	r3, #80	; 0x50
 800454e:	d03c      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0xfa>
 8004550:	2b50      	cmp	r3, #80	; 0x50
 8004552:	d873      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d058      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x13a>
 8004558:	2b40      	cmp	r3, #64	; 0x40
 800455a:	d86f      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 800455c:	2b30      	cmp	r3, #48	; 0x30
 800455e:	d064      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x15a>
 8004560:	2b30      	cmp	r3, #48	; 0x30
 8004562:	d86b      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 8004564:	2b20      	cmp	r3, #32
 8004566:	d060      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x15a>
 8004568:	2b20      	cmp	r3, #32
 800456a:	d867      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d05c      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x15a>
 8004570:	2b10      	cmp	r3, #16
 8004572:	d05a      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x15a>
 8004574:	e062      	b.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004586:	f000 faf8 	bl	8004b7a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004598:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]
      break;
 80045a2:	e04f      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045b4:	f000 fae1 	bl	8004b7a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045c6:	609a      	str	r2, [r3, #8]
      break;
 80045c8:	e03c      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d6:	461a      	mov	r2, r3
 80045d8:	f000 fa58 	bl	8004a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2150      	movs	r1, #80	; 0x50
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 faaf 	bl	8004b46 <TIM_ITRx_SetConfig>
      break;
 80045e8:	e02c      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045f6:	461a      	mov	r2, r3
 80045f8:	f000 fa76 	bl	8004ae8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2160      	movs	r1, #96	; 0x60
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fa9f 	bl	8004b46 <TIM_ITRx_SetConfig>
      break;
 8004608:	e01c      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004616:	461a      	mov	r2, r3
 8004618:	f000 fa38 	bl	8004a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2140      	movs	r1, #64	; 0x40
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fa8f 	bl	8004b46 <TIM_ITRx_SetConfig>
      break;
 8004628:	e00c      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f000 fa86 	bl	8004b46 <TIM_ITRx_SetConfig>
      break;
 800463a:	e003      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      break;
 8004640:	e000      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004642:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr

080046a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a29      	ldr	r2, [pc, #164]	; (8004770 <TIM_Base_SetConfig+0xb8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00b      	beq.n	80046e8 <TIM_Base_SetConfig+0x30>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d6:	d007      	beq.n	80046e8 <TIM_Base_SetConfig+0x30>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a26      	ldr	r2, [pc, #152]	; (8004774 <TIM_Base_SetConfig+0xbc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <TIM_Base_SetConfig+0x30>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a25      	ldr	r2, [pc, #148]	; (8004778 <TIM_Base_SetConfig+0xc0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d108      	bne.n	80046fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a1c      	ldr	r2, [pc, #112]	; (8004770 <TIM_Base_SetConfig+0xb8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00b      	beq.n	800471a <TIM_Base_SetConfig+0x62>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004708:	d007      	beq.n	800471a <TIM_Base_SetConfig+0x62>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a19      	ldr	r2, [pc, #100]	; (8004774 <TIM_Base_SetConfig+0xbc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d003      	beq.n	800471a <TIM_Base_SetConfig+0x62>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a18      	ldr	r2, [pc, #96]	; (8004778 <TIM_Base_SetConfig+0xc0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d108      	bne.n	800472c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a07      	ldr	r2, [pc, #28]	; (8004770 <TIM_Base_SetConfig+0xb8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d103      	bne.n	8004760 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	615a      	str	r2, [r3, #20]
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	40012c00 	.word	0x40012c00
 8004774:	40000400 	.word	0x40000400
 8004778:	40000800 	.word	0x40000800

0800477c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	f023 0201 	bic.w	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0303 	bic.w	r3, r3, #3
 80047b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f023 0302 	bic.w	r3, r3, #2
 80047c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a1c      	ldr	r2, [pc, #112]	; (8004844 <TIM_OC1_SetConfig+0xc8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d10c      	bne.n	80047f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f023 0308 	bic.w	r3, r3, #8
 80047de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 0304 	bic.w	r3, r3, #4
 80047f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a13      	ldr	r2, [pc, #76]	; (8004844 <TIM_OC1_SetConfig+0xc8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d111      	bne.n	800481e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	621a      	str	r2, [r3, #32]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40012c00 	.word	0x40012c00

08004848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f023 0210 	bic.w	r2, r3, #16
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	021b      	lsls	r3, r3, #8
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f023 0320 	bic.w	r3, r3, #32
 8004892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a1d      	ldr	r2, [pc, #116]	; (8004918 <TIM_OC2_SetConfig+0xd0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d10d      	bne.n	80048c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a14      	ldr	r2, [pc, #80]	; (8004918 <TIM_OC2_SetConfig+0xd0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d113      	bne.n	80048f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	621a      	str	r2, [r3, #32]
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00

0800491c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0303 	bic.w	r3, r3, #3
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <TIM_OC3_SetConfig+0xd0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d10d      	bne.n	8004996 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a14      	ldr	r2, [pc, #80]	; (80049ec <TIM_OC3_SetConfig+0xd0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d113      	bne.n	80049c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	621a      	str	r2, [r3, #32]
}
 80049e0:	bf00      	nop
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40012c00 	.word	0x40012c00

080049f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	031b      	lsls	r3, r3, #12
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a0f      	ldr	r2, [pc, #60]	; (8004a88 <TIM_OC4_SetConfig+0x98>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d109      	bne.n	8004a64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	019b      	lsls	r3, r3, #6
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr
 8004a88:	40012c00 	.word	0x40012c00

08004a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f023 0201 	bic.w	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f023 030a 	bic.w	r3, r3, #10
 8004ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f023 0210 	bic.w	r2, r3, #16
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	031b      	lsls	r3, r3, #12
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f043 0307 	orr.w	r3, r3, #7
 8004b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	609a      	str	r2, [r3, #8]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b087      	sub	sp, #28
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	021a      	lsls	r2, r3, #8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	609a      	str	r2, [r3, #8]
}
 8004bae:	bf00      	nop
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr

08004bb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 031f 	and.w	r3, r3, #31
 8004bca:	2201      	movs	r2, #1
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a1a      	ldr	r2, [r3, #32]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	401a      	ands	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a1a      	ldr	r2, [r3, #32]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	621a      	str	r2, [r3, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e046      	b.n	8004ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a16      	ldr	r2, [pc, #88]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00e      	beq.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c64:	d009      	beq.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a12      	ldr	r2, [pc, #72]	; (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a10      	ldr	r2, [pc, #64]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d10c      	bne.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr
 8004cb0:	40012c00 	.word	0x40012c00
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800

08004cbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e03d      	b.n	8004d54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr

08004d5e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr

08004d82 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e042      	b.n	8004e1a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d106      	bne.n	8004dae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7fc fd8d 	bl	80018c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2224      	movs	r2, #36	; 0x24
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dc4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fef2 	bl	8005bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dda:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695a      	ldr	r2, [r3, #20]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dfa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d121      	bne.n	8004e80 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_UART_Transmit_IT+0x26>
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e01a      	b.n	8004e82 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	88fa      	ldrh	r2, [r7, #6]
 8004e56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2221      	movs	r2, #33	; 0x21
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e7a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e000      	b.n	8004e82 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004e80:	2302      	movs	r3, #2
  }
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	4613      	mov	r3, r2
 8004e98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d112      	bne.n	8004ecc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_UART_Receive_DMA+0x26>
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e00b      	b.n	8004ece <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004ebc:	88fb      	ldrh	r3, [r7, #6]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fc18 	bl	80056f8 <UART_Start_Receive_DMA>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	e000      	b.n	8004ece <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ecc:	2302      	movs	r3, #2
  }
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b08c      	sub	sp, #48	; 0x30
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d14a      	bne.n	8004f86 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e043      	b.n	8004f88 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004f0c:	88fb      	ldrh	r3, [r7, #6]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fbf0 	bl	80056f8 <UART_Start_Receive_DMA>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004f1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d12c      	bne.n	8004f80 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d125      	bne.n	8004f7a <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	330c      	adds	r3, #12
 8004f4a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	617b      	str	r3, [r7, #20]
   return(result);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f043 0310 	orr.w	r3, r3, #16
 8004f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f64:	627a      	str	r2, [r7, #36]	; 0x24
 8004f66:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6a39      	ldr	r1, [r7, #32]
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e5      	bne.n	8004f44 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004f78:	e002      	b.n	8004f80 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004f80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f84:	e000      	b.n	8004f88 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3730      	adds	r7, #48	; 0x30
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b0ba      	sub	sp, #232	; 0xe8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10f      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x66>
 8004fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fd20 	bl	8005a34 <UART_Receive_IT>
      return;
 8004ff4:	e25b      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80de 	beq.w	80051bc <HAL_UART_IRQHandler+0x22c>
 8005000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005010:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80d1 	beq.w	80051bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00b      	beq.n	800503e <HAL_UART_IRQHandler+0xae>
 8005026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	f043 0201 	orr.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800503e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_UART_IRQHandler+0xd2>
 800504a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f043 0202 	orr.w	r2, r3, #2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <HAL_UART_IRQHandler+0xf6>
 800506e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	f043 0204 	orr.w	r2, r3, #4
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d011      	beq.n	80050b6 <HAL_UART_IRQHandler+0x126>
 8005092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800509e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	f043 0208 	orr.w	r2, r3, #8
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 81f2 	beq.w	80054a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <HAL_UART_IRQHandler+0x14e>
 80050cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fcab 	bl	8005a34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <HAL_UART_IRQHandler+0x17a>
 8005102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d04f      	beq.n	80051aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fbb5 	bl	800587a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d041      	beq.n	80051a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3314      	adds	r3, #20
 8005124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3314      	adds	r3, #20
 8005146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800514a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800514e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1d9      	bne.n	800511e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d013      	beq.n	800519a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	4a7e      	ldr	r2, [pc, #504]	; (8005370 <HAL_UART_IRQHandler+0x3e0>)
 8005178:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	4618      	mov	r0, r3
 8005180:	f7fc ff5a 	bl	8002038 <HAL_DMA_Abort_IT>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d016      	beq.n	80051b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005194:	4610      	mov	r0, r2
 8005196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005198:	e00e      	b.n	80051b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f9a5 	bl	80054ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a0:	e00a      	b.n	80051b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f9a1 	bl	80054ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a8:	e006      	b.n	80051b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f99d 	bl	80054ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80051b6:	e175      	b.n	80054a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	bf00      	nop
    return;
 80051ba:	e173      	b.n	80054a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	f040 814f 	bne.w	8005464 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8148 	beq.w	8005464 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8141 	beq.w	8005464 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80b6 	beq.w	8005374 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005214:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8145 	beq.w	80054a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005226:	429a      	cmp	r2, r3
 8005228:	f080 813e 	bcs.w	80054a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005232:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	2b20      	cmp	r3, #32
 800523c:	f000 8088 	beq.w	8005350 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800525a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800526c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005270:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005278:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1d9      	bne.n	8005240 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3314      	adds	r3, #20
 8005292:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800529c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e1      	bne.n	800528c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3314      	adds	r3, #20
 80052ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3314      	adds	r3, #20
 80052e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e3      	bne.n	80052c8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800531e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005332:	65ba      	str	r2, [r7, #88]	; 0x58
 8005334:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e3      	bne.n	800530e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	4618      	mov	r0, r3
 800534c:	f7fc fe38 	bl	8001fc0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800535e:	b29b      	uxth	r3, r3
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	b29b      	uxth	r3, r3
 8005364:	4619      	mov	r1, r3
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fb fe80 	bl	800106c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800536c:	e09c      	b.n	80054a8 <HAL_UART_IRQHandler+0x518>
 800536e:	bf00      	nop
 8005370:	0800593f 	.word	0x0800593f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800537c:	b29b      	uxth	r3, r3
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 808e 	beq.w	80054ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005390:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8089 	beq.w	80054ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053be:	647a      	str	r2, [r7, #68]	; 0x44
 80053c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e3      	bne.n	800539a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	623b      	str	r3, [r7, #32]
   return(result);
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3314      	adds	r3, #20
 80053f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053f6:	633a      	str	r2, [r7, #48]	; 0x30
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e3      	bne.n	80053d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	60fb      	str	r3, [r7, #12]
   return(result);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0310 	bic.w	r3, r3, #16
 800542e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	330c      	adds	r3, #12
 8005438:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800543c:	61fa      	str	r2, [r7, #28]
 800543e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	69b9      	ldr	r1, [r7, #24]
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	617b      	str	r3, [r7, #20]
   return(result);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e3      	bne.n	8005418 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7fb fe05 	bl	800106c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005462:	e023      	b.n	80054ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546c:	2b00      	cmp	r3, #0
 800546e:	d009      	beq.n	8005484 <HAL_UART_IRQHandler+0x4f4>
 8005470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fa72 	bl	8005966 <UART_Transmit_IT>
    return;
 8005482:	e014      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00e      	beq.n	80054ae <HAL_UART_IRQHandler+0x51e>
 8005490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fab1 	bl	8005a04 <UART_EndTransmit_IT>
    return;
 80054a2:	e004      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
    return;
 80054a4:	bf00      	nop
 80054a6:	e002      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
      return;
 80054a8:	bf00      	nop
 80054aa:	e000      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
      return;
 80054ac:	bf00      	nop
  }
}
 80054ae:	37e8      	adds	r7, #232	; 0xe8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr

080054ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr

080054fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b09c      	sub	sp, #112	; 0x70
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d172      	bne.n	80055fe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551a:	2200      	movs	r2, #0
 800551c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800551e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	330c      	adds	r3, #12
 8005524:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800552e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005534:	66bb      	str	r3, [r7, #104]	; 0x68
 8005536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	330c      	adds	r3, #12
 800553c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800553e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005540:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005544:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800554c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e5      	bne.n	800551e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3314      	adds	r3, #20
 8005558:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	667b      	str	r3, [r7, #100]	; 0x64
 800556a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3314      	adds	r3, #20
 8005570:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005572:	647a      	str	r2, [r7, #68]	; 0x44
 8005574:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005578:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3314      	adds	r3, #20
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	623b      	str	r3, [r7, #32]
   return(result);
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800559c:	663b      	str	r3, [r7, #96]	; 0x60
 800559e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3314      	adds	r3, #20
 80055a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055a6:	633a      	str	r2, [r7, #48]	; 0x30
 80055a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e5      	bne.n	8005586 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d119      	bne.n	80055fe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	330c      	adds	r3, #12
 80055d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f023 0310 	bic.w	r3, r3, #16
 80055e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	330c      	adds	r3, #12
 80055e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055ea:	61fa      	str	r2, [r7, #28]
 80055ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	69b9      	ldr	r1, [r7, #24]
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	617b      	str	r3, [r7, #20]
   return(result);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e5      	bne.n	80055ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005600:	2200      	movs	r2, #0
 8005602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	2b01      	cmp	r3, #1
 800560a:	d106      	bne.n	800561a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800560c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005610:	4619      	mov	r1, r3
 8005612:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005614:	f7fb fd2a 	bl	800106c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005618:	e002      	b.n	8005620 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800561a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800561c:	f7ff ff53 	bl	80054c6 <HAL_UART_RxCpltCallback>
}
 8005620:	bf00      	nop
 8005622:	3770      	adds	r7, #112	; 0x70
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	2b01      	cmp	r3, #1
 8005642:	d108      	bne.n	8005656 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	b29b      	uxth	r3, r3
 800564c:	4619      	mov	r1, r3
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f7fb fd0c 	bl	800106c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005654:	e002      	b.n	800565c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff ff3e 	bl	80054d8 <HAL_UART_RxHalfCpltCallback>
}
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005680:	2b00      	cmp	r3, #0
 8005682:	bf14      	ite	ne
 8005684:	2301      	movne	r3, #1
 8005686:	2300      	moveq	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b21      	cmp	r3, #33	; 0x21
 8005696:	d108      	bne.n	80056aa <UART_DMAError+0x46>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2200      	movs	r2, #0
 80056a2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80056a4:	68b8      	ldr	r0, [r7, #8]
 80056a6:	f000 f8c1 	bl	800582c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bf14      	ite	ne
 80056b8:	2301      	movne	r3, #1
 80056ba:	2300      	moveq	r3, #0
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b22      	cmp	r3, #34	; 0x22
 80056ca:	d108      	bne.n	80056de <UART_DMAError+0x7a>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2200      	movs	r2, #0
 80056d6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80056d8:	68b8      	ldr	r0, [r7, #8]
 80056da:	f000 f8ce 	bl	800587a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e2:	f043 0210 	orr.w	r2, r3, #16
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056ea:	68b8      	ldr	r0, [r7, #8]
 80056ec:	f7ff fefd 	bl	80054ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b098      	sub	sp, #96	; 0x60
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	4613      	mov	r3, r2
 8005704:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2222      	movs	r2, #34	; 0x22
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005724:	4a3e      	ldr	r2, [pc, #248]	; (8005820 <UART_Start_Receive_DMA+0x128>)
 8005726:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572c:	4a3d      	ldr	r2, [pc, #244]	; (8005824 <UART_Start_Receive_DMA+0x12c>)
 800572e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005734:	4a3c      	ldr	r2, [pc, #240]	; (8005828 <UART_Start_Receive_DMA+0x130>)
 8005736:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573c:	2200      	movs	r2, #0
 800573e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005740:	f107 0308 	add.w	r3, r7, #8
 8005744:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3304      	adds	r3, #4
 8005750:	4619      	mov	r1, r3
 8005752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	f7fc fbd2 	bl	8001f00 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800575c:	2300      	movs	r3, #0
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d019      	beq.n	80057ae <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800578a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005790:	65bb      	str	r3, [r7, #88]	; 0x58
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800579a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800579c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80057a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80057a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e5      	bne.n	800577a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3314      	adds	r3, #20
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	657b      	str	r3, [r7, #84]	; 0x54
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3314      	adds	r3, #20
 80057cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e5      	bne.n	80057ae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3314      	adds	r3, #20
 80057e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	617b      	str	r3, [r7, #20]
   return(result);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f8:	653b      	str	r3, [r7, #80]	; 0x50
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3314      	adds	r3, #20
 8005800:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005802:	627a      	str	r2, [r7, #36]	; 0x24
 8005804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	6a39      	ldr	r1, [r7, #32]
 8005808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e5      	bne.n	80057e2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3760      	adds	r7, #96	; 0x60
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	080054fd 	.word	0x080054fd
 8005824:	08005629 	.word	0x08005629
 8005828:	08005665 	.word	0x08005665

0800582c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b089      	sub	sp, #36	; 0x24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	60bb      	str	r3, [r7, #8]
   return(result);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	61ba      	str	r2, [r7, #24]
 8005856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6979      	ldr	r1, [r7, #20]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	613b      	str	r3, [r7, #16]
   return(result);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e5      	bne.n	8005834 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005870:	bf00      	nop
 8005872:	3724      	adds	r7, #36	; 0x24
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800587a:	b480      	push	{r7}
 800587c:	b095      	sub	sp, #84	; 0x54
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005898:	64fb      	str	r3, [r7, #76]	; 0x4c
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058a2:	643a      	str	r2, [r7, #64]	; 0x40
 80058a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3314      	adds	r3, #20
 80058bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3314      	adds	r3, #20
 80058d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e5      	bne.n	80058b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d119      	bne.n	8005926 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	330c      	adds	r3, #12
 80058f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	60bb      	str	r3, [r7, #8]
   return(result);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f023 0310 	bic.w	r3, r3, #16
 8005908:	647b      	str	r3, [r7, #68]	; 0x44
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	330c      	adds	r3, #12
 8005910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005912:	61ba      	str	r2, [r7, #24]
 8005914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6979      	ldr	r1, [r7, #20]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	613b      	str	r3, [r7, #16]
   return(result);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e5      	bne.n	80058f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005934:	bf00      	nop
 8005936:	3754      	adds	r7, #84	; 0x54
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr

0800593e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff fdc6 	bl	80054ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005966:	b480      	push	{r7}
 8005968:	b085      	sub	sp, #20
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b21      	cmp	r3, #33	; 0x21
 8005978:	d13e      	bne.n	80059f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005982:	d114      	bne.n	80059ae <UART_Transmit_IT+0x48>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d110      	bne.n	80059ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	1c9a      	adds	r2, r3, #2
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	621a      	str	r2, [r3, #32]
 80059ac:	e008      	b.n	80059c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	1c59      	adds	r1, r3, #1
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6211      	str	r1, [r2, #32]
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4619      	mov	r1, r3
 80059ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10f      	bne.n	80059f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	e000      	b.n	80059fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059f8:	2302      	movs	r3, #2
  }
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr

08005a04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff fd45 	bl	80054b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08c      	sub	sp, #48	; 0x30
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b22      	cmp	r3, #34	; 0x22
 8005a46:	f040 80ae 	bne.w	8005ba6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	d117      	bne.n	8005a84 <UART_Receive_IT+0x50>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d113      	bne.n	8005a84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	1c9a      	adds	r2, r3, #2
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	629a      	str	r2, [r3, #40]	; 0x28
 8005a82:	e026      	b.n	8005ad2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a96:	d007      	beq.n	8005aa8 <UART_Receive_IT+0x74>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <UART_Receive_IT+0x82>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e008      	b.n	8005ac8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d15d      	bne.n	8005ba2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0220 	bic.w	r2, r2, #32
 8005af4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695a      	ldr	r2, [r3, #20]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0201 	bic.w	r2, r2, #1
 8005b14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d135      	bne.n	8005b98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	613b      	str	r3, [r7, #16]
   return(result);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f023 0310 	bic.w	r3, r3, #16
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	330c      	adds	r3, #12
 8005b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b52:	623a      	str	r2, [r7, #32]
 8005b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	69f9      	ldr	r1, [r7, #28]
 8005b58:	6a3a      	ldr	r2, [r7, #32]
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e5      	bne.n	8005b32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	2b10      	cmp	r3, #16
 8005b72:	d10a      	bne.n	8005b8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7fb fa6b 	bl	800106c <HAL_UARTEx_RxEventCallback>
 8005b96:	e002      	b.n	8005b9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff fc94 	bl	80054c6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e002      	b.n	8005ba8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e000      	b.n	8005ba8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ba6:	2302      	movs	r3, #2
  }
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3730      	adds	r7, #48	; 0x30
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005bea:	f023 030c 	bic.w	r3, r3, #12
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2c      	ldr	r2, [pc, #176]	; (8005cc4 <UART_SetConfig+0x114>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d103      	bne.n	8005c20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c18:	f7fd fde8 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	e002      	b.n	8005c26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c20:	f7fd fdd0 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 8005c24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009a      	lsls	r2, r3, #2
 8005c30:	441a      	add	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	4a22      	ldr	r2, [pc, #136]	; (8005cc8 <UART_SetConfig+0x118>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	0119      	lsls	r1, r3, #4
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009a      	lsls	r2, r3, #2
 8005c50:	441a      	add	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c5c:	4b1a      	ldr	r3, [pc, #104]	; (8005cc8 <UART_SetConfig+0x118>)
 8005c5e:	fba3 0302 	umull	r0, r3, r3, r2
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	2064      	movs	r0, #100	; 0x64
 8005c66:	fb00 f303 	mul.w	r3, r0, r3
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	3332      	adds	r3, #50	; 0x32
 8005c70:	4a15      	ldr	r2, [pc, #84]	; (8005cc8 <UART_SetConfig+0x118>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c7c:	4419      	add	r1, r3
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009a      	lsls	r2, r3, #2
 8005c88:	441a      	add	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c94:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <UART_SetConfig+0x118>)
 8005c96:	fba3 0302 	umull	r0, r3, r3, r2
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	2064      	movs	r0, #100	; 0x64
 8005c9e:	fb00 f303 	mul.w	r3, r0, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	3332      	adds	r3, #50	; 0x32
 8005ca8:	4a07      	ldr	r2, [pc, #28]	; (8005cc8 <UART_SetConfig+0x118>)
 8005caa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	f003 020f 	and.w	r2, r3, #15
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	440a      	add	r2, r1
 8005cba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40013800 	.word	0x40013800
 8005cc8:	51eb851f 	.word	0x51eb851f

08005ccc <atoi>:
 8005ccc:	220a      	movs	r2, #10
 8005cce:	2100      	movs	r1, #0
 8005cd0:	f000 b87e 	b.w	8005dd0 <strtol>

08005cd4 <_strtol_l.constprop.0>:
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cda:	4686      	mov	lr, r0
 8005cdc:	4690      	mov	r8, r2
 8005cde:	d001      	beq.n	8005ce4 <_strtol_l.constprop.0+0x10>
 8005ce0:	2b24      	cmp	r3, #36	; 0x24
 8005ce2:	d906      	bls.n	8005cf2 <_strtol_l.constprop.0+0x1e>
 8005ce4:	f000 f8ba 	bl	8005e5c <__errno>
 8005ce8:	2316      	movs	r3, #22
 8005cea:	6003      	str	r3, [r0, #0]
 8005cec:	2000      	movs	r0, #0
 8005cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf2:	460d      	mov	r5, r1
 8005cf4:	4835      	ldr	r0, [pc, #212]	; (8005dcc <_strtol_l.constprop.0+0xf8>)
 8005cf6:	462a      	mov	r2, r5
 8005cf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cfc:	5d06      	ldrb	r6, [r0, r4]
 8005cfe:	f016 0608 	ands.w	r6, r6, #8
 8005d02:	d1f8      	bne.n	8005cf6 <_strtol_l.constprop.0+0x22>
 8005d04:	2c2d      	cmp	r4, #45	; 0x2d
 8005d06:	d12e      	bne.n	8005d66 <_strtol_l.constprop.0+0x92>
 8005d08:	2601      	movs	r6, #1
 8005d0a:	782c      	ldrb	r4, [r5, #0]
 8005d0c:	1c95      	adds	r5, r2, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d057      	beq.n	8005dc2 <_strtol_l.constprop.0+0xee>
 8005d12:	2b10      	cmp	r3, #16
 8005d14:	d109      	bne.n	8005d2a <_strtol_l.constprop.0+0x56>
 8005d16:	2c30      	cmp	r4, #48	; 0x30
 8005d18:	d107      	bne.n	8005d2a <_strtol_l.constprop.0+0x56>
 8005d1a:	782a      	ldrb	r2, [r5, #0]
 8005d1c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005d20:	2a58      	cmp	r2, #88	; 0x58
 8005d22:	d149      	bne.n	8005db8 <_strtol_l.constprop.0+0xe4>
 8005d24:	2310      	movs	r3, #16
 8005d26:	786c      	ldrb	r4, [r5, #1]
 8005d28:	3502      	adds	r5, #2
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8005d30:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005d34:	fbbc f9f3 	udiv	r9, ip, r3
 8005d38:	4610      	mov	r0, r2
 8005d3a:	fb03 ca19 	mls	sl, r3, r9, ip
 8005d3e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005d42:	2f09      	cmp	r7, #9
 8005d44:	d814      	bhi.n	8005d70 <_strtol_l.constprop.0+0x9c>
 8005d46:	463c      	mov	r4, r7
 8005d48:	42a3      	cmp	r3, r4
 8005d4a:	dd20      	ble.n	8005d8e <_strtol_l.constprop.0+0xba>
 8005d4c:	1c57      	adds	r7, r2, #1
 8005d4e:	d007      	beq.n	8005d60 <_strtol_l.constprop.0+0x8c>
 8005d50:	4581      	cmp	r9, r0
 8005d52:	d319      	bcc.n	8005d88 <_strtol_l.constprop.0+0xb4>
 8005d54:	d101      	bne.n	8005d5a <_strtol_l.constprop.0+0x86>
 8005d56:	45a2      	cmp	sl, r4
 8005d58:	db16      	blt.n	8005d88 <_strtol_l.constprop.0+0xb4>
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	fb00 4003 	mla	r0, r0, r3, r4
 8005d60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d64:	e7eb      	b.n	8005d3e <_strtol_l.constprop.0+0x6a>
 8005d66:	2c2b      	cmp	r4, #43	; 0x2b
 8005d68:	bf04      	itt	eq
 8005d6a:	782c      	ldrbeq	r4, [r5, #0]
 8005d6c:	1c95      	addeq	r5, r2, #2
 8005d6e:	e7ce      	b.n	8005d0e <_strtol_l.constprop.0+0x3a>
 8005d70:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005d74:	2f19      	cmp	r7, #25
 8005d76:	d801      	bhi.n	8005d7c <_strtol_l.constprop.0+0xa8>
 8005d78:	3c37      	subs	r4, #55	; 0x37
 8005d7a:	e7e5      	b.n	8005d48 <_strtol_l.constprop.0+0x74>
 8005d7c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005d80:	2f19      	cmp	r7, #25
 8005d82:	d804      	bhi.n	8005d8e <_strtol_l.constprop.0+0xba>
 8005d84:	3c57      	subs	r4, #87	; 0x57
 8005d86:	e7df      	b.n	8005d48 <_strtol_l.constprop.0+0x74>
 8005d88:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8c:	e7e8      	b.n	8005d60 <_strtol_l.constprop.0+0x8c>
 8005d8e:	1c53      	adds	r3, r2, #1
 8005d90:	d108      	bne.n	8005da4 <_strtol_l.constprop.0+0xd0>
 8005d92:	2322      	movs	r3, #34	; 0x22
 8005d94:	4660      	mov	r0, ip
 8005d96:	f8ce 3000 	str.w	r3, [lr]
 8005d9a:	f1b8 0f00 	cmp.w	r8, #0
 8005d9e:	d0a6      	beq.n	8005cee <_strtol_l.constprop.0+0x1a>
 8005da0:	1e69      	subs	r1, r5, #1
 8005da2:	e006      	b.n	8005db2 <_strtol_l.constprop.0+0xde>
 8005da4:	b106      	cbz	r6, 8005da8 <_strtol_l.constprop.0+0xd4>
 8005da6:	4240      	negs	r0, r0
 8005da8:	f1b8 0f00 	cmp.w	r8, #0
 8005dac:	d09f      	beq.n	8005cee <_strtol_l.constprop.0+0x1a>
 8005dae:	2a00      	cmp	r2, #0
 8005db0:	d1f6      	bne.n	8005da0 <_strtol_l.constprop.0+0xcc>
 8005db2:	f8c8 1000 	str.w	r1, [r8]
 8005db6:	e79a      	b.n	8005cee <_strtol_l.constprop.0+0x1a>
 8005db8:	2430      	movs	r4, #48	; 0x30
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1b5      	bne.n	8005d2a <_strtol_l.constprop.0+0x56>
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	e7b3      	b.n	8005d2a <_strtol_l.constprop.0+0x56>
 8005dc2:	2c30      	cmp	r4, #48	; 0x30
 8005dc4:	d0a9      	beq.n	8005d1a <_strtol_l.constprop.0+0x46>
 8005dc6:	230a      	movs	r3, #10
 8005dc8:	e7af      	b.n	8005d2a <_strtol_l.constprop.0+0x56>
 8005dca:	bf00      	nop
 8005dcc:	0800689f 	.word	0x0800689f

08005dd0 <strtol>:
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	460a      	mov	r2, r1
 8005dd4:	4601      	mov	r1, r0
 8005dd6:	4802      	ldr	r0, [pc, #8]	; (8005de0 <strtol+0x10>)
 8005dd8:	6800      	ldr	r0, [r0, #0]
 8005dda:	f7ff bf7b 	b.w	8005cd4 <_strtol_l.constprop.0>
 8005dde:	bf00      	nop
 8005de0:	20000058 	.word	0x20000058

08005de4 <siprintf>:
 8005de4:	b40e      	push	{r1, r2, r3}
 8005de6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dea:	b500      	push	{lr}
 8005dec:	b09c      	sub	sp, #112	; 0x70
 8005dee:	ab1d      	add	r3, sp, #116	; 0x74
 8005df0:	9002      	str	r0, [sp, #8]
 8005df2:	9006      	str	r0, [sp, #24]
 8005df4:	9107      	str	r1, [sp, #28]
 8005df6:	9104      	str	r1, [sp, #16]
 8005df8:	4808      	ldr	r0, [pc, #32]	; (8005e1c <siprintf+0x38>)
 8005dfa:	4909      	ldr	r1, [pc, #36]	; (8005e20 <siprintf+0x3c>)
 8005dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e00:	9105      	str	r1, [sp, #20]
 8005e02:	6800      	ldr	r0, [r0, #0]
 8005e04:	a902      	add	r1, sp, #8
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	f000 f9a2 	bl	8006150 <_svfiprintf_r>
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	9b02      	ldr	r3, [sp, #8]
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	b01c      	add	sp, #112	; 0x70
 8005e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e18:	b003      	add	sp, #12
 8005e1a:	4770      	bx	lr
 8005e1c:	20000058 	.word	0x20000058
 8005e20:	ffff0208 	.word	0xffff0208

08005e24 <memset>:
 8005e24:	4603      	mov	r3, r0
 8005e26:	4402      	add	r2, r0
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d100      	bne.n	8005e2e <memset+0xa>
 8005e2c:	4770      	bx	lr
 8005e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e32:	e7f9      	b.n	8005e28 <memset+0x4>

08005e34 <strncpy>:
 8005e34:	4603      	mov	r3, r0
 8005e36:	b510      	push	{r4, lr}
 8005e38:	3901      	subs	r1, #1
 8005e3a:	b132      	cbz	r2, 8005e4a <strncpy+0x16>
 8005e3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005e40:	3a01      	subs	r2, #1
 8005e42:	f803 4b01 	strb.w	r4, [r3], #1
 8005e46:	2c00      	cmp	r4, #0
 8005e48:	d1f7      	bne.n	8005e3a <strncpy+0x6>
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	441a      	add	r2, r3
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d100      	bne.n	8005e54 <strncpy+0x20>
 8005e52:	bd10      	pop	{r4, pc}
 8005e54:	f803 1b01 	strb.w	r1, [r3], #1
 8005e58:	e7f9      	b.n	8005e4e <strncpy+0x1a>
	...

08005e5c <__errno>:
 8005e5c:	4b01      	ldr	r3, [pc, #4]	; (8005e64 <__errno+0x8>)
 8005e5e:	6818      	ldr	r0, [r3, #0]
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	20000058 	.word	0x20000058

08005e68 <__libc_init_array>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	2600      	movs	r6, #0
 8005e6c:	4d0c      	ldr	r5, [pc, #48]	; (8005ea0 <__libc_init_array+0x38>)
 8005e6e:	4c0d      	ldr	r4, [pc, #52]	; (8005ea4 <__libc_init_array+0x3c>)
 8005e70:	1b64      	subs	r4, r4, r5
 8005e72:	10a4      	asrs	r4, r4, #2
 8005e74:	42a6      	cmp	r6, r4
 8005e76:	d109      	bne.n	8005e8c <__libc_init_array+0x24>
 8005e78:	f000 fc7a 	bl	8006770 <_init>
 8005e7c:	2600      	movs	r6, #0
 8005e7e:	4d0a      	ldr	r5, [pc, #40]	; (8005ea8 <__libc_init_array+0x40>)
 8005e80:	4c0a      	ldr	r4, [pc, #40]	; (8005eac <__libc_init_array+0x44>)
 8005e82:	1b64      	subs	r4, r4, r5
 8005e84:	10a4      	asrs	r4, r4, #2
 8005e86:	42a6      	cmp	r6, r4
 8005e88:	d105      	bne.n	8005e96 <__libc_init_array+0x2e>
 8005e8a:	bd70      	pop	{r4, r5, r6, pc}
 8005e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e90:	4798      	blx	r3
 8005e92:	3601      	adds	r6, #1
 8005e94:	e7ee      	b.n	8005e74 <__libc_init_array+0xc>
 8005e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9a:	4798      	blx	r3
 8005e9c:	3601      	adds	r6, #1
 8005e9e:	e7f2      	b.n	8005e86 <__libc_init_array+0x1e>
 8005ea0:	080069d4 	.word	0x080069d4
 8005ea4:	080069d4 	.word	0x080069d4
 8005ea8:	080069d4 	.word	0x080069d4
 8005eac:	080069d8 	.word	0x080069d8

08005eb0 <__retarget_lock_acquire_recursive>:
 8005eb0:	4770      	bx	lr

08005eb2 <__retarget_lock_release_recursive>:
 8005eb2:	4770      	bx	lr

08005eb4 <_free_r>:
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	2900      	cmp	r1, #0
 8005eba:	d040      	beq.n	8005f3e <_free_r+0x8a>
 8005ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec0:	1f0c      	subs	r4, r1, #4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfb8      	it	lt
 8005ec6:	18e4      	addlt	r4, r4, r3
 8005ec8:	f000 f8dc 	bl	8006084 <__malloc_lock>
 8005ecc:	4a1c      	ldr	r2, [pc, #112]	; (8005f40 <_free_r+0x8c>)
 8005ece:	6813      	ldr	r3, [r2, #0]
 8005ed0:	b933      	cbnz	r3, 8005ee0 <_free_r+0x2c>
 8005ed2:	6063      	str	r3, [r4, #4]
 8005ed4:	6014      	str	r4, [r2, #0]
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005edc:	f000 b8d8 	b.w	8006090 <__malloc_unlock>
 8005ee0:	42a3      	cmp	r3, r4
 8005ee2:	d908      	bls.n	8005ef6 <_free_r+0x42>
 8005ee4:	6820      	ldr	r0, [r4, #0]
 8005ee6:	1821      	adds	r1, r4, r0
 8005ee8:	428b      	cmp	r3, r1
 8005eea:	bf01      	itttt	eq
 8005eec:	6819      	ldreq	r1, [r3, #0]
 8005eee:	685b      	ldreq	r3, [r3, #4]
 8005ef0:	1809      	addeq	r1, r1, r0
 8005ef2:	6021      	streq	r1, [r4, #0]
 8005ef4:	e7ed      	b.n	8005ed2 <_free_r+0x1e>
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	b10b      	cbz	r3, 8005f00 <_free_r+0x4c>
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	d9fa      	bls.n	8005ef6 <_free_r+0x42>
 8005f00:	6811      	ldr	r1, [r2, #0]
 8005f02:	1850      	adds	r0, r2, r1
 8005f04:	42a0      	cmp	r0, r4
 8005f06:	d10b      	bne.n	8005f20 <_free_r+0x6c>
 8005f08:	6820      	ldr	r0, [r4, #0]
 8005f0a:	4401      	add	r1, r0
 8005f0c:	1850      	adds	r0, r2, r1
 8005f0e:	4283      	cmp	r3, r0
 8005f10:	6011      	str	r1, [r2, #0]
 8005f12:	d1e0      	bne.n	8005ed6 <_free_r+0x22>
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4408      	add	r0, r1
 8005f1a:	6010      	str	r0, [r2, #0]
 8005f1c:	6053      	str	r3, [r2, #4]
 8005f1e:	e7da      	b.n	8005ed6 <_free_r+0x22>
 8005f20:	d902      	bls.n	8005f28 <_free_r+0x74>
 8005f22:	230c      	movs	r3, #12
 8005f24:	602b      	str	r3, [r5, #0]
 8005f26:	e7d6      	b.n	8005ed6 <_free_r+0x22>
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	1821      	adds	r1, r4, r0
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	bf01      	itttt	eq
 8005f30:	6819      	ldreq	r1, [r3, #0]
 8005f32:	685b      	ldreq	r3, [r3, #4]
 8005f34:	1809      	addeq	r1, r1, r0
 8005f36:	6021      	streq	r1, [r4, #0]
 8005f38:	6063      	str	r3, [r4, #4]
 8005f3a:	6054      	str	r4, [r2, #4]
 8005f3c:	e7cb      	b.n	8005ed6 <_free_r+0x22>
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	20000438 	.word	0x20000438

08005f44 <sbrk_aligned>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	4e0e      	ldr	r6, [pc, #56]	; (8005f80 <sbrk_aligned+0x3c>)
 8005f48:	460c      	mov	r4, r1
 8005f4a:	6831      	ldr	r1, [r6, #0]
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	b911      	cbnz	r1, 8005f56 <sbrk_aligned+0x12>
 8005f50:	f000 fbaa 	bl	80066a8 <_sbrk_r>
 8005f54:	6030      	str	r0, [r6, #0]
 8005f56:	4621      	mov	r1, r4
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f000 fba5 	bl	80066a8 <_sbrk_r>
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	d00a      	beq.n	8005f78 <sbrk_aligned+0x34>
 8005f62:	1cc4      	adds	r4, r0, #3
 8005f64:	f024 0403 	bic.w	r4, r4, #3
 8005f68:	42a0      	cmp	r0, r4
 8005f6a:	d007      	beq.n	8005f7c <sbrk_aligned+0x38>
 8005f6c:	1a21      	subs	r1, r4, r0
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f000 fb9a 	bl	80066a8 <_sbrk_r>
 8005f74:	3001      	adds	r0, #1
 8005f76:	d101      	bne.n	8005f7c <sbrk_aligned+0x38>
 8005f78:	f04f 34ff 	mov.w	r4, #4294967295
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}
 8005f80:	2000043c 	.word	0x2000043c

08005f84 <_malloc_r>:
 8005f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f88:	1ccd      	adds	r5, r1, #3
 8005f8a:	f025 0503 	bic.w	r5, r5, #3
 8005f8e:	3508      	adds	r5, #8
 8005f90:	2d0c      	cmp	r5, #12
 8005f92:	bf38      	it	cc
 8005f94:	250c      	movcc	r5, #12
 8005f96:	2d00      	cmp	r5, #0
 8005f98:	4607      	mov	r7, r0
 8005f9a:	db01      	blt.n	8005fa0 <_malloc_r+0x1c>
 8005f9c:	42a9      	cmp	r1, r5
 8005f9e:	d905      	bls.n	8005fac <_malloc_r+0x28>
 8005fa0:	230c      	movs	r3, #12
 8005fa2:	2600      	movs	r6, #0
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006080 <_malloc_r+0xfc>
 8005fb0:	f000 f868 	bl	8006084 <__malloc_lock>
 8005fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb8:	461c      	mov	r4, r3
 8005fba:	bb5c      	cbnz	r4, 8006014 <_malloc_r+0x90>
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	4638      	mov	r0, r7
 8005fc0:	f7ff ffc0 	bl	8005f44 <sbrk_aligned>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	d155      	bne.n	8006076 <_malloc_r+0xf2>
 8005fca:	f8d8 4000 	ldr.w	r4, [r8]
 8005fce:	4626      	mov	r6, r4
 8005fd0:	2e00      	cmp	r6, #0
 8005fd2:	d145      	bne.n	8006060 <_malloc_r+0xdc>
 8005fd4:	2c00      	cmp	r4, #0
 8005fd6:	d048      	beq.n	800606a <_malloc_r+0xe6>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4638      	mov	r0, r7
 8005fde:	eb04 0903 	add.w	r9, r4, r3
 8005fe2:	f000 fb61 	bl	80066a8 <_sbrk_r>
 8005fe6:	4581      	cmp	r9, r0
 8005fe8:	d13f      	bne.n	800606a <_malloc_r+0xe6>
 8005fea:	6821      	ldr	r1, [r4, #0]
 8005fec:	4638      	mov	r0, r7
 8005fee:	1a6d      	subs	r5, r5, r1
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	f7ff ffa7 	bl	8005f44 <sbrk_aligned>
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d037      	beq.n	800606a <_malloc_r+0xe6>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	442b      	add	r3, r5
 8005ffe:	6023      	str	r3, [r4, #0]
 8006000:	f8d8 3000 	ldr.w	r3, [r8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d038      	beq.n	800607a <_malloc_r+0xf6>
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	42a2      	cmp	r2, r4
 800600c:	d12b      	bne.n	8006066 <_malloc_r+0xe2>
 800600e:	2200      	movs	r2, #0
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	e00f      	b.n	8006034 <_malloc_r+0xb0>
 8006014:	6822      	ldr	r2, [r4, #0]
 8006016:	1b52      	subs	r2, r2, r5
 8006018:	d41f      	bmi.n	800605a <_malloc_r+0xd6>
 800601a:	2a0b      	cmp	r2, #11
 800601c:	d917      	bls.n	800604e <_malloc_r+0xca>
 800601e:	1961      	adds	r1, r4, r5
 8006020:	42a3      	cmp	r3, r4
 8006022:	6025      	str	r5, [r4, #0]
 8006024:	bf18      	it	ne
 8006026:	6059      	strne	r1, [r3, #4]
 8006028:	6863      	ldr	r3, [r4, #4]
 800602a:	bf08      	it	eq
 800602c:	f8c8 1000 	streq.w	r1, [r8]
 8006030:	5162      	str	r2, [r4, r5]
 8006032:	604b      	str	r3, [r1, #4]
 8006034:	4638      	mov	r0, r7
 8006036:	f104 060b 	add.w	r6, r4, #11
 800603a:	f000 f829 	bl	8006090 <__malloc_unlock>
 800603e:	f026 0607 	bic.w	r6, r6, #7
 8006042:	1d23      	adds	r3, r4, #4
 8006044:	1af2      	subs	r2, r6, r3
 8006046:	d0ae      	beq.n	8005fa6 <_malloc_r+0x22>
 8006048:	1b9b      	subs	r3, r3, r6
 800604a:	50a3      	str	r3, [r4, r2]
 800604c:	e7ab      	b.n	8005fa6 <_malloc_r+0x22>
 800604e:	42a3      	cmp	r3, r4
 8006050:	6862      	ldr	r2, [r4, #4]
 8006052:	d1dd      	bne.n	8006010 <_malloc_r+0x8c>
 8006054:	f8c8 2000 	str.w	r2, [r8]
 8006058:	e7ec      	b.n	8006034 <_malloc_r+0xb0>
 800605a:	4623      	mov	r3, r4
 800605c:	6864      	ldr	r4, [r4, #4]
 800605e:	e7ac      	b.n	8005fba <_malloc_r+0x36>
 8006060:	4634      	mov	r4, r6
 8006062:	6876      	ldr	r6, [r6, #4]
 8006064:	e7b4      	b.n	8005fd0 <_malloc_r+0x4c>
 8006066:	4613      	mov	r3, r2
 8006068:	e7cc      	b.n	8006004 <_malloc_r+0x80>
 800606a:	230c      	movs	r3, #12
 800606c:	4638      	mov	r0, r7
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	f000 f80e 	bl	8006090 <__malloc_unlock>
 8006074:	e797      	b.n	8005fa6 <_malloc_r+0x22>
 8006076:	6025      	str	r5, [r4, #0]
 8006078:	e7dc      	b.n	8006034 <_malloc_r+0xb0>
 800607a:	605b      	str	r3, [r3, #4]
 800607c:	deff      	udf	#255	; 0xff
 800607e:	bf00      	nop
 8006080:	20000438 	.word	0x20000438

08006084 <__malloc_lock>:
 8006084:	4801      	ldr	r0, [pc, #4]	; (800608c <__malloc_lock+0x8>)
 8006086:	f7ff bf13 	b.w	8005eb0 <__retarget_lock_acquire_recursive>
 800608a:	bf00      	nop
 800608c:	20000434 	.word	0x20000434

08006090 <__malloc_unlock>:
 8006090:	4801      	ldr	r0, [pc, #4]	; (8006098 <__malloc_unlock+0x8>)
 8006092:	f7ff bf0e 	b.w	8005eb2 <__retarget_lock_release_recursive>
 8006096:	bf00      	nop
 8006098:	20000434 	.word	0x20000434

0800609c <__ssputs_r>:
 800609c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a0:	461f      	mov	r7, r3
 80060a2:	688e      	ldr	r6, [r1, #8]
 80060a4:	4682      	mov	sl, r0
 80060a6:	42be      	cmp	r6, r7
 80060a8:	460c      	mov	r4, r1
 80060aa:	4690      	mov	r8, r2
 80060ac:	680b      	ldr	r3, [r1, #0]
 80060ae:	d82c      	bhi.n	800610a <__ssputs_r+0x6e>
 80060b0:	898a      	ldrh	r2, [r1, #12]
 80060b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060b6:	d026      	beq.n	8006106 <__ssputs_r+0x6a>
 80060b8:	6965      	ldr	r5, [r4, #20]
 80060ba:	6909      	ldr	r1, [r1, #16]
 80060bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060c0:	eba3 0901 	sub.w	r9, r3, r1
 80060c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060c8:	1c7b      	adds	r3, r7, #1
 80060ca:	444b      	add	r3, r9
 80060cc:	106d      	asrs	r5, r5, #1
 80060ce:	429d      	cmp	r5, r3
 80060d0:	bf38      	it	cc
 80060d2:	461d      	movcc	r5, r3
 80060d4:	0553      	lsls	r3, r2, #21
 80060d6:	d527      	bpl.n	8006128 <__ssputs_r+0x8c>
 80060d8:	4629      	mov	r1, r5
 80060da:	f7ff ff53 	bl	8005f84 <_malloc_r>
 80060de:	4606      	mov	r6, r0
 80060e0:	b360      	cbz	r0, 800613c <__ssputs_r+0xa0>
 80060e2:	464a      	mov	r2, r9
 80060e4:	6921      	ldr	r1, [r4, #16]
 80060e6:	f000 fafd 	bl	80066e4 <memcpy>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f4:	81a3      	strh	r3, [r4, #12]
 80060f6:	6126      	str	r6, [r4, #16]
 80060f8:	444e      	add	r6, r9
 80060fa:	6026      	str	r6, [r4, #0]
 80060fc:	463e      	mov	r6, r7
 80060fe:	6165      	str	r5, [r4, #20]
 8006100:	eba5 0509 	sub.w	r5, r5, r9
 8006104:	60a5      	str	r5, [r4, #8]
 8006106:	42be      	cmp	r6, r7
 8006108:	d900      	bls.n	800610c <__ssputs_r+0x70>
 800610a:	463e      	mov	r6, r7
 800610c:	4632      	mov	r2, r6
 800610e:	4641      	mov	r1, r8
 8006110:	6820      	ldr	r0, [r4, #0]
 8006112:	f000 faaf 	bl	8006674 <memmove>
 8006116:	2000      	movs	r0, #0
 8006118:	68a3      	ldr	r3, [r4, #8]
 800611a:	1b9b      	subs	r3, r3, r6
 800611c:	60a3      	str	r3, [r4, #8]
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	4433      	add	r3, r6
 8006122:	6023      	str	r3, [r4, #0]
 8006124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006128:	462a      	mov	r2, r5
 800612a:	f000 fae9 	bl	8006700 <_realloc_r>
 800612e:	4606      	mov	r6, r0
 8006130:	2800      	cmp	r0, #0
 8006132:	d1e0      	bne.n	80060f6 <__ssputs_r+0x5a>
 8006134:	4650      	mov	r0, sl
 8006136:	6921      	ldr	r1, [r4, #16]
 8006138:	f7ff febc 	bl	8005eb4 <_free_r>
 800613c:	230c      	movs	r3, #12
 800613e:	f8ca 3000 	str.w	r3, [sl]
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	f04f 30ff 	mov.w	r0, #4294967295
 8006148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800614c:	81a3      	strh	r3, [r4, #12]
 800614e:	e7e9      	b.n	8006124 <__ssputs_r+0x88>

08006150 <_svfiprintf_r>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	4698      	mov	r8, r3
 8006156:	898b      	ldrh	r3, [r1, #12]
 8006158:	4607      	mov	r7, r0
 800615a:	061b      	lsls	r3, r3, #24
 800615c:	460d      	mov	r5, r1
 800615e:	4614      	mov	r4, r2
 8006160:	b09d      	sub	sp, #116	; 0x74
 8006162:	d50e      	bpl.n	8006182 <_svfiprintf_r+0x32>
 8006164:	690b      	ldr	r3, [r1, #16]
 8006166:	b963      	cbnz	r3, 8006182 <_svfiprintf_r+0x32>
 8006168:	2140      	movs	r1, #64	; 0x40
 800616a:	f7ff ff0b 	bl	8005f84 <_malloc_r>
 800616e:	6028      	str	r0, [r5, #0]
 8006170:	6128      	str	r0, [r5, #16]
 8006172:	b920      	cbnz	r0, 800617e <_svfiprintf_r+0x2e>
 8006174:	230c      	movs	r3, #12
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	f04f 30ff 	mov.w	r0, #4294967295
 800617c:	e0d0      	b.n	8006320 <_svfiprintf_r+0x1d0>
 800617e:	2340      	movs	r3, #64	; 0x40
 8006180:	616b      	str	r3, [r5, #20]
 8006182:	2300      	movs	r3, #0
 8006184:	9309      	str	r3, [sp, #36]	; 0x24
 8006186:	2320      	movs	r3, #32
 8006188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800618c:	2330      	movs	r3, #48	; 0x30
 800618e:	f04f 0901 	mov.w	r9, #1
 8006192:	f8cd 800c 	str.w	r8, [sp, #12]
 8006196:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006338 <_svfiprintf_r+0x1e8>
 800619a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800619e:	4623      	mov	r3, r4
 80061a0:	469a      	mov	sl, r3
 80061a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061a6:	b10a      	cbz	r2, 80061ac <_svfiprintf_r+0x5c>
 80061a8:	2a25      	cmp	r2, #37	; 0x25
 80061aa:	d1f9      	bne.n	80061a0 <_svfiprintf_r+0x50>
 80061ac:	ebba 0b04 	subs.w	fp, sl, r4
 80061b0:	d00b      	beq.n	80061ca <_svfiprintf_r+0x7a>
 80061b2:	465b      	mov	r3, fp
 80061b4:	4622      	mov	r2, r4
 80061b6:	4629      	mov	r1, r5
 80061b8:	4638      	mov	r0, r7
 80061ba:	f7ff ff6f 	bl	800609c <__ssputs_r>
 80061be:	3001      	adds	r0, #1
 80061c0:	f000 80a9 	beq.w	8006316 <_svfiprintf_r+0x1c6>
 80061c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061c6:	445a      	add	r2, fp
 80061c8:	9209      	str	r2, [sp, #36]	; 0x24
 80061ca:	f89a 3000 	ldrb.w	r3, [sl]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80a1 	beq.w	8006316 <_svfiprintf_r+0x1c6>
 80061d4:	2300      	movs	r3, #0
 80061d6:	f04f 32ff 	mov.w	r2, #4294967295
 80061da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061de:	f10a 0a01 	add.w	sl, sl, #1
 80061e2:	9304      	str	r3, [sp, #16]
 80061e4:	9307      	str	r3, [sp, #28]
 80061e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061ea:	931a      	str	r3, [sp, #104]	; 0x68
 80061ec:	4654      	mov	r4, sl
 80061ee:	2205      	movs	r2, #5
 80061f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f4:	4850      	ldr	r0, [pc, #320]	; (8006338 <_svfiprintf_r+0x1e8>)
 80061f6:	f000 fa67 	bl	80066c8 <memchr>
 80061fa:	9a04      	ldr	r2, [sp, #16]
 80061fc:	b9d8      	cbnz	r0, 8006236 <_svfiprintf_r+0xe6>
 80061fe:	06d0      	lsls	r0, r2, #27
 8006200:	bf44      	itt	mi
 8006202:	2320      	movmi	r3, #32
 8006204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006208:	0711      	lsls	r1, r2, #28
 800620a:	bf44      	itt	mi
 800620c:	232b      	movmi	r3, #43	; 0x2b
 800620e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006212:	f89a 3000 	ldrb.w	r3, [sl]
 8006216:	2b2a      	cmp	r3, #42	; 0x2a
 8006218:	d015      	beq.n	8006246 <_svfiprintf_r+0xf6>
 800621a:	4654      	mov	r4, sl
 800621c:	2000      	movs	r0, #0
 800621e:	f04f 0c0a 	mov.w	ip, #10
 8006222:	9a07      	ldr	r2, [sp, #28]
 8006224:	4621      	mov	r1, r4
 8006226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800622a:	3b30      	subs	r3, #48	; 0x30
 800622c:	2b09      	cmp	r3, #9
 800622e:	d94d      	bls.n	80062cc <_svfiprintf_r+0x17c>
 8006230:	b1b0      	cbz	r0, 8006260 <_svfiprintf_r+0x110>
 8006232:	9207      	str	r2, [sp, #28]
 8006234:	e014      	b.n	8006260 <_svfiprintf_r+0x110>
 8006236:	eba0 0308 	sub.w	r3, r0, r8
 800623a:	fa09 f303 	lsl.w	r3, r9, r3
 800623e:	4313      	orrs	r3, r2
 8006240:	46a2      	mov	sl, r4
 8006242:	9304      	str	r3, [sp, #16]
 8006244:	e7d2      	b.n	80061ec <_svfiprintf_r+0x9c>
 8006246:	9b03      	ldr	r3, [sp, #12]
 8006248:	1d19      	adds	r1, r3, #4
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	9103      	str	r1, [sp, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	bfbb      	ittet	lt
 8006252:	425b      	neglt	r3, r3
 8006254:	f042 0202 	orrlt.w	r2, r2, #2
 8006258:	9307      	strge	r3, [sp, #28]
 800625a:	9307      	strlt	r3, [sp, #28]
 800625c:	bfb8      	it	lt
 800625e:	9204      	strlt	r2, [sp, #16]
 8006260:	7823      	ldrb	r3, [r4, #0]
 8006262:	2b2e      	cmp	r3, #46	; 0x2e
 8006264:	d10c      	bne.n	8006280 <_svfiprintf_r+0x130>
 8006266:	7863      	ldrb	r3, [r4, #1]
 8006268:	2b2a      	cmp	r3, #42	; 0x2a
 800626a:	d134      	bne.n	80062d6 <_svfiprintf_r+0x186>
 800626c:	9b03      	ldr	r3, [sp, #12]
 800626e:	3402      	adds	r4, #2
 8006270:	1d1a      	adds	r2, r3, #4
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	9203      	str	r2, [sp, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	bfb8      	it	lt
 800627a:	f04f 33ff 	movlt.w	r3, #4294967295
 800627e:	9305      	str	r3, [sp, #20]
 8006280:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800633c <_svfiprintf_r+0x1ec>
 8006284:	2203      	movs	r2, #3
 8006286:	4650      	mov	r0, sl
 8006288:	7821      	ldrb	r1, [r4, #0]
 800628a:	f000 fa1d 	bl	80066c8 <memchr>
 800628e:	b138      	cbz	r0, 80062a0 <_svfiprintf_r+0x150>
 8006290:	2240      	movs	r2, #64	; 0x40
 8006292:	9b04      	ldr	r3, [sp, #16]
 8006294:	eba0 000a 	sub.w	r0, r0, sl
 8006298:	4082      	lsls	r2, r0
 800629a:	4313      	orrs	r3, r2
 800629c:	3401      	adds	r4, #1
 800629e:	9304      	str	r3, [sp, #16]
 80062a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a4:	2206      	movs	r2, #6
 80062a6:	4826      	ldr	r0, [pc, #152]	; (8006340 <_svfiprintf_r+0x1f0>)
 80062a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062ac:	f000 fa0c 	bl	80066c8 <memchr>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d038      	beq.n	8006326 <_svfiprintf_r+0x1d6>
 80062b4:	4b23      	ldr	r3, [pc, #140]	; (8006344 <_svfiprintf_r+0x1f4>)
 80062b6:	bb1b      	cbnz	r3, 8006300 <_svfiprintf_r+0x1b0>
 80062b8:	9b03      	ldr	r3, [sp, #12]
 80062ba:	3307      	adds	r3, #7
 80062bc:	f023 0307 	bic.w	r3, r3, #7
 80062c0:	3308      	adds	r3, #8
 80062c2:	9303      	str	r3, [sp, #12]
 80062c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c6:	4433      	add	r3, r6
 80062c8:	9309      	str	r3, [sp, #36]	; 0x24
 80062ca:	e768      	b.n	800619e <_svfiprintf_r+0x4e>
 80062cc:	460c      	mov	r4, r1
 80062ce:	2001      	movs	r0, #1
 80062d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80062d4:	e7a6      	b.n	8006224 <_svfiprintf_r+0xd4>
 80062d6:	2300      	movs	r3, #0
 80062d8:	f04f 0c0a 	mov.w	ip, #10
 80062dc:	4619      	mov	r1, r3
 80062de:	3401      	adds	r4, #1
 80062e0:	9305      	str	r3, [sp, #20]
 80062e2:	4620      	mov	r0, r4
 80062e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062e8:	3a30      	subs	r2, #48	; 0x30
 80062ea:	2a09      	cmp	r2, #9
 80062ec:	d903      	bls.n	80062f6 <_svfiprintf_r+0x1a6>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0c6      	beq.n	8006280 <_svfiprintf_r+0x130>
 80062f2:	9105      	str	r1, [sp, #20]
 80062f4:	e7c4      	b.n	8006280 <_svfiprintf_r+0x130>
 80062f6:	4604      	mov	r4, r0
 80062f8:	2301      	movs	r3, #1
 80062fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80062fe:	e7f0      	b.n	80062e2 <_svfiprintf_r+0x192>
 8006300:	ab03      	add	r3, sp, #12
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	462a      	mov	r2, r5
 8006306:	4638      	mov	r0, r7
 8006308:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <_svfiprintf_r+0x1f8>)
 800630a:	a904      	add	r1, sp, #16
 800630c:	f3af 8000 	nop.w
 8006310:	1c42      	adds	r2, r0, #1
 8006312:	4606      	mov	r6, r0
 8006314:	d1d6      	bne.n	80062c4 <_svfiprintf_r+0x174>
 8006316:	89ab      	ldrh	r3, [r5, #12]
 8006318:	065b      	lsls	r3, r3, #25
 800631a:	f53f af2d 	bmi.w	8006178 <_svfiprintf_r+0x28>
 800631e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006320:	b01d      	add	sp, #116	; 0x74
 8006322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006326:	ab03      	add	r3, sp, #12
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	462a      	mov	r2, r5
 800632c:	4638      	mov	r0, r7
 800632e:	4b06      	ldr	r3, [pc, #24]	; (8006348 <_svfiprintf_r+0x1f8>)
 8006330:	a904      	add	r1, sp, #16
 8006332:	f000 f87d 	bl	8006430 <_printf_i>
 8006336:	e7eb      	b.n	8006310 <_svfiprintf_r+0x1c0>
 8006338:	0800699f 	.word	0x0800699f
 800633c:	080069a5 	.word	0x080069a5
 8006340:	080069a9 	.word	0x080069a9
 8006344:	00000000 	.word	0x00000000
 8006348:	0800609d 	.word	0x0800609d

0800634c <_printf_common>:
 800634c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006350:	4616      	mov	r6, r2
 8006352:	4699      	mov	r9, r3
 8006354:	688a      	ldr	r2, [r1, #8]
 8006356:	690b      	ldr	r3, [r1, #16]
 8006358:	4607      	mov	r7, r0
 800635a:	4293      	cmp	r3, r2
 800635c:	bfb8      	it	lt
 800635e:	4613      	movlt	r3, r2
 8006360:	6033      	str	r3, [r6, #0]
 8006362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006366:	460c      	mov	r4, r1
 8006368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800636c:	b10a      	cbz	r2, 8006372 <_printf_common+0x26>
 800636e:	3301      	adds	r3, #1
 8006370:	6033      	str	r3, [r6, #0]
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	0699      	lsls	r1, r3, #26
 8006376:	bf42      	ittt	mi
 8006378:	6833      	ldrmi	r3, [r6, #0]
 800637a:	3302      	addmi	r3, #2
 800637c:	6033      	strmi	r3, [r6, #0]
 800637e:	6825      	ldr	r5, [r4, #0]
 8006380:	f015 0506 	ands.w	r5, r5, #6
 8006384:	d106      	bne.n	8006394 <_printf_common+0x48>
 8006386:	f104 0a19 	add.w	sl, r4, #25
 800638a:	68e3      	ldr	r3, [r4, #12]
 800638c:	6832      	ldr	r2, [r6, #0]
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	42ab      	cmp	r3, r5
 8006392:	dc2b      	bgt.n	80063ec <_printf_common+0xa0>
 8006394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006398:	1e13      	subs	r3, r2, #0
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	bf18      	it	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	0692      	lsls	r2, r2, #26
 80063a2:	d430      	bmi.n	8006406 <_printf_common+0xba>
 80063a4:	4649      	mov	r1, r9
 80063a6:	4638      	mov	r0, r7
 80063a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063ac:	47c0      	blx	r8
 80063ae:	3001      	adds	r0, #1
 80063b0:	d023      	beq.n	80063fa <_printf_common+0xae>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	6922      	ldr	r2, [r4, #16]
 80063b6:	f003 0306 	and.w	r3, r3, #6
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	bf14      	ite	ne
 80063be:	2500      	movne	r5, #0
 80063c0:	6833      	ldreq	r3, [r6, #0]
 80063c2:	f04f 0600 	mov.w	r6, #0
 80063c6:	bf08      	it	eq
 80063c8:	68e5      	ldreq	r5, [r4, #12]
 80063ca:	f104 041a 	add.w	r4, r4, #26
 80063ce:	bf08      	it	eq
 80063d0:	1aed      	subeq	r5, r5, r3
 80063d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80063d6:	bf08      	it	eq
 80063d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063dc:	4293      	cmp	r3, r2
 80063de:	bfc4      	itt	gt
 80063e0:	1a9b      	subgt	r3, r3, r2
 80063e2:	18ed      	addgt	r5, r5, r3
 80063e4:	42b5      	cmp	r5, r6
 80063e6:	d11a      	bne.n	800641e <_printf_common+0xd2>
 80063e8:	2000      	movs	r0, #0
 80063ea:	e008      	b.n	80063fe <_printf_common+0xb2>
 80063ec:	2301      	movs	r3, #1
 80063ee:	4652      	mov	r2, sl
 80063f0:	4649      	mov	r1, r9
 80063f2:	4638      	mov	r0, r7
 80063f4:	47c0      	blx	r8
 80063f6:	3001      	adds	r0, #1
 80063f8:	d103      	bne.n	8006402 <_printf_common+0xb6>
 80063fa:	f04f 30ff 	mov.w	r0, #4294967295
 80063fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006402:	3501      	adds	r5, #1
 8006404:	e7c1      	b.n	800638a <_printf_common+0x3e>
 8006406:	2030      	movs	r0, #48	; 0x30
 8006408:	18e1      	adds	r1, r4, r3
 800640a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006414:	4422      	add	r2, r4
 8006416:	3302      	adds	r3, #2
 8006418:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800641c:	e7c2      	b.n	80063a4 <_printf_common+0x58>
 800641e:	2301      	movs	r3, #1
 8006420:	4622      	mov	r2, r4
 8006422:	4649      	mov	r1, r9
 8006424:	4638      	mov	r0, r7
 8006426:	47c0      	blx	r8
 8006428:	3001      	adds	r0, #1
 800642a:	d0e6      	beq.n	80063fa <_printf_common+0xae>
 800642c:	3601      	adds	r6, #1
 800642e:	e7d9      	b.n	80063e4 <_printf_common+0x98>

08006430 <_printf_i>:
 8006430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006434:	7e0f      	ldrb	r7, [r1, #24]
 8006436:	4691      	mov	r9, r2
 8006438:	2f78      	cmp	r7, #120	; 0x78
 800643a:	4680      	mov	r8, r0
 800643c:	460c      	mov	r4, r1
 800643e:	469a      	mov	sl, r3
 8006440:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006442:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006446:	d807      	bhi.n	8006458 <_printf_i+0x28>
 8006448:	2f62      	cmp	r7, #98	; 0x62
 800644a:	d80a      	bhi.n	8006462 <_printf_i+0x32>
 800644c:	2f00      	cmp	r7, #0
 800644e:	f000 80d5 	beq.w	80065fc <_printf_i+0x1cc>
 8006452:	2f58      	cmp	r7, #88	; 0x58
 8006454:	f000 80c1 	beq.w	80065da <_printf_i+0x1aa>
 8006458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800645c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006460:	e03a      	b.n	80064d8 <_printf_i+0xa8>
 8006462:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006466:	2b15      	cmp	r3, #21
 8006468:	d8f6      	bhi.n	8006458 <_printf_i+0x28>
 800646a:	a101      	add	r1, pc, #4	; (adr r1, 8006470 <_printf_i+0x40>)
 800646c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006470:	080064c9 	.word	0x080064c9
 8006474:	080064dd 	.word	0x080064dd
 8006478:	08006459 	.word	0x08006459
 800647c:	08006459 	.word	0x08006459
 8006480:	08006459 	.word	0x08006459
 8006484:	08006459 	.word	0x08006459
 8006488:	080064dd 	.word	0x080064dd
 800648c:	08006459 	.word	0x08006459
 8006490:	08006459 	.word	0x08006459
 8006494:	08006459 	.word	0x08006459
 8006498:	08006459 	.word	0x08006459
 800649c:	080065e3 	.word	0x080065e3
 80064a0:	08006509 	.word	0x08006509
 80064a4:	0800659d 	.word	0x0800659d
 80064a8:	08006459 	.word	0x08006459
 80064ac:	08006459 	.word	0x08006459
 80064b0:	08006605 	.word	0x08006605
 80064b4:	08006459 	.word	0x08006459
 80064b8:	08006509 	.word	0x08006509
 80064bc:	08006459 	.word	0x08006459
 80064c0:	08006459 	.word	0x08006459
 80064c4:	080065a5 	.word	0x080065a5
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	1d1a      	adds	r2, r3, #4
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	602a      	str	r2, [r5, #0]
 80064d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064d8:	2301      	movs	r3, #1
 80064da:	e0a0      	b.n	800661e <_printf_i+0x1ee>
 80064dc:	6820      	ldr	r0, [r4, #0]
 80064de:	682b      	ldr	r3, [r5, #0]
 80064e0:	0607      	lsls	r7, r0, #24
 80064e2:	f103 0104 	add.w	r1, r3, #4
 80064e6:	6029      	str	r1, [r5, #0]
 80064e8:	d501      	bpl.n	80064ee <_printf_i+0xbe>
 80064ea:	681e      	ldr	r6, [r3, #0]
 80064ec:	e003      	b.n	80064f6 <_printf_i+0xc6>
 80064ee:	0646      	lsls	r6, r0, #25
 80064f0:	d5fb      	bpl.n	80064ea <_printf_i+0xba>
 80064f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80064f6:	2e00      	cmp	r6, #0
 80064f8:	da03      	bge.n	8006502 <_printf_i+0xd2>
 80064fa:	232d      	movs	r3, #45	; 0x2d
 80064fc:	4276      	negs	r6, r6
 80064fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006502:	230a      	movs	r3, #10
 8006504:	4859      	ldr	r0, [pc, #356]	; (800666c <_printf_i+0x23c>)
 8006506:	e012      	b.n	800652e <_printf_i+0xfe>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	6820      	ldr	r0, [r4, #0]
 800650c:	1d19      	adds	r1, r3, #4
 800650e:	6029      	str	r1, [r5, #0]
 8006510:	0605      	lsls	r5, r0, #24
 8006512:	d501      	bpl.n	8006518 <_printf_i+0xe8>
 8006514:	681e      	ldr	r6, [r3, #0]
 8006516:	e002      	b.n	800651e <_printf_i+0xee>
 8006518:	0641      	lsls	r1, r0, #25
 800651a:	d5fb      	bpl.n	8006514 <_printf_i+0xe4>
 800651c:	881e      	ldrh	r6, [r3, #0]
 800651e:	2f6f      	cmp	r7, #111	; 0x6f
 8006520:	bf0c      	ite	eq
 8006522:	2308      	moveq	r3, #8
 8006524:	230a      	movne	r3, #10
 8006526:	4851      	ldr	r0, [pc, #324]	; (800666c <_printf_i+0x23c>)
 8006528:	2100      	movs	r1, #0
 800652a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800652e:	6865      	ldr	r5, [r4, #4]
 8006530:	2d00      	cmp	r5, #0
 8006532:	bfa8      	it	ge
 8006534:	6821      	ldrge	r1, [r4, #0]
 8006536:	60a5      	str	r5, [r4, #8]
 8006538:	bfa4      	itt	ge
 800653a:	f021 0104 	bicge.w	r1, r1, #4
 800653e:	6021      	strge	r1, [r4, #0]
 8006540:	b90e      	cbnz	r6, 8006546 <_printf_i+0x116>
 8006542:	2d00      	cmp	r5, #0
 8006544:	d04b      	beq.n	80065de <_printf_i+0x1ae>
 8006546:	4615      	mov	r5, r2
 8006548:	fbb6 f1f3 	udiv	r1, r6, r3
 800654c:	fb03 6711 	mls	r7, r3, r1, r6
 8006550:	5dc7      	ldrb	r7, [r0, r7]
 8006552:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006556:	4637      	mov	r7, r6
 8006558:	42bb      	cmp	r3, r7
 800655a:	460e      	mov	r6, r1
 800655c:	d9f4      	bls.n	8006548 <_printf_i+0x118>
 800655e:	2b08      	cmp	r3, #8
 8006560:	d10b      	bne.n	800657a <_printf_i+0x14a>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	07de      	lsls	r6, r3, #31
 8006566:	d508      	bpl.n	800657a <_printf_i+0x14a>
 8006568:	6923      	ldr	r3, [r4, #16]
 800656a:	6861      	ldr	r1, [r4, #4]
 800656c:	4299      	cmp	r1, r3
 800656e:	bfde      	ittt	le
 8006570:	2330      	movle	r3, #48	; 0x30
 8006572:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006576:	f105 35ff 	addle.w	r5, r5, #4294967295
 800657a:	1b52      	subs	r2, r2, r5
 800657c:	6122      	str	r2, [r4, #16]
 800657e:	464b      	mov	r3, r9
 8006580:	4621      	mov	r1, r4
 8006582:	4640      	mov	r0, r8
 8006584:	f8cd a000 	str.w	sl, [sp]
 8006588:	aa03      	add	r2, sp, #12
 800658a:	f7ff fedf 	bl	800634c <_printf_common>
 800658e:	3001      	adds	r0, #1
 8006590:	d14a      	bne.n	8006628 <_printf_i+0x1f8>
 8006592:	f04f 30ff 	mov.w	r0, #4294967295
 8006596:	b004      	add	sp, #16
 8006598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	f043 0320 	orr.w	r3, r3, #32
 80065a2:	6023      	str	r3, [r4, #0]
 80065a4:	2778      	movs	r7, #120	; 0x78
 80065a6:	4832      	ldr	r0, [pc, #200]	; (8006670 <_printf_i+0x240>)
 80065a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	6829      	ldr	r1, [r5, #0]
 80065b0:	061f      	lsls	r7, r3, #24
 80065b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80065b6:	d402      	bmi.n	80065be <_printf_i+0x18e>
 80065b8:	065f      	lsls	r7, r3, #25
 80065ba:	bf48      	it	mi
 80065bc:	b2b6      	uxthmi	r6, r6
 80065be:	07df      	lsls	r7, r3, #31
 80065c0:	bf48      	it	mi
 80065c2:	f043 0320 	orrmi.w	r3, r3, #32
 80065c6:	6029      	str	r1, [r5, #0]
 80065c8:	bf48      	it	mi
 80065ca:	6023      	strmi	r3, [r4, #0]
 80065cc:	b91e      	cbnz	r6, 80065d6 <_printf_i+0x1a6>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	f023 0320 	bic.w	r3, r3, #32
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	2310      	movs	r3, #16
 80065d8:	e7a6      	b.n	8006528 <_printf_i+0xf8>
 80065da:	4824      	ldr	r0, [pc, #144]	; (800666c <_printf_i+0x23c>)
 80065dc:	e7e4      	b.n	80065a8 <_printf_i+0x178>
 80065de:	4615      	mov	r5, r2
 80065e0:	e7bd      	b.n	800655e <_printf_i+0x12e>
 80065e2:	682b      	ldr	r3, [r5, #0]
 80065e4:	6826      	ldr	r6, [r4, #0]
 80065e6:	1d18      	adds	r0, r3, #4
 80065e8:	6961      	ldr	r1, [r4, #20]
 80065ea:	6028      	str	r0, [r5, #0]
 80065ec:	0635      	lsls	r5, r6, #24
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	d501      	bpl.n	80065f6 <_printf_i+0x1c6>
 80065f2:	6019      	str	r1, [r3, #0]
 80065f4:	e002      	b.n	80065fc <_printf_i+0x1cc>
 80065f6:	0670      	lsls	r0, r6, #25
 80065f8:	d5fb      	bpl.n	80065f2 <_printf_i+0x1c2>
 80065fa:	8019      	strh	r1, [r3, #0]
 80065fc:	2300      	movs	r3, #0
 80065fe:	4615      	mov	r5, r2
 8006600:	6123      	str	r3, [r4, #16]
 8006602:	e7bc      	b.n	800657e <_printf_i+0x14e>
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	2100      	movs	r1, #0
 8006608:	1d1a      	adds	r2, r3, #4
 800660a:	602a      	str	r2, [r5, #0]
 800660c:	681d      	ldr	r5, [r3, #0]
 800660e:	6862      	ldr	r2, [r4, #4]
 8006610:	4628      	mov	r0, r5
 8006612:	f000 f859 	bl	80066c8 <memchr>
 8006616:	b108      	cbz	r0, 800661c <_printf_i+0x1ec>
 8006618:	1b40      	subs	r0, r0, r5
 800661a:	6060      	str	r0, [r4, #4]
 800661c:	6863      	ldr	r3, [r4, #4]
 800661e:	6123      	str	r3, [r4, #16]
 8006620:	2300      	movs	r3, #0
 8006622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006626:	e7aa      	b.n	800657e <_printf_i+0x14e>
 8006628:	462a      	mov	r2, r5
 800662a:	4649      	mov	r1, r9
 800662c:	4640      	mov	r0, r8
 800662e:	6923      	ldr	r3, [r4, #16]
 8006630:	47d0      	blx	sl
 8006632:	3001      	adds	r0, #1
 8006634:	d0ad      	beq.n	8006592 <_printf_i+0x162>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	079b      	lsls	r3, r3, #30
 800663a:	d413      	bmi.n	8006664 <_printf_i+0x234>
 800663c:	68e0      	ldr	r0, [r4, #12]
 800663e:	9b03      	ldr	r3, [sp, #12]
 8006640:	4298      	cmp	r0, r3
 8006642:	bfb8      	it	lt
 8006644:	4618      	movlt	r0, r3
 8006646:	e7a6      	b.n	8006596 <_printf_i+0x166>
 8006648:	2301      	movs	r3, #1
 800664a:	4632      	mov	r2, r6
 800664c:	4649      	mov	r1, r9
 800664e:	4640      	mov	r0, r8
 8006650:	47d0      	blx	sl
 8006652:	3001      	adds	r0, #1
 8006654:	d09d      	beq.n	8006592 <_printf_i+0x162>
 8006656:	3501      	adds	r5, #1
 8006658:	68e3      	ldr	r3, [r4, #12]
 800665a:	9903      	ldr	r1, [sp, #12]
 800665c:	1a5b      	subs	r3, r3, r1
 800665e:	42ab      	cmp	r3, r5
 8006660:	dcf2      	bgt.n	8006648 <_printf_i+0x218>
 8006662:	e7eb      	b.n	800663c <_printf_i+0x20c>
 8006664:	2500      	movs	r5, #0
 8006666:	f104 0619 	add.w	r6, r4, #25
 800666a:	e7f5      	b.n	8006658 <_printf_i+0x228>
 800666c:	080069b0 	.word	0x080069b0
 8006670:	080069c1 	.word	0x080069c1

08006674 <memmove>:
 8006674:	4288      	cmp	r0, r1
 8006676:	b510      	push	{r4, lr}
 8006678:	eb01 0402 	add.w	r4, r1, r2
 800667c:	d902      	bls.n	8006684 <memmove+0x10>
 800667e:	4284      	cmp	r4, r0
 8006680:	4623      	mov	r3, r4
 8006682:	d807      	bhi.n	8006694 <memmove+0x20>
 8006684:	1e43      	subs	r3, r0, #1
 8006686:	42a1      	cmp	r1, r4
 8006688:	d008      	beq.n	800669c <memmove+0x28>
 800668a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800668e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006692:	e7f8      	b.n	8006686 <memmove+0x12>
 8006694:	4601      	mov	r1, r0
 8006696:	4402      	add	r2, r0
 8006698:	428a      	cmp	r2, r1
 800669a:	d100      	bne.n	800669e <memmove+0x2a>
 800669c:	bd10      	pop	{r4, pc}
 800669e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066a6:	e7f7      	b.n	8006698 <memmove+0x24>

080066a8 <_sbrk_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	2300      	movs	r3, #0
 80066ac:	4d05      	ldr	r5, [pc, #20]	; (80066c4 <_sbrk_r+0x1c>)
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	f7fb f9d4 	bl	8001a60 <_sbrk>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d102      	bne.n	80066c2 <_sbrk_r+0x1a>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	b103      	cbz	r3, 80066c2 <_sbrk_r+0x1a>
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	bd38      	pop	{r3, r4, r5, pc}
 80066c4:	20000430 	.word	0x20000430

080066c8 <memchr>:
 80066c8:	4603      	mov	r3, r0
 80066ca:	b510      	push	{r4, lr}
 80066cc:	b2c9      	uxtb	r1, r1
 80066ce:	4402      	add	r2, r0
 80066d0:	4293      	cmp	r3, r2
 80066d2:	4618      	mov	r0, r3
 80066d4:	d101      	bne.n	80066da <memchr+0x12>
 80066d6:	2000      	movs	r0, #0
 80066d8:	e003      	b.n	80066e2 <memchr+0x1a>
 80066da:	7804      	ldrb	r4, [r0, #0]
 80066dc:	3301      	adds	r3, #1
 80066de:	428c      	cmp	r4, r1
 80066e0:	d1f6      	bne.n	80066d0 <memchr+0x8>
 80066e2:	bd10      	pop	{r4, pc}

080066e4 <memcpy>:
 80066e4:	440a      	add	r2, r1
 80066e6:	4291      	cmp	r1, r2
 80066e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066ec:	d100      	bne.n	80066f0 <memcpy+0xc>
 80066ee:	4770      	bx	lr
 80066f0:	b510      	push	{r4, lr}
 80066f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066f6:	4291      	cmp	r1, r2
 80066f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066fc:	d1f9      	bne.n	80066f2 <memcpy+0xe>
 80066fe:	bd10      	pop	{r4, pc}

08006700 <_realloc_r>:
 8006700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006704:	4680      	mov	r8, r0
 8006706:	4614      	mov	r4, r2
 8006708:	460e      	mov	r6, r1
 800670a:	b921      	cbnz	r1, 8006716 <_realloc_r+0x16>
 800670c:	4611      	mov	r1, r2
 800670e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006712:	f7ff bc37 	b.w	8005f84 <_malloc_r>
 8006716:	b92a      	cbnz	r2, 8006724 <_realloc_r+0x24>
 8006718:	f7ff fbcc 	bl	8005eb4 <_free_r>
 800671c:	4625      	mov	r5, r4
 800671e:	4628      	mov	r0, r5
 8006720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006724:	f000 f81b 	bl	800675e <_malloc_usable_size_r>
 8006728:	4284      	cmp	r4, r0
 800672a:	4607      	mov	r7, r0
 800672c:	d802      	bhi.n	8006734 <_realloc_r+0x34>
 800672e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006732:	d812      	bhi.n	800675a <_realloc_r+0x5a>
 8006734:	4621      	mov	r1, r4
 8006736:	4640      	mov	r0, r8
 8006738:	f7ff fc24 	bl	8005f84 <_malloc_r>
 800673c:	4605      	mov	r5, r0
 800673e:	2800      	cmp	r0, #0
 8006740:	d0ed      	beq.n	800671e <_realloc_r+0x1e>
 8006742:	42bc      	cmp	r4, r7
 8006744:	4622      	mov	r2, r4
 8006746:	4631      	mov	r1, r6
 8006748:	bf28      	it	cs
 800674a:	463a      	movcs	r2, r7
 800674c:	f7ff ffca 	bl	80066e4 <memcpy>
 8006750:	4631      	mov	r1, r6
 8006752:	4640      	mov	r0, r8
 8006754:	f7ff fbae 	bl	8005eb4 <_free_r>
 8006758:	e7e1      	b.n	800671e <_realloc_r+0x1e>
 800675a:	4635      	mov	r5, r6
 800675c:	e7df      	b.n	800671e <_realloc_r+0x1e>

0800675e <_malloc_usable_size_r>:
 800675e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006762:	1f18      	subs	r0, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	bfbc      	itt	lt
 8006768:	580b      	ldrlt	r3, [r1, r0]
 800676a:	18c0      	addlt	r0, r0, r3
 800676c:	4770      	bx	lr
	...

08006770 <_init>:
 8006770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006772:	bf00      	nop
 8006774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006776:	bc08      	pop	{r3}
 8006778:	469e      	mov	lr, r3
 800677a:	4770      	bx	lr

0800677c <_fini>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	bf00      	nop
 8006780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006782:	bc08      	pop	{r3}
 8006784:	469e      	mov	lr, r3
 8006786:	4770      	bx	lr
